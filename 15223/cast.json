[[0.032862,{"lines":{"0":[["                                                                                                                                                                                     ",{}]],"1":[["                                                                                                                                                                                     ",{}]],"2":[["                                                                                                                                                                                     ",{}]],"3":[["                                                                                                                                                                                     ",{}]],"4":[["                                                                                                                                                                                     ",{}]],"5":[["                                                                                                                                                                                     ",{}]],"6":[["                                                                                                                                                                                     ",{}]],"7":[["                                                                                                                                                                                     ",{}]],"8":[["                                                                                                                                                                                     ",{}]],"9":[["                                                                                                                                                                                     ",{}]],"10":[["                                                                                                                                                                                     ",{}]],"11":[["                                                                                                                                                                                     ",{}]],"12":[["                                                                                                                                                                                     ",{}]],"13":[["                                                                                                                                                                                     ",{}]],"14":[["                                                                                                                                                                                     ",{}]],"15":[["                                                                                                                                                                                     ",{}]],"16":[["                                                                                                                                                                                     ",{}]],"17":[["                                                                                                                                                                                     ",{}]],"18":[["                                                                                                                                                                                     ",{}]],"19":[["                                                                                                                                                                                     ",{}]],"20":[["                                                                                                                                                                                     ",{}]],"21":[["                                                                                                                                                                                     ",{}]],"22":[["                                                                                                                                                                                     ",{}]],"23":[["                                                                                                                                                                                     ",{}]],"24":[["                                                                                                                                                                                     ",{}]],"25":[["                                                                                                                                                                                     ",{}]],"26":[["                                                                                                                                                                                     ",{}]],"27":[["                                                                                                                                                                                     ",{}]],"28":[["                                                                                                                                                                                     ",{}]],"29":[["                                                                                                                                                                                     ",{}]],"30":[["                                                                                                                                                                                     ",{}]],"31":[["                                                                                                                                                                                     ",{}]],"32":[["                                                                                                                                                                                     ",{}]],"33":[["                                                                                                                                                                                     ",{}]],"34":[["                                                                                                                                                                                     ",{}]],"35":[["                                                                                                                                                                                     ",{}]],"36":[["                                                                                                                                                                                     ",{}]],"37":[["                                                                                                                                                                                     ",{}]],"38":[["                                                                                                                                                                                     ",{}]],"39":[["                                                                                                                                                                                     ",{}]],"40":[["                                                                                                                                                                                     ",{}]],"41":[["                                                                                                                                                                                     ",{}]],"42":[["                                                                                                                                                                                     ",{}]],"43":[["                                                                                                                                                                                     ",{}]],"44":[["                                                                                                                                                                                     ",{}]],"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0,"y":1,"visible":true}}],[0.002024,{"lines":{"1":[["     |\\      _,,,---,,_               \\   ^__^",{"fg":3}],["                                                                                                                                       ",{}]],"2":[["     /,`.-'`'    -.  ;-;;,_            \\  (oo)\\_______          ",{"fg":3}],["                                                                                                                     ",{}]],"3":[["    |,A-  ) )-,_..;\\ (  `'-'              (__)\\       )\\/\\      ",{"fg":3}],["                                                                                                                     ",{}]],"4":[["   '---''(_/--'  `-'\\_)                       ||----w |             ",{"fg":3}],["                                                                                                                 ",{}]],"5":[["                                              ||     ||             ",{"fg":3}],["                                                                                                                 ",{}]]},"cursor":{"y":6}}],[0.059762,{}],[1.7e-05,{"lines":{"6":[["~/ipap/github/julia master",{"fg":3}],["$                                                                                                                                                          ",{}]]},"cursor":{"x":28}}],[1.417463,{"lines":{"6":[["~/ipap/github/julia master",{"fg":3}],["$ l                                                                                                                                                        ",{}]]},"cursor":{"x":29}}],[0.079749,{"lines":{"6":[["~/ipap/github/julia master",{"fg":3}],["$ ls                                                                                                                                                       ",{}]]},"cursor":{"x":30}}],[0.144204,{"cursor":{"x":0,"y":7}}],[0.00383,{"lines":{"7":[["ARM.inc            LICENSE.md         Makefile           README.md          Windows.inc        ",{}],["contrib",{"fg":4}],["/           ",{}],["etc",{"fg":4}],["/               ",{}],["src",{"fg":4}],["/               ",{}],["usr",{"fg":4}],["/                         ",{}]],"8":[["CONTRIBUTING.md    Make.inc           NEWS.md            README.windows.md  appveyor.yml       ",{}],["deps",{"fg":4}],["/              ",{}],["examples",{"fg":4}],["/          ",{}],["test",{"fg":4}],["/                                           ",{}]],"9":[["DISTRIBUTING.md    Make.user          README.arm.md      VERSION            ",{}],["base",{"fg":4}],["/              ",{}],["doc",{"fg":4}],["/               ",{}],["julia",{"fg":5}],["@             ",{}],["ui",{"fg":4}],["/                                             ",{}]]},"cursor":{"y":10}}],[0.047643,{"lines":{"10":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$                                                                                                                                                          ",{}]]},"cursor":{"x":28}}],[1.268739,{"lines":{"10":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ g                                                                                                                                                        ",{}]]},"cursor":{"x":29}}],[0.072576,{"lines":{"10":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ gi                                                                                                                                                       ",{}]]},"cursor":{"x":30}}],[0.111812,{"lines":{"10":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ git                                                                                                                                                      ",{}]]},"cursor":{"x":31}}],[0.09548,{"cursor":{"x":32}}],[0.151936,{"lines":{"10":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ git d                                                                                                                                                    ",{}]]},"cursor":{"x":33}}],[0.088029,{"lines":{"10":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ git di                                                                                                                                                   ",{}]]},"cursor":{"x":34}}],[0.088139,{"lines":{"10":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ git dif                                                                                                                                                  ",{}]]},"cursor":{"x":35}}],[0.176383,{"lines":{"10":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ git diff                                                                                                                                                 ",{}]]},"cursor":{"x":36}}],[0.239435,{"cursor":{"x":37}}],[0.52861,{"lines":{"10":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ git diff H                                                                                                                                               ",{}]]},"cursor":{"x":38}}],[0.111444,{"lines":{"10":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ git diff HE                                                                                                                                              ",{}]]},"cursor":{"x":39}}],[0.152039,{"lines":{"10":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ git diff HEA                                                                                                                                             ",{}]]},"cursor":{"x":40}}],[0.168085,{"lines":{"10":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ git diff HEAD                                                                                                                                            ",{}]]},"cursor":{"x":41}}],[0.368436,{"lines":{"10":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ git diff HEAD~                                                                                                                                           ",{}]]},"cursor":{"x":42}}],[0.391649,{"lines":{"10":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ git diff HEAD~2                                                                                                                                          ",{}]]},"cursor":{"x":43}}],[0.463914,{"lines":{"10":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ git diff HEAD~                                                                                                                                           ",{}]]},"cursor":{"x":42}}],[0.479824,{"lines":{"10":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ git diff HEAD~2                                                                                                                                          ",{}]]},"cursor":{"x":43}}],[0.104114,{"lines":{"10":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ git diff HEAD~29                                                                                                                                         ",{}]]},"cursor":{"x":44}}],[0.168277,{"cursor":{"x":0,"y":11}}],[0.008489999999999999,{}],[0.034628,{"lines":{"11":[["diff --git a/NEWS.md b/NEWS.md",{"bold":true}],["                                                                                                                                                       ",{}]],"12":[["index 39810e0..8b4d720 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"13":[["--- a/NEWS.md",{"bold":true}],["                                                                                                                                                                        ",{}]],"14":[["+++ b/NEWS.md",{"bold":true}],["                                                                                                                                                                        ",{}]],"15":[["@@ -143,6 +143,7 @@",{"fg":6}],[" Library improvements                                                                                                                                             ",{}]],"17":[["   * The `randexp` and `randexp!` functions are exported ([#9144])                                                                                                                   ",{}]],"19":[["+  * A new `Val{T}` type allows one to dispatch on bits-type values ([#9452])",{"fg":2}],["                                                                                                        ",{}]],"21":[[" Deprecated or removed                                                                                                                                                               ",{}]],"22":[[" ---------------------                                                                                                                                                               ",{}]],"23":[["@@ -168,6 +169,8 @@",{"fg":6}],[" Deprecated or removed                                                                                                                                            ",{}]],"24":[["   * `randbool` is deprecated. Use `rand(Bool)` to produce a random boolean value, and                                                                                               ",{}]],"25":[["     `bitrand` to produce a random BitArray ([#9105], [#9569]).                                                                                                                      ",{}]],"27":[["+  * `beginswith` is renamed to `startswith` ([#9578]).",{"fg":2}],["                                                                                                                              ",{}]],"28":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"29":[[" Julia v0.3.0 Release Notes                                                                                                                                                          ",{}]],"30":[[" ==========================                                                                                                                                                          ",{}]],"32":[["@@ -1145,3 +1148,4 @@",{"fg":6}],[" Too numerous to mention.                                                                                                                                       ",{}]],"33":[[" [#9271]: https://github.com/JuliaLang/julia/issues/9271                                                                                                                             ",{}]],"34":[[" [#9294]: https://github.com/JuliaLang/ju                                                                                                                                            ",{}]]},"cursor":{"x":41,"y":34}}],[0.000312,{"lines":{"0":[["diff --git a/NEWS.md b/NEWS.md",{"bold":true}],["                                                                                                                                                       ",{}]],"1":[["index 39810e0..8b4d720 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"2":[["--- a/NEWS.md",{"bold":true}],["                                                                                                                                                                        ",{}]],"3":[["+++ b/NEWS.md",{"bold":true}],["                                                                                                                                                                        ",{}]],"4":[["@@ -143,6 +143,7 @@",{"fg":6}],[" Library improvements                                                                                                                                             ",{}]],"5":[["                                                                                                                                                                                     ",{}]],"6":[["   * The `randexp` and `randexp!` functions are exported ([#9144])                                                                                                                   ",{}]],"7":[["                                                                                                                                                                                     ",{}]],"8":[["+  * A new `Val{T}` type allows one to dispatch on bits-type values ([#9452])",{"fg":2}],["                                                                                                        ",{}]],"9":[["                                                                                                                                                                                     ",{}]],"10":[[" Deprecated or removed                                                                                                                                                               ",{}]],"11":[[" ---------------------                                                                                                                                                               ",{}]],"12":[["@@ -168,6 +169,8 @@",{"fg":6}],[" Deprecated or removed                                                                                                                                            ",{}]],"13":[["   * `randbool` is deprecated. Use `rand(Bool)` to produce a random boolean value, and                                                                                               ",{}]],"14":[["     `bitrand` to produce a random BitArray ([#9105], [#9569]).                                                                                                                      ",{}]],"15":[["                                                                                                                                                                                     ",{}]],"16":[["+  * `beginswith` is renamed to `startswith` ([#9578]).",{"fg":2}],["                                                                                                                              ",{}]],"17":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"18":[[" Julia v0.3.0 Release Notes                                                                                                                                                          ",{}]],"19":[[" ==========================                                                                                                                                                          ",{}]],"21":[["@@ -1145,3 +1148,4 @@",{"fg":6}],[" Too numerous to mention.                                                                                                                                       ",{}]],"22":[[" [#9271]: https://github.com/JuliaLang/julia/issues/9271                                                                                                                             ",{}]],"23":[[" [#9294]: https://github.com/JuliaLang/julia/issues/9294                                                                                                                             ",{}]],"24":[[" [#9569]: https://github.com/JuliaLang/julia/issues/9569                                                                                                                             ",{}]],"25":[["+[#9452]: https://github.com/JuliaLang/julia/issues/9452",{"fg":2}],["                                                                                                                             ",{}]],"26":[["diff --git a/base/REPL.jl b/base/REPL.jl",{"bold":true}],["                                                                                                                                             ",{}]],"27":[["index 42b9a2c..323a0d6 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"28":[["--- a/base/REPL.jl",{"bold":true}],["                                                                                                                                                                   ",{}]],"29":[["+++ b/base/REPL.jl",{"bold":true}],["                                                                                                                                                                   ",{}]],"30":[["@@ -483,7 +483,7 @@",{"fg":6}],[" function history_move_prefix(s::LineEdit.PrefixSearchState,                                                                                                      ",{}]],"31":[["     max_idx = length(hist.history)+1                                                                                                                                                ",{}]],"32":[["     idxs = backwards ? ((cur_idx-1):-1:1) : ((cur_idx+1):max_idx)                                                                                                                   ",{}]],"33":[["     for idx in idxs                                                                                                                                                                 ",{}]],"34":[["-        if (idx == max_idx) || (beginswith(hist.history[idx], prefix) && (hist.history[idx] != cur_response || hist.modes[idx] != LineEdit.mode(s)))",{"fg":1}],["                                ",{}]],"35":[["+        if (idx == max_idx) || (startswith(hist.history[idx], prefix) && (hist.history[idx] != cur_response || hist.modes[idx] != LineEdit.mode(s)))",{"fg":2}],["                                ",{}]],"36":[["             m = history_move(s, hist, idx)                                                                                                                                          ",{}]],"37":[["             if m == :ok                                                                                                                                                             ",{}]],"38":[["                 if length(prefix) == 0                                                                                                                                              ",{}]],"39":[["diff --git a/base/REPLCompletions.jl b/base/REPLCompletions.jl",{"bold":true}],["                                                                                                                       ",{}]],"40":[["index 2c9c547..3dae5f9 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"41":[["--- a/base/REPLCompletions.jl",{"bold":true}],["                                                                                                                                                        ",{}]],"42":[["+++ b/base/REPLCompletions.jl",{"bold":true}],["                                                                                                                                                        ",{}]],"43":[["@@ -5,7 +5,7 @@",{"fg":6}],[" export completions, shell_completions, latex_completions                                                                                                             ",{}]],"44":[[" using Base.Meta                                                                                                                                                                     ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1,"y":45}}],[1.11683,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0006179999999999998,{"lines":{"0":[["                                                                                                                                                                                     ",{}]],"1":[[" function completes_global(x, name)                                                                                                                                                  ",{}]],"2":[["-    return beginswith(x, name) && !('#' in x)",{"fg":1}],["                                                                                                                                       ",{}]],"3":[["+    return startswith(x, name) && !('#' in x)",{"fg":2}],["                                                                                                                                       ",{}]],"4":[[" end                                                                                                                                                                                 ",{}]],"6":[[" function filtered_mod_names(ffunc::Function, mod::Module, name::AbstractString, all::Bool=false, imported::Bool=false)                                                              ",{}]],"7":[["@@ -82,7 +82,7 @@",{"fg":6}],[" function complete_symbol(sym, ffunc)                                                                                                                               ",{}]],"8":[["         fields = t.names                                                                                                                                                            ",{}]],"9":[["         for field in fields                                                                                                                                                         ",{}]],"10":[["             s = string(field)                                                                                                                                                       ",{}]],"11":[["-            if beginswith(s, name)",{"fg":1}],["                                                                                                                                                  ",{}]],"12":[["+            if startswith(s, name)",{"fg":2}],["                                                                                                                                                  ",{}]],"13":[["                 push!(suggestions, s)                                                                                                                                               ",{}]],"14":[["             end                                                                                                                                                                     ",{}]],"15":[["         end                                                                                                                                                                         ",{}]],"16":[["@@ -100,7 +100,7 @@",{"fg":6}],[" function complete_keyword(s::ByteString)                                                                                                                         ",{}]],"17":[["     r = searchsorted(sorted_keywords, s)                                                                                                                                            ",{}]],"18":[["     i = first(r)                                                                                                                                                                    ",{}]],"19":[["     n = length(sorted_keywords)                                                                                                                                                     ",{}]],"20":[["-    while i <= n && beginswith(sorted_keywords[i],s)",{"fg":1}],["                                                                                                                                ",{}]],"21":[["+    while i <= n && startswith(sorted_keywords[i],s)",{"fg":2}],["                                                                                                                                ",{}]],"22":[["         r = first(r):i                                                                                                                                                              ",{}]],"23":[["         i += 1                                                                                                                                                                      ",{}]],"24":[["     end                                                                                                                                                                             ",{}]],"25":[["@@ -124,7 +124,7 @@",{"fg":6}],[" function complete_path(path::AbstractString, pos)                                                                                                                ",{}]],"26":[["                                                                                                                                                                                     ",{}]],"27":[["     matches = UTF8String[]                                                                                                                                                          ",{}]],"28":[["     for file in files                                                                                                                                                               ",{}]],"29":[["-        if beginswith(file, prefix)",{"fg":1}],["                                                                                                                                                 ",{}]],"30":[["+        if startswith(file, prefix)",{"fg":2}],["                                                                                                                                                 ",{}]],"31":[["             id = try isdir(joinpath(dir, file)) catch; false end                                                                                                                    ",{}]],"32":[["             # joinpath is not used because windows needs to complete with double-backslash                                                                                          ",{}]],"33":[["             push!(matches, id ? file * (@windows? \"\\\\\\\\\" : \"/\") : file)                                                                                                             ",{}]],"34":[["@@ -175,7 +175,7 @@",{"fg":6}],[" function latex_completions(string, pos)                                                                                                                          ",{}]],"35":[["         else                                                                                                                                                                        ",{}]],"36":[["             # return possible matches; these cannot be mixed with regular                                                                                                           ",{}]],"37":[["             # Julian completions as only latex symbols contain the leading \\                                                                                                        ",{}]],"38":[["-            latex_names = filter(k -> beginswith(k, s), keys(latex_symbols))",{"fg":1}],["                                                                                                        ",{}]],"39":[["+            latex_names = filter(k -> startswith(k, s), keys(latex_symbols))",{"fg":2}],["                                                                                                        ",{}]],"40":[["             return (true, (sort!(collect(latex_names)), slashpos:pos, true))                                                                                                        ",{}]],"41":[["         end                                                                                                                                                                         ",{}]],"42":[["     end                                                                                                                                                                             ",{}]],"43":[["@@ -232,7 +232,7 @@",{"fg":6}],[" function completions(string, pos)                                                                                                                                ",{}]],"44":[["                 pname[1] != '.' &&                                                                                                                                                  ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.078593,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0006129999999999999,{"lines":{"0":[["                 pname != \"METADATA\" &&                                                                                                                                              ",{}]],"1":[["                 pname != \"REQUIRE\" &&                                                                                                                                               ",{}]],"2":[["-                beginswith(pname, s)",{"fg":1}],["                                                                                                                                                ",{}]],"3":[["+                startswith(pname, s)",{"fg":2}],["                                                                                                                                                ",{}]],"4":[["             end)                                                                                                                                                                    ",{}]],"5":[["         end                                                                                                                                                                         ",{}]],"6":[["         ffunc = (mod,x)->(isdefined(mod, x) && isa(mod.(x), Module))                                                                                                                ",{}]],"7":[["diff --git a/base/Terminals.jl b/base/Terminals.jl",{"bold":true}],["                                                                                                                                   ",{}]],"8":[["index 9ac5db6..b94047c 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"9":[["--- a/base/Terminals.jl",{"bold":true}],["                                                                                                                                                              ",{}]],"10":[["+++ b/base/Terminals.jl",{"bold":true}],["                                                                                                                                                              ",{}]],"11":[["@@ -196,7 +196,7 @@",{"fg":6}],[" start_reading(t::UnixTerminal) = start_reading(t.in_stream)                                                                                                      ",{}]],"12":[[" stop_reading(t::UnixTerminal) = stop_reading(t.in_stream)                                                                                                                           ",{}]],"13":[[" eof(t::UnixTerminal) = eof(t.in_stream)                                                                                                                                             ",{}]],"14":[["                                                                                                                                                                                     ",{}]],"15":[["-@unix_only hascolor(t::TTYTerminal) = (beginswith(t.term_type, \"xterm\") || success(`tput setaf 0`))",{"fg":1}],["                                                                                 ",{}]],"16":[["+@unix_only hascolor(t::TTYTerminal) = (startswith(t.term_type, \"xterm\") || success(`tput setaf 0`))",{"fg":2}],["                                                                                 ",{}]],"17":[[" @windows_only hascolor(t::TTYTerminal) = true                                                                                                                                       ",{}]],"18":[["                                                                                                                                                                                     ",{}]],"19":[[" end # module                                                                                                                                                                        ",{}]],"20":[["diff --git a/base/client.jl b/base/client.jl",{"bold":true}],["                                                                                                                                         ",{}]],"21":[["index db5266c..fb0a71e 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"22":[["--- a/base/client.jl",{"bold":true}],["                                                                                                                                                                 ",{}]],"23":[["+++ b/base/client.jl",{"bold":true}],["                                                                                                                                                                 ",{}]],"24":[["@@ -282,7 +282,7 @@",{"fg":6}],[" function process_options(args::Vector{UTF8String})                                                                                                               ",{}]],"25":[["             startup = false                                                                                                                                                         ",{}]],"26":[["         elseif args[i] == \"-i\"                                                                                                                                                      ",{}]],"27":[["             global is_interactive = true                                                                                                                                            ",{}]],"28":[["-        elseif beginswith(args[i], \"--color\")",{"fg":1}],["                                                                                                                                       ",{}]],"29":[["+        elseif startswith(args[i], \"--color\")",{"fg":2}],["                                                                                                                                       ",{}]],"30":[["             if args[i] == \"--color\"                                                                                                                                                 ",{}]],"31":[["                 color_set = true                                                                                                                                                    ",{}]],"32":[["                 global have_color = true                                                                                                                                            ",{}]],"33":[["diff --git a/base/deprecated.jl b/base/deprecated.jl",{"bold":true}],["                                                                                                                                 ",{}]],"34":[["index 1157a15..f2889ab 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"35":[["--- a/base/deprecated.jl",{"bold":true}],["                                                                                                                                                             ",{}]],"36":[["+++ b/base/deprecated.jl",{"bold":true}],["                                                                                                                                                             ",{}]],"37":[["@@ -264,3 +264,7 @@",{"fg":6}],[" const base64 = base64encode                                                                                                                                      ",{}]],"38":[[" @deprecate randbool(dims::Int...)                  bitrand(dims)                                                                                                                    ",{}]],"39":[[" @deprecate randbool(r::AbstractRNG, dims::Dims)    bitrand(r, dims)                                                                                                                 ",{}]],"40":[[" @deprecate randbool(r::AbstractRNG, dims::Int...)  bitrand(r, dims)                                                                                                                 ",{}]],"41":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"42":[["+@deprecate beginswith startswith",{"fg":2}],["                                                                                                                                                    ",{}]],"43":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"44":[["+@deprecate functionlocs(f,t)  map(functionloc, methods(f,t))",{"fg":2}],["                                                                                                                        ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.215702,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.000603,{"lines":{"0":[["diff --git a/base/exports.jl b/base/exports.jl",{"bold":true}],["                                                                                                                                       ",{}]],"1":[["index 644fa0e..3c61332 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"2":[["--- a/base/exports.jl",{"bold":true}],["                                                                                                                                                                ",{}]],"3":[["+++ b/base/exports.jl",{"bold":true}],["                                                                                                                                                                ",{}]],"4":[["@@ -813,7 +813,7 @@",{"fg":6}],[" export                                                                                                                                                           ",{}]],"5":[["     base64decode,                                                                                                                                                                   ",{}]],"6":[["     Base64EncodePipe,                                                                                                                                                               ",{}]],"7":[["     Base64DecodePipe,                                                                                                                                                               ",{}]],"8":[["-    beginswith,",{"fg":1}],["                                                                                                                                                                     ",{}]],"9":[["+    startswith,",{"fg":2}],["                                                                                                                                                                     ",{}]],"10":[["     bin,                                                                                                                                                                            ",{}]],"11":[["     bits,                                                                                                                                                                           ",{}]],"12":[["     bytes2hex,                                                                                                                                                                      ",{}]],"13":[["@@ -1080,7 +1080,6 @@",{"fg":6}],[" export                                                                                                                                                         ",{}]],"14":[["     code_native,                                                                                                                                                                    ",{}]],"15":[["     fullname,                                                                                                                                                                       ",{}]],"16":[["     functionloc,                                                                                                                                                                    ",{}]],"17":[["-    functionlocs,",{"fg":1}],["                                                                                                                                                                   ",{}]],"18":[["     help,                                                                                                                                                                           ",{}]],"19":[["     isconst,                                                                                                                                                                        ",{}]],"20":[["     isgeneric,                                                                                                                                                                      ",{}]],"21":[["diff --git a/base/gmp.jl b/base/gmp.jl",{"bold":true}],["                                                                                                                                               ",{}]],"22":[["index c3acf79..d4d533c 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"23":[["--- a/base/gmp.jl",{"bold":true}],["                                                                                                                                                                    ",{}]],"24":[["+++ b/base/gmp.jl",{"bold":true}],["                                                                                                                                                                    ",{}]],"25":[["@@ -436,7 +436,7 @@",{"fg":6}],[" function binomial(n::BigInt, k::UInt)                                                                                                                            ",{}]],"26":[["     ccall((:__gmpz_bin_ui, :libgmp), Void, (Ptr{BigInt}, Ptr{BigInt}, Culong), &z, &n, k)                                                                                           ",{}]],"27":[["     return z                                                                                                                                                                        ",{}]],"28":[[" end                                                                                                                                                                                 ",{}]],"29":[["-binomial(n::BigInt, k::Integer) = k < 0 ? throw(DomainError()) : binomial(n, uint(k))",{"fg":1}],["                                                                                               ",{}]],"30":[["+binomial(n::BigInt, k::Integer) = k < 0 ? BigInt(0) : binomial(n, uint(k))",{"fg":2}],["                                                                                                          ",{}]],"31":[["                                                                                                                                                                                     ",{}]],"32":[[" ==(x::BigInt, y::BigInt) = cmp(x,y) == 0                                                                                                                                            ",{}]],"33":[[" ==(x::BigInt, i::Integer) = cmp(x,i) == 0                                                                                                                                           ",{}]],"34":[["diff --git a/base/help.jl b/base/help.jl",{"bold":true}],["                                                                                                                                             ",{}]],"35":[["index 7dedb81..414460e 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"36":[["--- a/base/help.jl",{"bold":true}],["                                                                                                                                                                   ",{}]],"37":[["+++ b/base/help.jl",{"bold":true}],["                                                                                                                                                                   ",{}]],"38":[["@@ -13,7 +13,7 @@",{"fg":6}],[" end                                                                                                                                                                ",{}]],"39":[[" function decor_help_desc(func::AbstractString, mfunc::AbstractString, desc::AbstractString)                                                                                         ",{}]],"40":[["     sd = convert(Array{ByteString,1}, split(desc, '\\n'))                                                                                                                            ",{}]],"41":[["     for i = 1:length(sd)                                                                                                                                                            ",{}]],"42":[["-        if beginswith(sd[i], func)",{"fg":1}],["                                                                                                                                                  ",{}]],"43":[["+        if startswith(sd[i], func)",{"fg":2}],["                                                                                                                                                  ",{}]],"44":[["             sd[i] = mfunc * sd[i][length(func)+1:end]                                                                                                                               ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.319591,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.00116,{"lines":{"0":[["         else                                                                                                                                                                        ",{}]],"1":[["             break                                                                                                                                                                   ",{}]],"2":[["diff --git a/base/interactiveutil.jl b/base/interactiveutil.jl",{"bold":true}],["                                                                                                                       ",{}]],"3":[["index 9e3cb9a..ef2c4e5 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"4":[["--- a/base/interactiveutil.jl",{"bold":true}],["                                                                                                                                                        ",{}]],"5":[["+++ b/base/interactiveutil.jl",{"bold":true}],["                                                                                                                                                        ",{}]],"6":[["@@ -25,13 +25,13 @@",{"fg":6}],[" function edit(file::AbstractString, line::Integer)                                                                                                               ",{}]],"7":[["         f != nothing && (file = f)                                                                                                                                                  ",{}]],"8":[["     end                                                                                                                                                                             ",{}]],"9":[["     no_line_msg = \"Unknown editor: no line number information passed.\\nThe method is defined at line $line.\"                                                                        ",{}]],"10":[["-    if beginswith(edname, \"emacs\") || edname == \"gedit\"",{"fg":1}],["                                                                                                                             ",{}]],"11":[["+    if startswith(edname, \"emacs\") || edname == \"gedit\"",{"fg":2}],["                                                                                                                             ",{}]],"12":[["         spawn(`$edpath +$line $file`)                                                                                                                                               ",{}]],"13":[["     elseif edname == \"vim\" || edname == \"nvim\" || edname == \"nano\"                                                                                                                  ",{}]],"14":[["         run(`$edpath +$line $file`)                                                                                                                                                 ",{}]],"15":[["     elseif edname == \"textmate\" || edname == \"mate\" || edname == \"kate\"                                                                                                             ",{}]],"16":[["         spawn(`$edpath $file -l $line`)                                                                                                                                             ",{}]],"17":[["-    elseif beginswith(edname, \"subl\") || edname == \"atom\"",{"fg":1}],["                                                                                                                           ",{}]],"18":[["+    elseif startswith(edname, \"subl\") || edname == \"atom\"",{"fg":2}],["                                                                                                                           ",{}]],"19":[["         spawn(`$(shell_split(edpath)) $file:$line`)                                                                                                                                 ",{}]],"20":[["     elseif OS_NAME == :Windows && (edname == \"start\" || edname == \"open\")                                                                                                           ",{}]],"21":[["         spawn(`cmd /c start /b $file`)                                                                                                                                              ",{}]],"22":[["@@ -195,14 +195,6 @@",{"fg":6}],[" function versioninfo(io::IO=STDOUT, verbose::Bool=false)                                                                                                        ",{}]],"23":[[" end                                                                                                                                                                                 ",{}]],"24":[[" versioninfo(verbose::Bool) = versioninfo(STDOUT,verbose)                                                                                                                            ",{}]],"25":[["                                                                                                                                                                                     ",{}]],"26":[["-# searching definitions",{"fg":1}],["                                                                                                                                                             ",{}]],"27":[["-",{"fg":1}],["                                                                                                                                                                                    ",{}]],"28":[["-function which(f, t::(Type...))",{"fg":1}],["                                                                                                                                                     ",{}]],"29":[["-    ms = methods(f, t)",{"fg":1}],["                                                                                                                                                              ",{}]],"30":[["-    isempty(ms) && error(\"no method found for the specified argument types\")",{"fg":1}],["                                                                                                        ",{}]],"31":[["-    ms[1]",{"fg":1}],["                                                                                                                                                                           ",{}]],"32":[["-end",{"fg":1}],["                                                                                                                                                                                 ",{}]],"33":[["-",{"fg":1}],["                                                                                                                                                                                    ",{}]],"34":[[" # displaying type-ambiguity warnings                                                                                                                                                ",{}]],"35":[["                                                                                                                                                                                     ",{}]],"36":[[" function code_warntype(io::IO, f, t::(Type...))                                                                                                                                     ",{}]],"37":[["diff --git a/base/linalg/matmul.jl b/base/linalg/matmul.jl",{"bold":true}],["                                                                                                                           ",{}]],"38":[["index 3009b26..4cfc02a 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"39":[["--- a/base/linalg/matmul.jl",{"bold":true}],["                                                                                                                                                          ",{}]],"40":[["+++ b/base/linalg/matmul.jl",{"bold":true}],["                                                                                                                                                          ",{}]],"41":[["@@ -204,13 +204,13 @@",{"fg":6}],[" function copytri!(A::StridedMatrix, uplo::Char, conjugate::Bool=false)                                                                                         ",{}]],"42":[[" end                                                                                                                                                                                 ",{}]],"43":[["                                                                                                                                                                                     ",{}]],"44":[[" function gemv!{T<:BlasFloat}(y::StridedVector{T}, tA::Char, A::StridedVecOrMat{T}, x::StridedVector{T})                                                                             ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.35878,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.001238,{"lines":{"0":[["-    stride(A, 1)==1 || return generic_matvecmul!(y, tA, A, x)",{"fg":1}],["                                                                                                                       ",{}]],"1":[["     mA, nA = lapack_size(tA, A)                                                                                                                                                     ",{}]],"2":[["-    nA==length(x) || throw(DimensionMismatch())",{"fg":1}],["                                                                                                                                     ",{}]],"3":[["-    mA==length(y) || throw(DimensionMismatch())",{"fg":1}],["                                                                                                                                     ",{}]],"4":[["+    nA == length(x) || throw(DimensionMismatch())",{"fg":2}],["                                                                                                                                   ",{}]],"5":[["+    mA == length(y) || throw(DimensionMismatch())",{"fg":2}],["                                                                                                                                   ",{}]],"6":[["     mA == 0 && return y                                                                                                                                                             ",{}]],"7":[["     nA == 0 && return fill!(y,0)                                                                                                                                                    ",{}]],"8":[["-    return BLAS.gemv!(tA, one(T), A, x, zero(T), y)",{"fg":1}],["                                                                                                                                 ",{}]],"9":[["+    stride(A, 1) == 1 && stride(A, 2) >= size(A, 1) && return BLAS.gemv!(tA, one(T), A, x, zero(T), y)",{"fg":2}],["                                                                              ",{}]],"10":[["+    return generic_matvecmul!(y, tA, A, x)",{"fg":2}],["                                                                                                                                          ",{}]],"11":[[" end                                                                                                                                                                                 ",{}]],"12":[["                                                                                                                                                                                     ",{}]],"13":[[" function syrk_wrapper!{T<:BlasFloat}(C::StridedMatrix{T}, tA::Char, A::StridedVecOrMat{T})                                                                                          ",{}]],"14":[["@@ -227,8 +227,8 @@",{"fg":6}],[" function syrk_wrapper!{T<:BlasFloat}(C::StridedMatrix{T}, tA::Char, A::StridedVe                                                                                 ",{}]],"15":[["     if mA == 2 && nA == 2; return matmul2x2!(C,tA,tAt,A,A); end                                                                                                                     ",{}]],"16":[["     if mA == 3 && nA == 3; return matmul3x3!(C,tA,tAt,A,A); end                                                                                                                     ",{}]],"17":[["                                                                                                                                                                                     ",{}]],"18":[["-    stride(A, 1) == 1 || (return generic_matmatmul!(C, tA, tAt, A, A))",{"fg":1}],["                                                                                                              ",{}]],"19":[["-    copytri!(BLAS.syrk!('U', tA, one(T), A, zero(T), C), 'U')",{"fg":1}],["                                                                                                                       ",{}]],"20":[["+    stride(A, 1) == 1 && stride(A, 2) >= size(A, 1) && return copytri!(BLAS.syrk!('U', tA, one(T), A, zero(T), C), 'U')",{"fg":2}],["                                                             ",{}]],"21":[["+    return generic_matmatmul!(C, tA, tAt, A, A)",{"fg":2}],["                                                                                                                                     ",{}]],"22":[[" end                                                                                                                                                                                 ",{}]],"23":[["                                                                                                                                                                                     ",{}]],"24":[[" function herk_wrapper!{T<:BlasFloat}(C::StridedMatrix{T}, tA::Char, A::StridedVecOrMat{T})                                                                                          ",{}]],"25":[["@@ -245,12 +245,11 @@",{"fg":6}],[" function herk_wrapper!{T<:BlasFloat}(C::StridedMatrix{T}, tA::Char, A::StridedVe                                                                               ",{}]],"26":[["     if mA == 2 && nA == 2; return matmul2x2!(C,tA,tAt,A,A); end                                                                                                                     ",{}]],"27":[["     if mA == 3 && nA == 3; return matmul3x3!(C,tA,tAt,A,A); end                                                                                                                     ",{}]],"28":[["                                                                                                                                                                                     ",{}]],"29":[["-    stride(A, 1) == 1 || (return generic_matmatmul!(C,tA, tAt, A, A))",{"fg":1}],["                                                                                                               ",{}]],"30":[["-",{"fg":1}],["                                                                                                                                                                                    ",{}]],"31":[["     # Result array does not need to be initialized as long as beta==0                                                                                                               ",{}]],"32":[["     #    C = Array(T, mA, mA)                                                                                                                                                       ",{}]],"33":[["                                                                                                                                                                                     ",{}]],"34":[["-    copytri!(BLAS.herk!('U', tA, one(T), A, zero(T), C), 'U', true)",{"fg":1}],["                                                                                                                 ",{}]],"35":[["+    stride(A, 1) == 1 && stride(A, 2) >= size(A, 1) && return copytri!(BLAS.herk!('U', tA, one(T), A, zero(T), C), 'U', true)",{"fg":2}],["                                                       ",{}]],"36":[["+    return generic_matmatmul!(C,tA, tAt, A, A)",{"fg":2}],["                                                                                                                                      ",{}]],"37":[[" end                                                                                                                                                                                 ",{}]],"38":[["                                                                                                                                                                                     ",{}]],"39":[[" function gemm_wrapper{T<:BlasFloat}(tA::Char, tB::Char,                                                                                                                             ",{}]],"40":[["@@ -277,8 +276,8 @@",{"fg":6}],[" function gemm_wrapper!{T<:BlasFloat}(C::StridedVecOrMat{T}, tA::Char, tB::Char,                                                                                  ",{}]],"41":[["     if mA == 2 && nA == 2 && nB == 2; return matmul2x2!(C,tA,tB,A,B); end                                                                                                           ",{}]],"42":[["     if mA == 3 && nA == 3 && nB == 3; return matmul3x3!(C,tA,tB,A,B); end                                                                                                           ",{}]],"44":[["-    stride(A, 1)==stride(B, 1)==1 || (return generic_matmatmul!(C, tA, tB, A, B))",{"fg":1}],["                                                                                                   ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.5424639999999999,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0006230000000000001,{"lines":{"0":[["-    BLAS.gemm!(tA, tB, one(T), A, B, zero(T), C)",{"fg":1}],["                                                                                                                                    ",{}]],"1":[["+    stride(A, 1) == stride(B, 1) == 1 && stride(A, 2) >= size(A, 1) && stride(B, 2) >= size(B, 1) && BLAS.gemm!(tA, tB, one(T), A, B, zero(T), C)",{"fg":2}],["                                   ",{}]],"2":[["+    return generic_matmatmul!(C, tA, tB, A, B)",{"fg":2}],["                                                                                                                                      ",{}]],"3":[[" end                                                                                                                                                                                 ",{}]],"4":[["                                                                                                                                                                                     ",{}]],"5":[[" # blas.jl defines matmul for floats; other integer and mixed precision                                                                                                              ",{}]],"6":[["diff --git a/base/linalg/tridiag.jl b/base/linalg/tridiag.jl",{"bold":true}],["                                                                                                                         ",{}]],"7":[["index 828deec..5d77aff 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"8":[["--- a/base/linalg/tridiag.jl",{"bold":true}],["                                                                                                                                                         ",{}]],"9":[["+++ b/base/linalg/tridiag.jl",{"bold":true}],["                                                                                                                                                         ",{}]],"10":[["@@ -96,7 +96,7 @@",{"fg":6}],[" eigfact{T}(A::SymTridiagonal{T}, irange::UnitRange) = (S = promote_type(Float32,                                                                                   ",{}]],"11":[[" eigfact!{T<:BlasReal}(A::SymTridiagonal{T}, vl::Real, vu::Real) = Eigen(LAPACK.stegr!('V', A.dv, A.ev, convert(T, vl), convert(T, vu), 0, 0)...)                                    ",{}]],"12":[[" eigfact{T}(A::SymTridiagonal{T}, vl::Real, vu::Real) = (S = promote_type(Float32, typeof(zero(T)/norm(one(T)))); eigfact!(S != T ? convert(SymTridiagonal{S}, A) : copy(A), vl, vu))",{}]],"13":[["                                                                                                                                                                                     ",{}]],"14":[["-eigvals!{T<:BlasReal}(A::SymTridiagonal{T}) = LAPACK.stegr!('N', 'A', A.dv, A.ev, 0.0, 0.0, 0, 0)[1]",{"fg":1}],["                                                                                ",{}]],"15":[["+eigvals!{T<:BlasReal}(A::SymTridiagonal{T}) = LAPACK.stev!('N', A.dv, A.ev)[1]",{"fg":2}],["                                                                                                      ",{}]],"16":[[" eigvals{T}(A::SymTridiagonal{T}) = (S = promote_type(Float32, typeof(zero(T)/norm(one(T)))); eigvals!(S != T ? convert(SymTridiagonal{S}, A) : copy(A)))                            ",{}]],"18":[[" eigvals!{T<:BlasReal}(A::SymTridiagonal{T}, irange::UnitRange) = LAPACK.stegr!('N', 'I', A.dv, A.ev, 0.0, 0.0, irange.start, irange.stop)[1]                                        ",{}]],"19":[["diff --git a/base/markdown/parse/util.jl b/base/markdown/parse/util.jl",{"bold":true}],["                                                                                                               ",{}]],"20":[["index 58ae863..16b4a40 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"21":[["--- a/base/markdown/parse/util.jl",{"bold":true}],["                                                                                                                                                    ",{}]],"22":[["+++ b/base/markdown/parse/util.jl",{"bold":true}],["                                                                                                                                                    ",{}]],"23":[["@@ -93,7 +93,7 @@",{"fg":6}],[" function startswith{T<:String}(stream::IO, ss::Vector{T}; kws...)                                                                                                  ",{}]],"24":[[" end                                                                                                                                                                                 ",{}]],"25":[["                                                                                                                                                                                     ",{}]],"26":[[" function startswith(stream::IO, r::Regex; eat = true, padding = false)                                                                                                              ",{}]],"27":[["-  @assert beginswith(r.pattern, \"^\")",{"fg":1}],["                                                                                                                                                ",{}]],"28":[["+  @assert Base.startswith(r.pattern, \"^\")",{"fg":2}],["                                                                                                                                           ",{}]],"29":[["   start = position(stream)                                                                                                                                                          ",{}]],"30":[["   padding && skipwhitespace(stream)                                                                                                                                                 ",{}]],"31":[["   line = chomp(readline(stream))                                                                                                                                                    ",{}]],"32":[["diff --git a/base/methodshow.jl b/base/methodshow.jl",{"bold":true}],["                                                                                                                                 ",{}]],"33":[["index 87ae144..d340713 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"34":[["--- a/base/methodshow.jl",{"bold":true}],["                                                                                                                                                             ",{}]],"35":[["+++ b/base/methodshow.jl",{"bold":true}],["                                                                                                                                                             ",{}]],"36":[["@@ -91,7 +91,7 @@",{"fg":6}],[" function url(m::Method)                                                                                                                                            ",{}]],"37":[["             root = cd(d) do # dir=d confuses --show-toplevel, apparently                                                                                                            ",{}]],"38":[["                 Git.readchomp(`rev-parse --show-toplevel`)                                                                                                                          ",{}]],"39":[["             end                                                                                                                                                                     ",{}]],"40":[["-            if beginswith(file, root)",{"fg":1}],["                                                                                                                                               ",{}]],"41":[["+            if startswith(file, root)",{"fg":2}],["                                                                                                                                               ",{}]],"42":[["                 commit = Git.readchomp(`rev-parse HEAD`, dir=d)                                                                                                                     ",{}]],"43":[["                 return \"https://github.com/$u/tree/$commit/\"*file[length(root)+2:end]*\"#L$line\"                                                                                     ",{}]],"44":[["             else                                                                                                                                                                    ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.43973,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.000848,{"lines":{"0":[["diff --git a/base/multi.jl b/base/multi.jl",{"bold":true}],["                                                                                                                                           ",{}]],"1":[["index 6054a70..adca59f 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"2":[["--- a/base/multi.jl",{"bold":true}],["                                                                                                                                                                  ",{}]],"3":[["+++ b/base/multi.jl",{"bold":true}],["                                                                                                                                                                  ",{}]],"4":[["@@ -1139,7 +1139,7 @@",{"fg":6}],[" end                                                                                                                                                            ",{}]],"5":[[" function redirect_worker_output(ident, stream)                                                                                                                                      ",{}]],"6":[["     @schedule while !eof(stream)                                                                                                                                                    ",{}]],"7":[["         line = readline(stream)                                                                                                                                                     ",{}]],"8":[["-        if beginswith(line, \"\\tFrom worker \")",{"fg":1}],["                                                                                                                                       ",{}]],"9":[["+        if startswith(line, \"\\tFrom worker \")",{"fg":2}],["                                                                                                                                       ",{}]],"10":[["             print(line)                                                                                                                                                             ",{}]],"11":[["         else                                                                                                                                                                        ",{}]],"12":[["             print(\"\\tFrom worker $(ident):\\t$line\")                                                                                                                                 ",{}]],"13":[["diff --git a/base/pkg/github.jl b/base/pkg/github.jl",{"bold":true}],["                                                                                                                                 ",{}]],"14":[["index f6b5cf4..87007d7 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"15":[["--- a/base/pkg/github.jl",{"bold":true}],["                                                                                                                                                             ",{}]],"16":[["+++ b/base/pkg/github.jl",{"bold":true}],["                                                                                                                                                             ",{}]],"17":[["@@ -64,7 +64,7 @@",{"fg":6}],[" function token(user::AbstractString=user())                                                                                                                        ",{}]],"18":[["     tfa = false                                                                                                                                                                     ",{}]],"19":[["                                                                                                                                                                                     ",{}]],"20":[["     # Check for two-factor authentication                                                                                                                                           ",{}]],"21":[["-    if status == 401 && get(header, \"X-GitHub-OTP\", \"\") |> x->beginswith(x, \"required\") && isinteractive()",{"fg":1}],["                                                                          ",{}]],"22":[["+    if status == 401 && get(header, \"X-GitHub-OTP\", \"\") |> x->startswith(x, \"required\") && isinteractive()",{"fg":2}],["                                                                          ",{}]],"23":[["         tfa = true                                                                                                                                                                  ",{}]],"24":[["         info(\"Two-factor authentication in use.  Enter auth code.  (You may have to re-enter your password.)\")                                                                      ",{}]],"25":[["         print(STDERR, \"Authentication code: \")                                                                                                                                      ",{}]],"26":[["diff --git a/base/precompile.jl b/base/precompile.jl",{"bold":true}],["                                                                                                                                 ",{}]],"27":[["index 5992ae4..f8f3879 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"28":[["--- a/base/precompile.jl",{"bold":true}],["                                                                                                                                                             ",{}]],"29":[["+++ b/base/precompile.jl",{"bold":true}],["                                                                                                                                                             ",{}]],"30":[["@@ -183,7 +183,7 @@",{"fg":6}],[" precompile(Base.associate_julia_struct, (Ptr{Void}, Base.TTY))                                                                                                   ",{}]],"31":[[" precompile(Base.async_run_thunk, (Function,))                                                                                                                                       ",{}]],"32":[[" precompile(Base.atexit, (Function,))                                                                                                                                                ",{}]],"33":[[" precompile(Base.banner, (Base.Terminals.TTYTerminal,))                                                                                                                              ",{}]],"34":[["-precompile(Base.beginswith, (ASCIIString, ASCIIString))",{"fg":1}],["                                                                                                                             ",{}]],"35":[["+precompile(Base.startswith, (ASCIIString, ASCIIString))",{"fg":2}],["                                                                                                                             ",{}]],"36":[[" precompile(Base.bool, (Bool,))                                                                                                                                                      ",{}]],"37":[[" precompile(Base.bytestring, (ASCIIString,))                                                                                                                                         ",{}]],"38":[[" precompile(Base.call, (Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Base.LineEdit.Prompt}, Base.Pair{Symbol, Base.LineEdit.Prompt}, Base.Pair{Symbol, Base.LineEdit.Prompt}))    ",{}]],"39":[["diff --git a/base/random.jl b/base/random.jl",{"bold":true}],["                                                                                                                                         ",{}]],"40":[["index 4a4b024..b80918a 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"41":[["--- a/base/random.jl",{"bold":true}],["                                                                                                                                                                 ",{}]],"42":[["+++ b/base/random.jl",{"bold":true}],["                                                                                                                                                                 ",{}]],"43":[["@@ -226,7 +226,7 @@",{"fg":6}],[" rand(r::Union(RandomDevice,MersenneTwister), ::Type{Float32}) =                                                                                                  ",{}]],"44":[["                                                                                                                                                                                     ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.567204,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0008139999999999999,{"lines":{"0":[[" # MersenneTwister                                                                                                                                                                   ",{}]],"1":[["                                                                                                                                                                                     ",{}]],"2":[["-rand{T<:Union(Bool, Int8, UInt8, Int16, UInt16, Int32, UInt32)}(r::MersenneTwister, ::Type{T}) = rand_ui52_raw(r) % T",{"fg":1}],["                                                               ",{}]],"3":[["+@inline rand{T<:Union(Bool, Int8, UInt8, Int16, UInt16, Int32, UInt32)}(r::MersenneTwister, ::Type{T}) = rand_ui52_raw(r) % T",{"fg":2}],["                                                       ",{}]],"4":[["                                                                                                                                                                                     ",{}]],"5":[[" function rand(r::MersenneTwister, ::Type{UInt64})                                                                                                                                   ",{}]],"6":[["     reserve(r, 2)                                                                                                                                                                   ",{}]],"7":[["diff --git a/base/reflection.jl b/base/reflection.jl",{"bold":true}],["                                                                                                                                 ",{}]],"8":[["index 3adb144..dc852e7 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"9":[["--- a/base/reflection.jl",{"bold":true}],["                                                                                                                                                             ",{}]],"10":[["+++ b/base/reflection.jl",{"bold":true}],["                                                                                                                                                             ",{}]],"11":[["@@ -160,22 +160,39 @@",{"fg":6}],[" code_llvm(f::Function, types::(Type...)) = code_llvm(STDOUT, f, types)                                                                                         ",{}]],"12":[[" code_native(io::IO, f::Function, types::(Type...)) = print(io, _dump_function(f, types, true, false))                                                                               ",{}]],"13":[[" code_native(f::Function, types::(Type...)) = code_native(STDOUT, f, types)                                                                                                          ",{}]],"14":[["                                                                                                                                                                                     ",{}]],"15":[["-function functionlocs(f::ANY, types=(Type...))",{"fg":1}],["                                                                                                                                      ",{}]],"16":[["-    locs = Any[]",{"fg":1}],["                                                                                                                                                                    ",{}]],"17":[["-    for m in methods(f, types)",{"fg":1}],["                                                                                                                                                      ",{}]],"18":[["-        lsd = m.func.code::LambdaStaticData",{"fg":1}],["                                                                                                                                         ",{}]],"19":[["-        ln = lsd.line",{"fg":1}],["                                                                                                                                                               ",{}]],"20":[["-        if ln > 0",{"fg":1}],["                                                                                                                                                                   ",{}]],"21":[["-            push!(locs, (find_source_file(string(lsd.file)), ln))",{"fg":1}],["                                                                                                                   ",{}]],"22":[["+function which(f::ANY, t::(Type...))",{"fg":2}],["                                                                                                                                                ",{}]],"23":[["+    if isleaftype(t)",{"fg":2}],["                                                                                                                                                                ",{}]],"24":[["+        ms = methods(f, t)",{"fg":2}],["                                                                                                                                                          ",{}]],"25":[["+        isempty(ms) && error(\"no method found for the specified argument types\")",{"fg":2}],["                                                                                                    ",{}]],"26":[["+        length(ms)!=1 && error(\"no unique matching method for the specified argument types\")",{"fg":2}],["                                                                                        ",{}]],"27":[["+        ms[1]",{"fg":2}],["                                                                                                                                                                       ",{}]],"28":[["+    else",{"fg":2}],["                                                                                                                                                                            ",{}]],"29":[["+        if !isa(f,Function)",{"fg":2}],["                                                                                                                                                         ",{}]],"30":[["+            t = tuple(isa(f,Type) ? Type{f} : typeof(f), t...)",{"fg":2}],["                                                                                                                      ",{}]],"31":[["+            f = call",{"fg":2}],["                                                                                                                                                                ",{}]],"32":[["+        else",{"fg":2}],["                                                                                                                                                                        ",{}]],"33":[["+            if !isgeneric(f)",{"fg":2}],["                                                                                                                                                        ",{}]],"34":[["+                error(\"argument is not a generic function\")",{"fg":2}],["                                                                                                                         ",{}]],"35":[["+            end",{"fg":2}],["                                                                                                                                                                     ",{}]],"36":[["         end                                                                                                                                                                         ",{}]],"37":[["+        m = ccall(:jl_gf_invoke_lookup, Any, (Any, Any), f, t)",{"fg":2}],["                                                                                                                      ",{}]],"38":[["+        if m === nothing",{"fg":2}],["                                                                                                                                                            ",{}]],"39":[["+            error(\"no method found for the specified argument types\")",{"fg":2}],["                                                                                                               ",{}]],"40":[["+        end",{"fg":2}],["                                                                                                                                                                         ",{}]],"41":[["+        m",{"fg":2}],["                                                                                                                                                                           ",{}]],"42":[["     end                                                                                                                                                                             ",{}]],"43":[["-    if length(locs) == 0",{"fg":1}],["                                                                                                                                                            ",{}]],"44":[["-       error(\"could not find function definition\")",{"fg":1}],["                                                                                                                                  ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[1.183066,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.000883,{"lines":{"0":[["+end",{"fg":2}],["                                                                                                                                                                                 ",{}]],"1":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"2":[["+function functionloc(m::Method)",{"fg":2}],["                                                                                                                                                     ",{}]],"3":[["+    lsd = m.func.code::LambdaStaticData",{"fg":2}],["                                                                                                                                             ",{}]],"4":[["+    ln = lsd.line",{"fg":2}],["                                                                                                                                                                   ",{}]],"5":[["+    if ln <= 0",{"fg":2}],["                                                                                                                                                                      ",{}]],"6":[["+        error(\"could not determine location of method definition\")",{"fg":2}],["                                                                                                                  ",{}]],"7":[["     end                                                                                                                                                                             ",{}]],"8":[["-    locs",{"fg":1}],["                                                                                                                                                                            ",{}]],"9":[["+    (find_source_file(string(lsd.file)), ln)",{"fg":2}],["                                                                                                                                        ",{}]],"10":[[" end                                                                                                                                                                                 ",{}]],"11":[["                                                                                                                                                                                     ",{}]],"12":[["-functionloc(f::ANY, types=(Any...)) = functionlocs(f, types)[1]",{"fg":1}],["                                                                                                                     ",{}]],"13":[["+functionloc(f::ANY, types=(Any...)) = functionloc(which(f,types))",{"fg":2}],["                                                                                                                   ",{}]],"15":[[" function function_module(f, types=(Any...))                                                                                                                                         ",{}]],"16":[["     m = methods(f, types)                                                                                                                                                           ",{}]],"17":[["diff --git a/base/replutil.jl b/base/replutil.jl",{"bold":true}],["                                                                                                                                     ",{}]],"18":[["index 62dfe94..3d992c4 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"19":[["--- a/base/replutil.jl",{"bold":true}],["                                                                                                                                                               ",{}]],"20":[["+++ b/base/replutil.jl",{"bold":true}],["                                                                                                                                                               ",{}]],"21":[["@@ -156,6 +156,13 @@",{"fg":6}],[" function showerror(io::IO, e::MethodError)                                                                                                                      ",{}]],"22":[["         print(io, \"\\nNote the difference between 1d column vector [1,2,3] and 2d row vector [1 2 3].\")                                                                              ",{}]],"23":[["         print(io, \"\\nYou can convert to a column vector with the vec() function.\")                                                                                                  ",{}]],"24":[["     end                                                                                                                                                                             ",{}]],"25":[["+    # Give a helpful error message if the user likely called a type constructor",{"fg":2}],["                                                                                                     ",{}]],"26":[["+    # and sees a no method error for convert",{"fg":2}],["                                                                                                                                        ",{}]],"27":[["+    if e.f == Base.convert && !isempty(e.args) && isa(e.args[1], Type)",{"fg":2}],["                                                                                                              ",{}]],"28":[["+        println(io)",{"fg":2}],["                                                                                                                                                                 ",{}]],"29":[["+        print(io, \"This may have arisen from a call to the constructor $(e.args[1])(...), \")",{"fg":2}],["                                                                                        ",{}]],"30":[["+        print(io, \"since type constructors fall back to convert methods in julia v0.4.\")",{"fg":2}],["                                                                                            ",{}]],"31":[["+    end",{"fg":2}],["                                                                                                                                                                             ",{}]],"32":[["                                                                                                                                                                                     ",{}]],"33":[["     # Display up to three closest candidates                                                                                                                                        ",{}]],"34":[["     lines = Array((IOBuffer, Int), 0)                                                                                                                                               ",{}]],"35":[["diff --git a/base/sparse/sparsematrix.jl b/base/sparse/sparsematrix.jl",{"bold":true}],["                                                                                                               ",{}]],"36":[["index 5279bf0..5a23c68 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"37":[["--- a/base/sparse/sparsematrix.jl",{"bold":true}],["                                                                                                                                                    ",{}]],"38":[["+++ b/base/sparse/sparsematrix.jl",{"bold":true}],["                                                                                                                                                    ",{}]],"39":[["@@ -2142,3 +2142,35 @@",{"fg":6}],[" function sortSparseMatrixCSC!{Tv,Ti}(A::SparseMatrixCSC{Tv,Ti}; sortindices::Sym                                                                              ",{}]],"40":[["                                                                                                                                                                                     ",{}]],"41":[["     return A                                                                                                                                                                        ",{}]],"42":[[" end                                                                                                                                                                                 ",{}]],"43":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"44":[["+## rotations",{"fg":2}],["                                                                                                                                                                        ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[1.895304,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.000644,{"lines":{"0":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"1":[["+function rot180(A::SparseMatrixCSC)",{"fg":2}],["                                                                                                                                                 ",{}]],"2":[["+    I,J,V = findnz(A)",{"fg":2}],["                                                                                                                                                               ",{}]],"3":[["+    m,n = size(A)",{"fg":2}],["                                                                                                                                                                   ",{}]],"4":[["+    for i=1:length(I)",{"fg":2}],["                                                                                                                                                               ",{}]],"5":[["+        I[i] = m - I[i] + 1",{"fg":2}],["                                                                                                                                                         ",{}]],"6":[["+        J[i] = n - J[i] + 1",{"fg":2}],["                                                                                                                                                         ",{}]],"7":[["+    end",{"fg":2}],["                                                                                                                                                                             ",{}]],"8":[["+    return sparse(I,J,V,m,n)",{"fg":2}],["                                                                                                                                                        ",{}]],"9":[["+end",{"fg":2}],["                                                                                                                                                                                 ",{}]],"10":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"11":[["+function rotr90(A::SparseMatrixCSC)",{"fg":2}],["                                                                                                                                                 ",{}]],"12":[["+    I,J,V = findnz(A)",{"fg":2}],["                                                                                                                                                               ",{}]],"13":[["+    m,n = size(A)",{"fg":2}],["                                                                                                                                                                   ",{}]],"14":[["+    #old col inds are new row inds",{"fg":2}],["                                                                                                                                                  ",{}]],"15":[["+    for i=1:length(I)",{"fg":2}],["                                                                                                                                                               ",{}]],"16":[["+        I[i] = m - I[i] + 1",{"fg":2}],["                                                                                                                                                         ",{}]],"17":[["+    end",{"fg":2}],["                                                                                                                                                                             ",{}]],"18":[["+    return sparse(J, I, V, n, m)",{"fg":2}],["                                                                                                                                                    ",{}]],"19":[["+end",{"fg":2}],["                                                                                                                                                                                 ",{}]],"20":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"21":[["+function rotl90(A::SparseMatrixCSC)",{"fg":2}],["                                                                                                                                                 ",{}]],"22":[["+    I,J,V = findnz(A)",{"fg":2}],["                                                                                                                                                               ",{}]],"23":[["+    m,n = size(A)",{"fg":2}],["                                                                                                                                                                   ",{}]],"24":[["+    #old row inds are new col inds",{"fg":2}],["                                                                                                                                                  ",{}]],"25":[["+    for i=1:length(J)",{"fg":2}],["                                                                                                                                                               ",{}]],"26":[["+        J[i] = n - J[i] + 1",{"fg":2}],["                                                                                                                                                         ",{}]],"27":[["+    end",{"fg":2}],["                                                                                                                                                                             ",{}]],"28":[["+    return sparse(J, I, V, n, m)",{"fg":2}],["                                                                                                                                                    ",{}]],"29":[["+end",{"fg":2}],["                                                                                                                                                                                 ",{}]],"30":[["diff --git a/base/stream.jl b/base/stream.jl",{"bold":true}],["                                                                                                                                         ",{}]],"31":[["index 3f64ebe..ffed9a7 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"32":[["--- a/base/stream.jl",{"bold":true}],["                                                                                                                                                                 ",{}]],"33":[["+++ b/base/stream.jl",{"bold":true}],["                                                                                                                                                                 ",{}]],"34":[["@@ -869,7 +869,7 @@",{"fg":6}],[" end                                                                                                                                                              ",{}]],"35":[[" const BACKLOG_DEFAULT = 511                                                                                                                                                         ",{}]],"36":[["                                                                                                                                                                                     ",{}]],"37":[[" function _listen(sock::UVServer; backlog::Integer=BACKLOG_DEFAULT)                                                                                                                  ",{}]],"38":[["-    !isopen(sock) && error(\"_listen(::UVServer, ...) called on closed socket\")",{"fg":1}],["                                                                                                      ",{}]],"39":[["+    check_open(sock)",{"fg":2}],["                                                                                                                                                                ",{}]],"40":[["     err = ccall(:uv_listen, Cint, (Ptr{Void}, Cint, Ptr{Void}),                                                                                                                     ",{}]],"41":[["                 sock.handle, backlog, uv_jl_connectioncb::Ptr{Void})                                                                                                                ",{}]],"42":[["     sock.status = StatusActive                                                                                                                                                      ",{}]],"43":[["diff --git a/base/string.jl b/base/string.jl",{"bold":true}],["                                                                                                                                         ",{}]],"44":[["index 80883e6..beef7ea 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[1.207251,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0008649999999999999,{"lines":{"0":[["--- a/base/string.jl",{"bold":true}],["                                                                                                                                                                 ",{}]],"1":[["+++ b/base/string.jl",{"bold":true}],["                                                                                                                                                                 ",{}]],"2":[["@@ -490,9 +490,9 @@",{"fg":6}],[" end                                                                                                                                                              ",{}]],"3":[[" ==(a::AbstractString, b::AbstractString) = cmp(a,b) == 0                                                                                                                            ",{}]],"4":[[" isless(a::AbstractString, b::AbstractString) = cmp(a,b) < 0                                                                                                                         ",{}]],"5":[["                                                                                                                                                                                     ",{}]],"6":[["-# begins with and ends with predicates",{"fg":1}],["                                                                                                                                              ",{}]],"7":[["+# starts with and ends with predicates",{"fg":2}],["                                                                                                                                              ",{}]],"8":[["                                                                                                                                                                                     ",{}]],"9":[["-function beginswith(a::AbstractString, b::AbstractString)",{"fg":1}],["                                                                                                                           ",{}]],"10":[["+function startswith(a::AbstractString, b::AbstractString)",{"fg":2}],["                                                                                                                           ",{}]],"11":[["     i = start(a)                                                                                                                                                                    ",{}]],"12":[["     j = start(b)                                                                                                                                                                    ",{}]],"13":[["     while !done(a,i) && !done(b,i)                                                                                                                                                  ",{}]],"14":[["@@ -502,7 +502,7 @@",{"fg":6}],[" function beginswith(a::AbstractString, b::AbstractString)                                                                                                        ",{}]],"15":[["     end                                                                                                                                                                             ",{}]],"16":[["     done(b,i)                                                                                                                                                                       ",{}]],"17":[[" end                                                                                                                                                                                 ",{}]],"18":[["-beginswith(str::AbstractString, chars::Chars) = !isempty(str) && str[start(str)] in chars",{"fg":1}],["                                                                                           ",{}]],"19":[["+startswith(str::AbstractString, chars::Chars) = !isempty(str) && str[start(str)] in chars",{"fg":2}],["                                                                                           ",{}]],"20":[["                                                                                                                                                                                     ",{}]],"21":[[" function endswith(a::AbstractString, b::AbstractString)                                                                                                                             ",{}]],"22":[["     i = endof(a)                                                                                                                                                                    ",{}]],"23":[["@@ -528,8 +528,8 @@",{"fg":6}],[" cmp(a::Symbol, b::Symbol) = int(sign(ccall(:strcmp, Int32, (Ptr{UInt8}, Ptr{UInt                                                                                 ",{}]],"24":[[" ==(a::ByteString, b::ByteString) = endof(a) == endof(b) && cmp(a,b) == 0                                                                                                            ",{}]],"25":[[" isless(a::Symbol, b::Symbol) = cmp(a,b) < 0                                                                                                                                         ",{}]],"26":[["                                                                                                                                                                                     ",{}]],"27":[["-beginswith(a::ByteString, b::ByteString) = beginswith(a.data, b.data)",{"fg":1}],["                                                                                                               ",{}]],"28":[["-beginswith(a::Array{UInt8,1}, b::Array{UInt8,1}) =",{"fg":1}],["                                                                                                                                  ",{}]],"29":[["+startswith(a::ByteString, b::ByteString) = startswith(a.data, b.data)",{"fg":2}],["                                                                                                               ",{}]],"30":[["+startswith(a::Array{UInt8,1}, b::Array{UInt8,1}) =",{"fg":2}],["                                                                                                                                  ",{}]],"31":[["     (length(a) >= length(b) && ccall(:strncmp, Int32, (Ptr{UInt8}, Ptr{UInt8}, UInt), a, b, length(b)) == 0)                                                                        ",{}]],"32":[["                                                                                                                                                                                     ",{}]],"33":[[" # TODO: fast endswith                                                                                                                                                               ",{}]],"34":[["diff --git a/base/subarray.jl b/base/subarray.jl",{"bold":true}],["                                                                                                                                     ",{}]],"35":[["index 5fe308c..7095d09 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"36":[["--- a/base/subarray.jl",{"bold":true}],["                                                                                                                                                               ",{}]],"37":[["+++ b/base/subarray.jl",{"bold":true}],["                                                                                                                                                               ",{}]],"38":[["@@ -127,7 +127,7 @@",{"fg":6}],[" stagedfunction _slice{T,NV,PV,IV,PLD,IndTypes}(V::SubArray{T,NV,PV,IV,PLD}, I::I                                                                                 ",{}]],"39":[["                     N += 1                                                                                                                                                          ",{}]],"40":[["                     push!(sizeexprs, dimsizeexpr(I[k], k, length(I), :V, :I))                                                                                                       ",{}]],"41":[["                 end                                                                                                                                                                 ",{}]],"42":[["-                push!(indexexprs, :(V.indexes[$j][I[$k]]))",{"fg":1}],["                                                                                                                          ",{}]],"43":[["+                push!(indexexprs, :(reindex(V.indexes[$j], I[$k])))",{"fg":2}],["                                                                                                                 ",{}]],"44":[["                 push!(Itypes, rangetype(IV[j], I[k]))                                                                                                                               ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.78317,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.001145,{"lines":{"0":[["             else                                                                                                                                                                    ",{}]],"1":[["                 # We have a linear index that spans more than one dimension of the parent                                                                                           ",{}]],"2":[["@@ -189,12 +189,12 @@",{"fg":6}],[" stagedfunction _sub{T,NV,PV,IV,PLD,IndTypes}(V::SubArray{T,NV,PV,IV,PLD}, I::Ind                                                                               ",{}]],"3":[["             if k < N && I[k] <: Real                                                                                                                                                ",{}]],"4":[["                 # convert scalar to a range                                                                                                                                         ",{}]],"5":[["                 sym = gensym()                                                                                                                                                      ",{}]],"6":[["-                push!(preexprs, :($sym = V.indexes[$j][int(I[$k])]))",{"fg":1}],["                                                                                                                ",{}]],"7":[["+                push!(preexprs, :($sym = reindex(V.indexes[$j], int(I[$k]))))",{"fg":2}],["                                                                                                       ",{}]],"8":[["                 push!(indexexprs, :($sym:$sym))                                                                                                                                     ",{}]],"9":[["                 push!(Itypes, UnitRange{Int})                                                                                                                                       ",{}]],"10":[["             elseif k < length(I) || k == NV || j == length(IV)                                                                                                                      ",{}]],"11":[["                 # simple indexing                                                                                                                                                   ",{}]],"12":[["-                push!(indexexprs, :(V.indexes[$j][I[$k]]))",{"fg":1}],["                                                                                                                          ",{}]],"13":[["+                push!(indexexprs, :(reindex(V.indexes[$j], I[$k])))",{"fg":2}],["                                                                                                                 ",{}]],"14":[["                 push!(Itypes, rangetype(IV[j], I[k]))                                                                                                                               ",{}]],"15":[["             else                                                                                                                                                                    ",{}]],"16":[["                 # We have a linear index that spans more than one dimension of the parent                                                                                           ",{}]],"17":[["@@ -245,6 +245,12 @@",{"fg":6}],[" function rangetype(T1, T2)                                                                                                                                      ",{}]],"18":[["     rt[1]                                                                                                                                                                           ",{}]],"19":[[" end                                                                                                                                                                                 ",{}]],"21":[["+reindex(a, b) = a[b]",{"fg":2}],["                                                                                                                                                                ",{}]],"22":[["+reindex(a::UnitRange, b::UnitRange{Int}) = range(oftype(first(a), first(a)+first(b)-1), length(b))",{"fg":2}],["                                                                                  ",{}]],"23":[["+reindex(a::UnitRange, b::StepRange{Int}) = range(oftype(first(a), first(a)+first(b)-1), step(b), length(b))",{"fg":2}],["                                                                         ",{}]],"24":[["+reindex(a::StepRange, b::Range{Int}) = range(oftype(first(a), first(a)+(first(b)-1)*step(a)), step(a)*step(b), length(b))",{"fg":2}],["                                                           ",{}]],"25":[["+reindex(a, b::Int) = unsafe_getindex(a, b)",{"fg":2}],["                                                                                                                                          ",{}]],"26":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"27":[[" dimsizeexpr(Itype, d::Int, len::Int, Asym::Symbol, Isym::Symbol) = :(length($Isym[$d]))                                                                                             ",{}]],"28":[[" function dimsizeexpr(Itype::Type{Colon}, d::Int, len::Int, Asym::Symbol, Isym::Symbol)                                                                                              ",{}]],"29":[["     if d < len                                                                                                                                                                      ",{}]],"30":[["diff --git a/contrib/build_sysimg.jl b/contrib/build_sysimg.jl",{"bold":true}],["                                                                                                                       ",{}]],"31":[["index a4d66d8..8304378 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"32":[["--- a/contrib/build_sysimg.jl",{"bold":true}],["                                                                                                                                                        ",{}]],"33":[["+++ b/contrib/build_sysimg.jl",{"bold":true}],["                                                                                                                                                        ",{}]],"34":[["@@ -150,7 +150,7 @@",{"fg":6}],[" if !isinteractive()                                                                                                                                              ",{}]],"35":[["         println(\"Usage: build_sysimg.jl <sysimg_path> <cpu_target> <usrimg_path.jl> [--force] [--help]\")                                                                            ",{}]],"36":[["         println(\"   <sysimg_path>    is an absolute, extensionless path to store the system image at\")                                                                              ",{}]],"37":[["         println(\"   <cpu_target>     is an LLVM cpu target to build the system image against\")                                                                                      ",{}]],"38":[["-        println(\"   <usrimg_path.lj> is the path to a user image to be baked into the system image\")",{"fg":1}],["                                                                                ",{}]],"39":[["+        println(\"   <usrimg_path.jl> is the path to a user image to be baked into the system image\")",{"fg":2}],["                                                                                ",{}]],"40":[["         println(\"   --force          Set if you wish to overwrite the default system image\")                                                                                        ",{}]],"41":[["         println(\"   --help           Print out this help text and exit\")                                                                                                            ",{}]],"42":[["         println()                                                                                                                                                                   ",{}]],"43":[["diff --git a/doc/DocCheck.jl b/doc/DocCheck.jl",{"bold":true}],["                                                                                                                                       ",{}]],"44":[["index b365a96..6f1968b 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[1.15089,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.000772,{"lines":{"0":[["--- a/doc/DocCheck.jl",{"bold":true}],["                                                                                                                                                                ",{}]],"1":[["+++ b/doc/DocCheck.jl",{"bold":true}],["                                                                                                                                                                ",{}]],"2":[["@@ -25,7 +25,7 @@",{"fg":6}],[" isdeprecated(v)            = try endswith(functionloc(eval(v))[1], \"deprecated.j                                                                                   ",{}]],"3":[[" isdocumented(v) = (s=string(v); haskey(FUNCTION_DICT, s) || haskey(MODULE_DICT, s))                                                                                                 ",{}]],"4":[["                                                                                                                                                                                     ",{}]],"5":[["                                                                                                                                                                                     ",{}]],"6":[["-modfuncjoin(m::AbstractString, f::AbstractString) = beginswith(f, '@') ? \"@$m.$(f[2:end])\" : \"$m.$f\"",{"fg":1}],["                                                                                ",{}]],"7":[["+modfuncjoin(m::AbstractString, f::AbstractString) = startswith(f, '@') ? \"@$m.$(f[2:end])\" : \"$m.$f\"",{"fg":2}],["                                                                                ",{}]],"8":[[" modfuncjoin(m, f) = modfuncjoin(string(m), string(f))                                                                                                                               ",{}]],"9":[["                                                                                                                                                                                     ",{}]],"10":[[" # return a list of undefined exports in a module                                                                                                                                    ",{}]],"11":[["@@ -56,7 +56,7 @@",{"fg":6}],[" function undocumented_by_file(m::Module)                                                                                                                           ",{}]],"12":[["         s = string(f)                                                                                                                                                               ",{}]],"13":[["         try                                                                                                                                                                         ",{}]],"14":[["             for (file, line) in functionlocs(eval(f))                                                                                                                               ",{}]],"15":[["-                if beginswith(file, JULIA_HOME)",{"fg":1}],["                                                                                                                                     ",{}]],"16":[["+                if startswith(file, JULIA_HOME)",{"fg":2}],["                                                                                                                                     ",{}]],"17":[["                     file = replace(file, JULIA_HOME, \"\\$JULIA_HOME\", 1)                                                                                                             ",{}]],"18":[["                 end                                                                                                                                                                 ",{}]],"19":[["                 if !haskey(undocf, file)                                                                                                                                            ",{}]],"20":[["@@ -120,10 +120,10 @@",{"fg":6}],[" function _undocumented_rst()                                                                                                                                   ",{}]],"21":[["                                                                                                                                                                                     ",{}]],"22":[["     deprecated=[strip(x) for x in split(replace(open(readall, \"$JULIA_HOME/../../base/deprecated.jl\"),\",\",\"\"),\"\\n\")]                                                                ",{}]],"23":[["     for line in deprecated                                                                                                                                                          ",{}]],"24":[["-        if beginswith(line, \"@deprecated\")",{"fg":1}],["                                                                                                                                          ",{}]],"25":[["+        if startswith(line, \"@deprecated\")",{"fg":2}],["                                                                                                                                          ",{}]],"26":[["             fn = split(line, r\" +\")[2]                                                                                                                                              ",{}]],"27":[["             if haskey(MODULE_DICT, fn); push!(out, string(\"- [ ] \", fn)); depdoc += 1 end                                                                                           ",{}]],"28":[["-        elseif beginswith(line, \"export\")",{"fg":1}],["                                                                                                                                           ",{}]],"29":[["+        elseif startswith(line, \"export\")",{"fg":2}],["                                                                                                                                           ",{}]],"30":[["             for fn in split(line, r\"[ ,]+\")[2:end]                                                                                                                                  ",{}]],"31":[["                 if haskey(MODULE_DICT, fn); push!(out, string(\"- [ ]\", fn)); depdoc += 1 end                                                                                        ",{}]],"32":[["             end                                                                                                                                                                     ",{}]],"33":[["diff --git a/doc/devdocs/julia.rst b/doc/devdocs/julia.rst",{"bold":true}],["                                                                                                                           ",{}]],"34":[["index e7b7f13..ee9ed0b 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"35":[["--- a/doc/devdocs/julia.rst",{"bold":true}],["                                                                                                                                                          ",{}]],"36":[["+++ b/doc/devdocs/julia.rst",{"bold":true}],["                                                                                                                                                          ",{}]],"37":[["@@ -13,3 +13,4 @@",{"fg":6}],["                                                                                                                                                                    ",{}]],"38":[["    meta                                                                                                                                                                             ",{}]],"39":[["    subarrays                                                                                                                                                                        ",{}]],"40":[["    sysimg                                                                                                                                                                           ",{}]],"41":[["+   llvm",{"fg":2}],["                                                                                                                                                                             ",{}]],"42":[["diff --git a/doc/devdocs/llvm.rst b/doc/devdocs/llvm.rst",{"bold":true}],["                                                                                                                             ",{}]],"43":[["new file mode 100644",{"bold":true}],["                                                                                                                                                                 ",{}]],"44":[["index 0000000..c56e58b",{"bold":true}],["                                                                                                                                                               ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[1.335406,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.001396,{"lines":{"0":[["--- /dev/null",{"bold":true}],["                                                                                                                                                                        ",{}]],"1":[["+++ b/doc/devdocs/llvm.rst",{"bold":true}],["                                                                                                                                                           ",{}]],"2":[["@@ -0,0 +1,103 @@",{"fg":6}],["                                                                                                                                                                    ",{}]],"3":[["+.. _devdocs-llvm:",{"fg":2}],["                                                                                                                                                                   ",{}]],"4":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"5":[["+Working with LLVM",{"fg":2}],["                                                                                                                                                                   ",{}]],"6":[["+=================",{"fg":2}],["                                                                                                                                                                   ",{}]],"7":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"8":[["+This is not a replacement for the LLVM documentation, but a collection",{"fg":2}],["                                                                                                              ",{}]],"9":[["+of tips for working on LLVM for Julia.",{"fg":2}],["                                                                                                                                              ",{}]],"10":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"11":[["+Overview of Julia to LLVM Interface",{"fg":2}],["                                                                                                                                                 ",{}]],"12":[["+-----------------------------------",{"fg":2}],["                                                                                                                                                 ",{}]],"13":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"14":[["+Julia statically links in LLVM by default.",{"fg":2}],["                                                                                                                                          ",{}]],"15":[["+Build with ``USE_LLVM_SHLIB=1`` to link dynamically.",{"fg":2}],["                                                                                                                                ",{}]],"16":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"17":[["+The code for lowering Julia AST to LLVM IR or interpreting it directly is in",{"fg":2}],[" ",{"bg":1}],["                                                                                                       ",{}]],"18":[["+directory ``src/``.",{"fg":2}],["                                                                                                                                                                 ",{}]],"19":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"20":[["++---------------------+-------------------------------------------------------------+",{"fg":2}],["                                                                                               ",{}]],"21":[["+|``builtins.c``       | Builtin functions                                           |",{"fg":2}],["                                                                                               ",{}]],"22":[["++---------------------+-------------------------------------------------------------+",{"fg":2}],["                                                                                               ",{}]],"23":[["+|``ccall.cpp``        | Lowering ``ccall``                                          |",{"fg":2}],["                                                                                               ",{}]],"24":[["++---------------------+-------------------------------------------------------------+",{"fg":2}],["                                                                                               ",{}]],"25":[["+|``cgutils.cpp``      | Lowering utilities, notably for array and tuple accesses    |",{"fg":2}],["                                                                                               ",{}]],"26":[["++---------------------+-------------------------------------------------------------+",{"fg":2}],["                                                                                               ",{}]],"27":[["+|``codegen.cpp``      | Top-level of code generation, pass list, lowering builtins  |",{"fg":2}],["                                                                                               ",{}]],"28":[["++---------------------+-------------------------------------------------------------+",{"fg":2}],["                                                                                               ",{}]],"29":[["+|``debuginfo.cpp``    | Tracks debug information for JIT code                       |",{"fg":2}],["                                                                                               ",{}]],"30":[["++---------------------+-------------------------------------------------------------+",{"fg":2}],["                                                                                               ",{}]],"31":[["+|``disasm.cpp``       | Handles native object file and JIT code diassembly          |",{"fg":2}],["                                                                                               ",{}]],"32":[["++---------------------+-------------------------------------------------------------+",{"fg":2}],["                                                                                               ",{}]],"33":[["+|``gf.c``             | Generic functions                                           |",{"fg":2}],["                                                                                               ",{}]],"34":[["++---------------------+-------------------------------------------------------------+",{"fg":2}],["                                                                                               ",{}]],"35":[["+|``intrinsics.cpp``   | Lowering intrinsics                                         |",{"fg":2}],["                                                                                               ",{}]],"36":[["++---------------------+-------------------------------------------------------------+",{"fg":2}],["                                                                                               ",{}]],"37":[["+|``llvm-simdloop.cpp``| Custom LLVM pass for ``@simd``                              |",{"fg":2}],["                                                                                               ",{}]],"38":[["++---------------------+-------------------------------------------------------------+",{"fg":2}],["                                                                                               ",{}]],"39":[["+|``sys.c``            | I/O and operating system utility functions                  |",{"fg":2}],["                                                                                               ",{}]],"40":[["++---------------------+-------------------------------------------------------------+",{"fg":2}],["                                                                                               ",{}]],"41":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"42":[["+Some of the `.cpp` files form a group that compile to a single object.",{"fg":2}],["                                                                                                              ",{}]],"43":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"44":[["+The difference between an intrinsic and a builtin is that a builtin is a first class",{"fg":2}],["                                                                                                ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[14.206961,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0008629999999999999,{"lines":{"0":[["+function that can be used like any other Julia function.  An intrinsic can operate",{"fg":2}],["                                                                                                  ",{}]],"1":[["+only on unboxed data, and therefore its arguments must be statically typed.",{"fg":2}],["                                                                                                         ",{}]],"2":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"3":[["+Alias Analysis",{"fg":2}],["                                                                                                                                                                      ",{}]],"4":[["+^^^^^^^^^^^^^^",{"fg":2}],["                                                                                                                                                                      ",{}]],"5":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"6":[["+Julia currently uses LLVM's `Type Based Alias Analysis <http://llvm.org/docs/LangRef.html#tbaa-metadata>`_.",{"fg":2}],["                                                                         ",{}]],"7":[["+To find the comments that document the inclusion relationships, look for ``static MDNode*``",{"fg":2}],["                                                                                         ",{}]],"8":[["+in ``src/codegen.cpp``.",{"fg":2}],["                                                                                                                                                             ",{}]],"9":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"10":[["+The `-O` option enables LLVM's `Basic Alias Analysis <http://llvm.org/docs/AliasAnalysis.html#the-basicaa-pass>`_.",{"fg":2}],["                                                                  ",{}]],"11":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"12":[["+Building Julia with a different version of LLVM",{"fg":2}],["                                                                                                                                     ",{}]],"13":[["+-----------------------------------------------",{"fg":2}],["                                                                                                                                     ",{}]],"14":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"15":[["+The default version of LLVM is specified in ``deps/Versions.make``.",{"fg":2}],["                                                                                                                 ",{}]],"16":[["+You can override it in your ``Make.user`` by adding a line such as:",{"fg":2}],["                                                                                                                 ",{}]],"17":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"18":[["+    ``LLVM_VER = 3.5.0``",{"fg":2}],["                                                                                                                                                            ",{}]],"20":[["+Besides the LLVM release numerals, you can",{"fg":2}],["                                                                                                                                          ",{}]],"21":[["+also use ``LLVM_VER = svn`` to bulid against the latest development version",{"fg":2}],["                                                                                                         ",{}]],"22":[["+of LLVM.",{"fg":2}],["                                                                                                                                                                            ",{}]],"23":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"24":[["+Passing options to LLVM",{"fg":2}],["                                                                                                                                                             ",{}]],"25":[["+-----------------------",{"fg":2}],["                                                                                                                                                             ",{}]],"26":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"27":[["+You can pass options to LLVM using *debug* builds of Julia.  To create a debug",{"fg":2}],["                                                                                                      ",{}]],"28":[["+build, run ``make debug``.  The resulting executable is ``usr/bin/julia-debug``.",{"fg":2}],["                                                                                                    ",{}]],"29":[["+You can pass LLVM options to this executable via the environment variable ``JULIA_LLVM_ARGS``.",{"fg":2}],["                                                                                      ",{}]],"30":[["+Here are example settings using ``bash`` syntax:",{"fg":2}],["                                                                                                                                    ",{}]],"31":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"32":[["+* ``export JULIA_LLVM_ARGS = -print-after-all`` dumps IR after each pass.",{"fg":2}],["                                                                                                           ",{}]],"33":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"34":[["+* ``export JULIA_LLVM_ARGS = -debug-only=loop-vectorize`` dumps LLVM `DEBUG(`...`)`",{"fg":2}],["                                                                                                 ",{}]],"35":[["+  diagnostics for loop vectorizer *if* you built Julia with ``LLVM_ASSERTIONS=1``.",{"fg":2}],["                                                                                                  ",{}]],"36":[["+  Otherwise you will get warnings about \"Unknown command line argument\".",{"fg":2}],["                                                                                                            ",{}]],"37":[["+  Counter-intuitively, building Julia with ``LLVM_DEBUG=1`` is *not* enough to",{"fg":2}],["                                                                                                      ",{}]],"38":[["+  dump ``DEBUG`` diagnostics from a pass.",{"fg":2}],["                                                                                                                                           ",{}]],"39":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"40":[["+Improving LLVM optimizations for Julia",{"fg":2}],["                                                                                                                                              ",{}]],"41":[["+--------------------------------------",{"fg":2}],["                                                                                                                                              ",{}]],"42":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"43":[["+Improving LLVM code generation usually involves either changing Julia lowering",{"fg":2}],["                                                                                                      ",{}]],"44":[["+to be more friendly to LLVM's passes, or improving a pass.",{"fg":2}],["                                                                                                                          ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[9.023573000000001,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0009940000000000001,{"lines":{"0":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"1":[["+If you are planning to improve a pass, be sure to read the",{"fg":2}],["                                                                                                                          ",{}]],"2":[["+`LLVM developer policy <http://llvm.org/docs/DeveloperPolicy.html>`_.",{"fg":2}],["                                                                                                               ",{}]],"3":[["+The best strategy is to create a code example in a form where you can use LLVM's",{"fg":2}],["                                                                                                    ",{}]],"4":[["+``opt`` tool to study it and the pass of interest in isolation.",{"fg":2}],["                                                                                                                     ",{}]],"6":[["+1. Create an example Julia code of interest.",{"fg":2}],["                                                                                                                                        ",{}]],"7":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"8":[["+2. Use ``JULIA_LLVM_ARGS = -print-after-all`` to dump the IR.",{"fg":2}],["                                                                                                                       ",{}]],"10":[["+3. Pick out the IR at the point just before the pass of interest runs.",{"fg":2}],["                                                                                                              ",{}]],"12":[["+4. Strip the debug metadata and fix up the TBAA metadata by hand.",{"fg":2}],["                                                                                                                   ",{}]],"13":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"14":[["+The last step is labor intensive.  Suggestions on a better way would be appreciated.",{"fg":2}],["                                                                                                ",{}]],"15":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"16":[["diff --git a/doc/manual/arrays.rst b/doc/manual/arrays.rst",{"bold":true}],["                                                                                                                           ",{}]],"17":[["index 409f59d..9552041 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"18":[["--- a/doc/manual/arrays.rst",{"bold":true}],["                                                                                                                                                          ",{}]],"19":[["+++ b/doc/manual/arrays.rst",{"bold":true}],["                                                                                                                                                          ",{}]],"20":[["@@ -446,13 +446,17 @@",{"fg":6}],[" implementations of it might be quite different from conventional                                                                                               ",{}]],"21":[[" arrays. For example, elements might be computed on request rather than                                                                                                              ",{}]],"22":[[" stored.  However, any concrete ``AbstractArray{T,N}`` type should                                                                                                                   ",{}]],"23":[[" generally implement at least :func:`size(A) <size>` (returing an ``Int`` tuple),                                                                                                    ",{}]],"24":[["-:func:`getindex(A,i) <getindex>` and :func:`getindex(A,i1,...,iN) <getindex>` (returning an element",{"fg":1}],["                                                                                 ",{}]],"25":[["-of type ``T``); mutable arrays should also implement :func:`setindex!`.  It",{"fg":1}],["                                                                                                         ",{}]],"26":[["+:func:`getindex(A,i) <getindex>` and :func:`getindex(A,i1,...,iN) <getindex>`;",{"fg":2}],["                                                                                                      ",{}]],"27":[["+mutable arrays should also implement :func:`setindex!`.  It",{"fg":2}],["                                                                                                                         ",{}]],"28":[[" is recommended that these operations have nearly constant time complexity,                                                                                                          ",{}]],"29":[[" or technically Õ(1) complexity, as otherwise some array functions may                                                                                                               ",{}]],"30":[[" be unexpectedly slow.   Concrete types should also typically provide                                                                                                                ",{}]],"31":[[" a :func:`similar(A,T=eltype(A),dims=size(A)) <similar>` method, which is used to allocate                                                                                           ",{}]],"32":[[" a similar array for :func:`copy` and other out-of-place operations.                                                                                                                 ",{}]],"33":[["+No matter how an ``AbstractArray{T,N}`` is represented internally,",{"fg":2}],["                                                                                                                  ",{}]],"34":[["+``T`` is the type of object returned by *integer* indexing (``A[1,",{"fg":2}],["                                                                                                                  ",{}]],"35":[["+..., 1]``, when ``A`` is not empty) and ``N`` should be the length of",{"fg":2}],["                                                                                                               ",{}]],"36":[["+the tuple returned by :func:`size`.",{"fg":2}],["                                                                                                                                                 ",{}]],"37":[["                                                                                                                                                                                     ",{}]],"38":[[" ``DenseArray`` is an abstract subtype of ``AbstractArray`` intended                                                                                                                 ",{}]],"39":[[" to include all arrays that are laid out at regular offsets in memory,                                                                                                               ",{}]],"40":[["diff --git a/doc/manual/packages.rst b/doc/manual/packages.rst",{"bold":true}],["                                                                                                                       ",{}]],"41":[["index 6ca5a3b..9bae48b 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"42":[["--- a/doc/manual/packages.rst",{"bold":true}],["                                                                                                                                                        ",{}]],"43":[["+++ b/doc/manual/packages.rst",{"bold":true}],["                                                                                                                                                        ",{}]],"44":[["@@ -153,7 +153,7 @@",{"fg":6}],[" When packages are installed in your ``.julia/v0.3`` directory, however, the exte                                                                                 ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[2.878976,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.001632,{"lines":{"0":[[" If unregistered packages contain a ``REQUIRE`` file at the top of their source tree, that file will be used to determine which registered packages the unregistered package depends ",{}]],"1":[["on, and they will automatically be installed.                                                                                                                                        ",{}]],"2":[[" Unregistered packages participate in the same version resolution logic as registered packages, so installed package versions will be adjusted as necessary to satisfy the requiremen",{}]],"3":[["ts of both registered and unregistered packages.                                                                                                                                     ",{}]],"4":[["                                                                                                                                                                                     ",{}]],"5":[["-.. [1] The official set of packages is at https://github.com/JuliaLang/METADATA.jl, but individuals and organizations can easily use a different metadata repository. This allows co",{"fg":1}]],"6":[["ntrol which packages are available for automatic installation. One can allow only audited and approved package versions, and make private packages or forks available.               ",{"fg":1}]],"7":[["+.. [1] The official set of packages is at https://github.com/JuliaLang/METADATA.jl, but individuals and organizations can easily use a different metadata repository. This allows co",{"fg":2}]],"8":[["ntrol which packages are available for automatic installation. One can allow only audited and approved package versions, and make private packages or forks available. See :ref:`Cust",{"fg":2}]],"9":[["om METADATA <man-custom-metadata>` for details.                                                                                                                                      ",{"fg":2}]],"10":[["                                                                                                                                                                                     ",{}]],"11":[[" Updating Packages                                                                                                                                                                   ",{}]],"12":[[" -----------------                                                                                                                                                                   ",{}]],"13":[["@@ -278,10 +278,26 @@",{"fg":6}],[" When you decide to \"unpin\" a package and let the package manager update it again                                                                               ",{}]],"14":[["                                                                                                                                                                                     ",{}]],"15":[[" After this, the ``Stats`` package is managed by the package manager again, and future calls to :func:`Pkg.update` will upgrade it to newer versions when they are published.        ",{}]],"16":[[" The throw-away ``pinned.1fd0983b.tmp`` branch remains in your local ``Stats`` repo, but since git branches are extremely lightweight, this doesn't really matter;                   ",{}]],"17":[["-if you feel like cleaning them up, you can go into the repo and delete those branches.",{"fg":1}],["                                                                                              ",{}]],"18":[["+if you feel like cleaning them up, you can go into the repo and delete those branches [2]_.",{"fg":2}],["                                                                                         ",{}]],"19":[["                                                                                                                                                                                     ",{}]],"20":[[" .. [2] Packages that aren't on branches will also be marked as dirty if you make changes in the repo, but that's a less common thing to do.                                         ",{}]],"21":[["                                                                                                                                                                                     ",{}]],"22":[["+.. _man-custom-metadata:",{"fg":2}],["                                                                                                                                                            ",{}]],"23":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"24":[["+Custom METADATA Repository",{"fg":2}],["                                                                                                                                                          ",{}]],"25":[["+--------------------------",{"fg":2}],["                                                                                                                                                          ",{}]],"26":[["+By default, Julia assumes you will be using the `official METADATA.jl <https://github.com/JuliaLang/METADATA.jl>`_ repository for downloading and installing packages.",{"fg":2}],["              ",{}]],"27":[["+You can also provide a different metadata repository location.",{"fg":2}],["                                                                                                                      ",{}]],"28":[["+A common approach is to keep your ``metadata-v2`` branch up to date with the Julia official branch and add another branch with your custom packages.",{"fg":2}],["                                ",{}]],"29":[["+You can initialize your local metadata repository using that custom location and branch and then periodically rebase your custom branch with the official ``metadata-v2`` branch.",{"fg":2}],["   ",{}]],"30":[["+In order to use a custom repository and branch, issue the following command::",{"fg":2}],["                                                                                                       ",{}]],"31":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"32":[["+    julia> Pkg.init(\"https://me.example.com/METADATA.jl.git\", \"branch\")",{"fg":2}],["                                                                                                             ",{}]],"33":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"34":[["+The branch argument is optional and defaults to ``metadata-v2``.",{"fg":2}],["                                                                                                                    ",{}]],"35":[["+Once initialized, a file named ``META_BRANCH`` in your ``~/.julia/vX.Y/`` path will track the branch that your METADATA repository was initialized with.",{"fg":2}],["                            ",{}]],"36":[["+If you want to change branches, you will need to either modify the ``META_BRANCH`` file directly (be careful!) or remove the ``vX.Y`` directory and re-initialize your METADATA repo",{"fg":2}]],"37":[["sitory using the ``Pkg.init`` command.                                                                                                                                               ",{"fg":2}]],"38":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"39":[[" *******************                                                                                                                                                                 ",{}]],"40":[[" Package Development                                                                                                                                                                 ",{}]],"41":[[" *******************                                                                                                                                                                 ",{}]],"42":[["@@ -309,6 +325,53 @@",{"fg":6}],[" Once you do this, the package manager knows your GitHub user name and can config                                                                                ",{}]],"43":[[" You should also `upload <https://github.com/settings/ssh>`_ your public SSH key to GitHub and set up an `SSH agent <http://linux.die.net/man/1/ssh-agent>`_ on your development mach",{}]],"44":[["ine so that you can push changes with minimal hassle.                                                                                                                                ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[1.766244,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.000465,{"lines":{"0":[[" In the future, we will make this system extensible and support other common git hosting options like `BitBucket <https://bitbucket.org>`_ and allow developers to choose their favor",{}]],"1":[["ite.                                                                                                                                                                                 ",{}]],"2":[["                                                                                                                                                                                     ",{}]],"3":[["+Guidelines for Naming a Package",{"fg":2}],["                                                                                                                                                     ",{}]],"4":[["+-------------------------------",{"fg":2}],["                                                                                                                                                     ",{}]],"5":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"6":[["+Package names should be sensible to most Julia users, *even to those who are",{"fg":2}],["                                                                                                        ",{}]],"7":[["+not domain experts*.",{"fg":2}],["                                                                                                                                                                ",{}]],"8":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"9":[["+1. Avoid jargon. In particular, avoid acronyms unless there is minimal",{"fg":2}],["                                                                                                              ",{}]],"10":[["+   possibility of confusion.",{"fg":2}],["                                                                                                                                                        ",{}]],"11":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"12":[["+  * It's ok to say ``USA`` if you're talking about the USA.",{"fg":2}],["                                                                                                                         ",{}]],"13":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"14":[["+  * It's not ok to say ``PMA``, even if you're talking about positive mental",{"fg":2}],["                                                                                                        ",{}]],"15":[["+    attitude.",{"fg":2}],["                                                                                                                                                                       ",{}]],"16":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"17":[["+2. Packages that provide most of their functionality in association with a new",{"fg":2}],["                                                                                                      ",{}]],"18":[["+   type should have pluralized names.",{"fg":2}],["                                                                                                                                               ",{}]],"19":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"20":[["+  * ``DataFrames`` provides the ``DataFrame`` type.",{"fg":2}],["                                                                                                                                 ",{}]],"21":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"22":[["+  * ``BloomFilters`` provides the ``BloomFilter`` type.",{"fg":2}],["                                                                                                                             ",{}]],"24":[["+  * In contrast, ``JuliaParser`` provides no new type, but instead new",{"fg":2}],["                                                                                                              ",{}]],"25":[["+    functionality in the ``JuliaParser.parse()`` function.",{"fg":2}],["                                                                                                                          ",{}]],"26":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"27":[["+3. Err on the side of clarity, even if clarity seems long-winded to you.",{"fg":2}],["                                                                                                            ",{}]],"28":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"29":[["+  * ``RandomMatrices`` is a less ambiguous name than ``RndMat`` or ``RMT``,",{"fg":2}],["                                                                                                         ",{}]],"30":[["+    even though the latter are shorter.",{"fg":2}],["                                                                                                                                             ",{}]],"32":[["+4. A less systematic name may suit a package that implements one of several",{"fg":2}],["                                                                                                         ",{}]],"33":[["+   possible approaches to its domain.",{"fg":2}],["                                                                                                                                               ",{}]],"34":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"35":[["+  * Julia does not have a single comprehensive plotting package. Instead,",{"fg":2}],["                                                                                                           ",{}]],"36":[["+    ``Gadfly``, ``PyPlot``, ``Winston`` and other packages each implement a",{"fg":2}],["                                                                                                         ",{}]],"37":[["+    unique approach based on a particular design philosophy.",{"fg":2}],["                                                                                                                        ",{}]],"38":[["+",{"fg":2}],["  ",{"bg":1}],["                                                                                                                                                                                  ",{}]],"39":[["+  * In contrast, ``SortingAlgorithms`` provides a consistent interface to use",{"fg":2}],["                                                                                                       ",{}]],"40":[["+    many well-established sorting algorithms.",{"fg":2}],["                                                                                                                                       ",{}]],"41":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"42":[["+5. Packages that wrap external libraries or programs should be named after",{"fg":2}],["                                                                                                          ",{}]],"43":[["+   those libraries or programs.",{"fg":2}],["                                                                                                                                                     ",{}]],"44":[["+",{"fg":2}],["   ",{"bg":1}],["                                                                                                                                                                                 ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[1.567755,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.000602,{"lines":{"0":[["+  * ``CPLEX.jl`` wraps the ``CPLEX`` library, which can be identified easily in",{"fg":2}],["                                                                                                     ",{}]],"1":[["+    a web search.",{"fg":2}],["                                                                                                                                                                   ",{}]],"2":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"3":[["+  * ``MATLAB.jl`` provides an interface to call the MATLAB engine from within Julia.",{"fg":2}],["                                                                                                ",{}]],"4":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"5":[[" Generating a New Package                                                                                                                                                            ",{}]],"6":[[" ------------------------                                                                                                                                                            ",{}]],"7":[["                                                                                                                                                                                     ",{}]],"8":[["diff --git a/doc/manual/types.rst b/doc/manual/types.rst",{"bold":true}],["                                                                                                                             ",{}]],"9":[["index 92d459a..90ca1d6 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"10":[["--- a/doc/manual/types.rst",{"bold":true}],["                                                                                                                                                           ",{}]],"11":[["+++ b/doc/manual/types.rst",{"bold":true}],["                                                                                                                                                           ",{}]],"12":[["@@ -692,7 +692,7 @@",{"fg":6}],[" surrounded by curly braces::                                                                                                                                     ",{}]],"13":[[" This declaration defines a new parametric type, ``Point{T}``, holding                                                                                                               ",{}]],"14":[[" two \"coordinates\" of type ``T``. What, one may ask, is ``T``? Well,                                                                                                                 ",{}]],"15":[[" that's precisely the point of parametric types: it can be any type at                                                                                                               ",{}]],"16":[["-all (or an integer, actually, although here it's clearly used as a",{"fg":1}],["                                                                                                                  ",{}]],"17":[["+all (or any bits type, actually, although here it's clearly used as a",{"fg":2}],["                                                                                                               ",{}]],"18":[[" type). ``Point{Float64}`` is a concrete type equivalent to the type                                                                                                                 ",{}]],"19":[[" defined by replacing ``T`` in the definition of ``Point`` with                                                                                                                      ",{}]],"20":[[" :class:`Float64`. Thus, this single declaration actually declares an                                                                                                                ",{}]],"21":[["@@ -1243,6 +1243,39 @@",{"fg":6}],[" If you apply :func:`super` to other type objects (or non-type objects), a                                                                                     ",{}]],"22":[["     julia> super((Float64,Int64))                                                                                                                                                   ",{}]],"23":[["     ERROR: `super` has no method matching super(::Type{(Float64,Int64)})                                                                                                            ",{}]],"24":[["                                                                                                                                                                                     ",{}]],"25":[["+\"Value types\"",{"fg":2}],["                                                                                                                                                                       ",{}]],"26":[["+-------------",{"fg":2}],["                                                                                                                                                                       ",{}]],"27":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"28":[["+As one application of these ideas, Julia includes a parametric type,",{"fg":2}],["                                                                                                                ",{}]],"29":[["+``Val{T}``, designated for dispatching on bits-type *values*.  For",{"fg":2}],["                                                                                                                  ",{}]],"30":[["+example, if you pass a boolean to a function, you have to test the",{"fg":2}],["                                                                                                                  ",{}]],"31":[["+value at run-time:",{"fg":2}],["                                                                                                                                                                  ",{}]],"32":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"33":[["+.. doctest::",{"fg":2}],["                                                                                                                                                                        ",{}]],"35":[["+    function firstlast(b::Bool)",{"fg":2}],["                                                                                                                                                     ",{}]],"36":[["+        return b ? \"First\" : \"Last\"",{"fg":2}],["                                                                                                                                                 ",{}]],"37":[["+    end",{"fg":2}],["                                                                                                                                                                             ",{}]],"38":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"39":[["+    println(firstlast(true))",{"fg":2}],["                                                                                                                                                        ",{}]],"40":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"41":[["+You can instead cause the conditional to be evaluated during function",{"fg":2}],["                                                                                                               ",{}]],"42":[["+compilation by using the ``Val`` trick:",{"fg":2}],["                                                                                                                                             ",{}]],"43":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"44":[["+.. doctest::",{"fg":2}],["                                                                                                                                                                        ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[7.487624,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.000677,{"lines":{"0":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"1":[["+    firstlast(::Type{Val{true}}) = \"First\"",{"fg":2}],["                                                                                                                                          ",{}]],"2":[["+    firstlast(::Type{Val{false}}) = \"Last\"",{"fg":2}],["                                                                                                                                          ",{}]],"3":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"4":[["+    println(firstlast(Val{true}))",{"fg":2}],["                                                                                                                                                   ",{}]],"5":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"6":[["+Any legal type parameter (Types, Symbols, Integers, floating-point",{"fg":2}],["                                                                                                                  ",{}]],"7":[["+numbers, tuples, etc.) can be passed via ``Val``.",{"fg":2}],["                                                                                                                                   ",{}]],"8":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"9":[["+For consistency across Julia, the call site should always pass a",{"fg":2}],["                                                                                                                    ",{}]],"10":[["+``Val`` type rather than creating an instance, i.e., use",{"fg":2}],["                                                                                                                            ",{}]],"11":[["+``foo(Val{:bar})`` rather than ``foo(Val{:bar}())``.",{"fg":2}],["                                                                                                                                ",{}]],"12":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"13":[[" Nullable Types: Representing Missing Values                                                                                                                                         ",{}]],"14":[[" -------------------------------------------                                                                                                                                         ",{}]],"15":[["                                                                                                                                                                                     ",{}]],"16":[["diff --git a/doc/stdlib/arrays.rst b/doc/stdlib/arrays.rst",{"bold":true}],["                                                                                                                           ",{}]],"17":[["index 6130173..3bfa15b 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"18":[["--- a/doc/stdlib/arrays.rst",{"bold":true}],["                                                                                                                                                          ",{}]],"19":[["+++ b/doc/stdlib/arrays.rst",{"bold":true}],["                                                                                                                                                          ",{}]],"20":[["@@ -444,14 +444,29 @@",{"fg":6}],[" Array functions                                                                                                                                                ",{}]],"21":[["                                                                                                                                                                                     ",{}]],"22":[["    Rotate matrix ``A`` 180 degrees.                                                                                                                                                 ",{}]],"23":[["                                                                                                                                                                                     ",{}]],"24":[["+.. function:: rot180(A, k)",{"fg":2}],["                                                                                                                                                          ",{}]],"25":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"26":[["+   Rotate matrix ``A`` 180 degrees an integer ``k`` number of times.",{"fg":2}],["                                                                                                                ",{}]],"27":[["+   If ``k`` is even, this is equivalent to a ``copy``.",{"fg":2}],["                                                                                                                              ",{}]],"28":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"29":[[" .. function:: rotl90(A)                                                                                                                                                             ",{}]],"30":[["                                                                                                                                                                                     ",{}]],"31":[["    Rotate matrix ``A`` left 90 degrees.                                                                                                                                             ",{}]],"32":[["                                                                                                                                                                                     ",{}]],"33":[["+.. function:: rotl90(A, k)",{"fg":2}],["                                                                                                                                                          ",{}]],"35":[["+   Rotate matrix ``A`` left 90 degrees an integer ``k`` number of times. If ``k``",{"fg":2}],["                                                                                                   ",{}]],"36":[["+   is zero or a multiple of four, this is equivalent to a ``copy``.",{"fg":2}],["                                                                                                                 ",{}]],"37":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"38":[[" .. function:: rotr90(A)                                                                                                                                                             ",{}]],"39":[["                                                                                                                                                                                     ",{}]],"40":[["    Rotate matrix ``A`` right 90 degrees.                                                                                                                                            ",{}]],"41":[["                                                                                                                                                                                     ",{}]],"42":[["+.. function:: rotr90(A, k)",{"fg":2}],["                                                                                                                                                          ",{}]],"44":[["+   Rotate matrix ``A`` right 90 degrees an integer ``k`` number of times. If ``k``",{"fg":2}],["                                                                                                  ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[1.367532,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.000693,{"lines":{"0":[["+   is zero or a multiple of four, this is equivalent to a ``copy``.",{"fg":2}],["                                                                                                                 ",{}]],"1":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"2":[[" .. function:: reducedim(f, A, dims, initial)                                                                                                                                        ",{}]],"3":[["                                                                                                                                                                                     ",{}]],"4":[["    Reduce 2-argument function ``f`` along dimensions of ``A``. ``dims`` is a                                                                                                        ",{}]],"5":[["diff --git a/doc/stdlib/base.rst b/doc/stdlib/base.rst",{"bold":true}],["                                                                                                                               ",{}]],"6":[["index 1e3b94d..25be3ad 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"7":[["--- a/doc/stdlib/base.rst",{"bold":true}],["                                                                                                                                                            ",{}]],"8":[["+++ b/doc/stdlib/base.rst",{"bold":true}],["                                                                                                                                                            ",{}]],"9":[["@@ -101,17 +101,21 @@",{"fg":6}],[" Getting Around                                                                                                                                                 ",{}]],"10":[["                                                                                                                                                                                     ",{}]],"11":[[" .. function:: which(f, types)                                                                                                                                                       ",{}]],"12":[["                                                                                                                                                                                     ",{}]],"13":[["-   Return the method of ``f`` (a ``Method`` object) that will be called for arguments with the given types.",{"fg":1}],["                                                                         ",{}]],"14":[["+   Returns the method of ``f`` (a ``Method`` object) that would be called for arguments of the given types.",{"fg":2}],["                                                                         ",{}]],"15":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"16":[["+   If ``types`` is an abstract type, then the method that would be called by ``invoke``",{"fg":2}],["                                                                                             ",{}]],"17":[["+   is returned.",{"fg":2}],["                                                                                                                                                                     ",{}]],"18":[["                                                                                                                                                                                     ",{}]],"19":[[" .. function:: @which                                                                                                                                                                ",{}]],"20":[["                                                                                                                                                                                     ",{}]],"21":[["-   Evaluates the arguments to the function call, determines their types, and calls the ``which`` function on the resulting expression",{"fg":1}],["                                               ",{}]],"22":[["+   Evaluates the arguments to the specified function call, and returns the ``Method`` object",{"fg":2}],["                                                                                        ",{}]],"23":[["+   for the method that would be called for those arguments.",{"fg":2}],["                                                                                                                         ",{}]],"24":[["                                                                                                                                                                                     ",{}]],"25":[[" .. function:: methods(f, [types])                                                                                                                                                   ",{}]],"26":[["                                                                                                                                                                                     ",{}]],"27":[["-   Show all methods of ``f`` with their argument types.",{"fg":1}],["                                                                                                                             ",{}]],"28":[["+   Returns the method table for ``f``.",{"fg":2}],["                                                                                                                                              ",{}]],"29":[["                                                                                                                                                                                     ",{}]],"30":[["-   If ``types`` is specified, an array of methods whose types match is returned.",{"fg":1}],["                                                                                                    ",{}]],"31":[["+   If ``types`` is specified, returns an array of methods whose types match.",{"fg":2}],["                                                                                                        ",{}]],"33":[[" .. function:: methodswith(typ[, module or function][, showparents])                                                                                                                 ",{}]],"34":[["                                                                                                                                                                                     ",{}]],"35":[["@@ -438,6 +442,14 @@",{"fg":6}],[" Types                                                                                                                                                           ",{}]],"36":[["                                                                                                                                                                                     ",{}]],"37":[["    Compute a type that contains the intersection of ``T`` and ``S``. Usually this will be the smallest such type or one close to it.                                                ",{}]],"38":[["                                                                                                                                                                                     ",{}]],"39":[["+.. function:: Val{c}",{"fg":2}],["                                                                                                                                                                ",{}]],"40":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"41":[["+   Create a \"value type\" out of ``c``, which must be an ``isbits``",{"fg":2}],["                                                                                                                  ",{}]],"42":[["+   value. The intent of this construct is to be able to dispatch on",{"fg":2}],["                                                                                                                 ",{}]],"43":[["+   constants, e.g., ``f(Val{false})`` allows you to dispatch directly",{"fg":2}],["                                                                                                               ",{}]],"44":[["+   (at compile-time) to an implementation ``f(::Type{Val{false}})``,",{"fg":2}],["                                                                                                                ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[8.519511,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.000728,{"lines":{"0":[["+   without having to test the boolean value at runtime.",{"fg":2}],["                                                                                                                             ",{}]],"2":[[" Generic Functions                                                                                                                                                                   ",{}]],"3":[[" -----------------                                                                                                                                                                   ",{}]],"4":[["                                                                                                                                                                                     ",{}]],"5":[["@@ -881,9 +893,9 @@",{"fg":6}],[" Reflection                                                                                                                                                       ",{}]],"6":[["                                                                                                                                                                                     ",{}]],"7":[["    Returns a tuple ``(filename,line)`` giving the location of a method definition.                                                                                                  ",{}]],"8":[["                                                                                                                                                                                     ",{}]],"9":[["-.. function:: functionlocs(f::Function, types)",{"fg":1}],["                                                                                                                                      ",{}]],"10":[["+.. function:: functionloc(m::Method)",{"fg":2}],["                                                                                                                                                ",{}]],"11":[["                                                                                                                                                                                     ",{}]],"12":[["-   Returns an array of the results of ``functionloc`` for all matching definitions.",{"fg":1}],["                                                                                                 ",{}]],"13":[["+   Returns a tuple ``(filename,line)`` giving the location of a method definition.",{"fg":2}],["                                                                                                  ",{}]],"14":[["                                                                                                                                                                                     ",{}]],"15":[[" Internals                                                                                                                                                                           ",{}]],"16":[[" ---------                                                                                                                                                                           ",{}]],"17":[["diff --git a/doc/stdlib/collections.rst b/doc/stdlib/collections.rst",{"bold":true}],["                                                                                                                 ",{}]],"18":[["index 3771713..c5c80e2 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"19":[["--- a/doc/stdlib/collections.rst",{"bold":true}],["                                                                                                                                                     ",{}]],"20":[["+++ b/doc/stdlib/collections.rst",{"bold":true}],["                                                                                                                                                     ",{}]],"21":[["@@ -418,8 +418,8 @@",{"fg":6}],[" Iterable Collections                                                                                                                                             ",{}]],"22":[["       14                                                                                                                                                                            ",{}]],"23":[["                                                                                                                                                                                     ",{}]],"24":[["    The associativity of the reduction is implementation-dependent. Use                                                                                                              ",{}]],"25":[["-   ``mapfoldl`` or ``mapfoldr`` instead for guaranteed left or right",{"fg":1}],["                                                                                                                ",{}]],"26":[["-   associativity.",{"fg":1}],["                                                                                                                                                                   ",{}]],"27":[["+   :func:`mapfoldl` or :func:`mapfoldr` instead for guaranteed left or",{"fg":2}],[" ",{"bg":1}],["                                                                                                             ",{}]],"28":[["+   right associativity.",{"fg":2}],["                                                                                                                                                             ",{}]],"30":[[" .. function:: mapreduce(f, op, itr)                                                                                                                                                 ",{}]],"31":[["                                                                                                                                                                                     ",{}]],"32":[["diff --git a/doc/stdlib/strings.rst b/doc/stdlib/strings.rst",{"bold":true}],["                                                                                                                         ",{}]],"33":[["index 6534ce2..07e449f 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"34":[["--- a/doc/stdlib/strings.rst",{"bold":true}],["                                                                                                                                                         ",{}]],"35":[["+++ b/doc/stdlib/strings.rst",{"bold":true}],["                                                                                                                                                         ",{}]],"36":[["@@ -189,7 +189,7 @@",{"fg":6}],["                                                                                                                                                                  ",{}]],"37":[["                                                                                                                                                                                     ",{}]],"38":[["    Return ``string`` with any trailing whitespace removed. If ``chars`` (a character, or vector or set of characters) is provided, instead remove characters contained in it.       ",{}]],"39":[["                                                                                                                                                                                     ",{}]],"40":[["-.. function:: beginswith(string, prefix | chars)",{"fg":1}],["                                                                                                                                    ",{}]],"41":[["+.. function:: startswith(string, prefix | chars)",{"fg":2}],["                                                                                                                                    ",{}]],"42":[["                                                                                                                                                                                     ",{}]],"43":[["    Returns ``true`` if ``string`` starts with ``prefix``. If the second argument is a vector or set of characters, tests whether the first character of ``string`` belongs to that s",{}]],"44":[["et.                                                                                                                                                                                  ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[2.911269,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0007520000000000001,{"lines":{"0":[["                                                                                                                                                                                     ",{}]],"1":[["diff --git a/src/alloc.c b/src/alloc.c",{"bold":true}],["                                                                                                                                               ",{}]],"2":[["index eb61896..bc5c212 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"3":[["--- a/src/alloc.c",{"bold":true}],["                                                                                                                                                                    ",{}]],"4":[["+++ b/src/alloc.c",{"bold":true}],["                                                                                                                                                                    ",{}]],"5":[["@@ -143,6 +143,7 @@",{"fg":6}],[" static jl_value_t *jl_new_bits_internal(jl_value_t *dt, void *data, size_t *len)                                                                                 ",{}]],"6":[["         return v;                                                                                                                                                                   ",{}]],"7":[["     }                                                                                                                                                                               ",{}]],"9":[["+    assert(jl_is_datatype(dt));",{"fg":2}],["                                                                                                                                                     ",{}]],"10":[["     jl_datatype_t *bt = (jl_datatype_t*)dt;                                                                                                                                         ",{}]],"11":[["     size_t nb = jl_datatype_size(bt);                                                                                                                                               ",{}]],"12":[["     if (nb == 0)                                                                                                                                                                    ",{}]],"13":[["@@ -559,6 +560,8 @@",{"fg":6}],[" DLLEXPORT jl_sym_t *jl_symbol_n(const char *str, int32_t len)                                                                                                    ",{}]],"14":[["     char *name = (char*)alloca(len+1);                                                                                                                                              ",{}]],"15":[["     memcpy(name, str, len);                                                                                                                                                         ",{}]],"16":[["     name[len] = '\\0';                                                                                                                                                               ",{}]],"17":[["+    if (strlen(name) != len)",{"fg":2}],["                                                                                                                                                        ",{}]],"18":[["+        jl_error(\"Symbol name may not contain \\\\0\");",{"fg":2}],["                                                                                                                                ",{}]],"19":[["     return jl_symbol(name);                                                                                                                                                         ",{}]],"20":[[" }                                                                                                                                                                                   ",{}]],"21":[["                                                                                                                                                                                     ",{}]],"22":[["@@ -587,6 +590,8 @@",{"fg":6}],[" DLLEXPORT jl_sym_t *jl_tagged_gensym(const char *str, int32_t len)                                                                                               ",{}]],"23":[["     memcpy(name+2, str, len);                                                                                                                                                       ",{}]],"24":[["     n = uint2str(gs_name, sizeof(gs_name), gs_ctr, 10);                                                                                                                             ",{}]],"25":[["     memcpy(name+3+len, n, sizeof(gs_name)-(n-gs_name));                                                                                                                             ",{}]],"26":[["+    if (strlen(name) != len+3+sizeof(gs_name)-(n-gs_name)-1)",{"fg":2}],["                                                                                                                        ",{}]],"27":[["+        jl_error(\"Symbol name may not contain \\\\0\");",{"fg":2}],["                                                                                                                                ",{}]],"28":[["     gs_ctr++;                                                                                                                                                                       ",{}]],"29":[["     return jl_symbol(name);                                                                                                                                                         ",{}]],"30":[[" }                                                                                                                                                                                   ",{}]],"31":[["@@ -636,6 +641,8 @@",{"fg":6}],[" void jl_compute_field_offsets(jl_datatype_t *st)                                                                                                                 ",{}]],"32":[["         }                                                                                                                                                                           ",{}]],"33":[["         else {                                                                                                                                                                      ",{}]],"34":[["             fsz = sizeof(void*);                                                                                                                                                    ",{}]],"35":[["+            if (fsz > MAX_ALIGN)",{"fg":2}],["                                                                                                                                                    ",{}]],"36":[["+                fsz = MAX_ALIGN;",{"fg":2}],["                                                                                                                                                    ",{}]],"37":[["             al = fsz;                                                                                                                                                               ",{}]],"38":[["             st->fields[i].isptr = 1;                                                                                                                                                ",{}]],"39":[["             ptrfree = 0;                                                                                                                                                            ",{}]],"40":[["diff --git a/src/codegen.cpp b/src/codegen.cpp",{"bold":true}],["                                                                                                                                       ",{}]],"41":[["index 50940b5..a9f2e38 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"42":[["--- a/src/codegen.cpp",{"bold":true}],["                                                                                                                                                                ",{}]],"43":[["+++ b/src/codegen.cpp",{"bold":true}],["                                                                                                                                                                ",{}]],"44":[["@@ -3734,7 +3734,7 @@",{"fg":6}],[" static Function *emit_function(jl_lambda_info_t *lam, bool cstyle)                                                                                             ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.8234669999999999,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0007300000000000001,{"lines":{"0":[["     ctx.f = f;                                                                                                                                                                      ",{}]],"1":[["                                                                                                                                                                                     ",{}]],"2":[["     // step 5. set up debug info context and create first basic block                                                                                                               ",{}]],"3":[["-    bool in_user_code = lam->module != jl_base_module && lam->module != jl_core_module;",{"fg":1}],["                                                                                             ",{}]],"4":[["+    bool in_user_code = !jl_is_submodule(lam->module, jl_base_module) && !jl_is_submodule(lam->module, jl_core_module);",{"fg":2}],["                                                             ",{}]],"5":[["     bool do_coverage = jl_compileropts.code_coverage == JL_LOG_ALL || (jl_compileropts.code_coverage == JL_LOG_USER && in_user_code);                                               ",{}]],"6":[["     bool do_malloc_log = jl_compileropts.malloc_log  == JL_LOG_ALL || (jl_compileropts.malloc_log    == JL_LOG_USER && in_user_code);                                               ",{}]],"7":[["     jl_value_t *stmt = jl_cellref(stmts,0);                                                                                                                                         ",{}]],"8":[["diff --git a/src/dump.c b/src/dump.c",{"bold":true}],["                                                                                                                                                 ",{}]],"9":[["index 751772e..ae220b7 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"10":[["--- a/src/dump.c",{"bold":true}],["                                                                                                                                                                     ",{}]],"11":[["+++ b/src/dump.c",{"bold":true}],["                                                                                                                                                                     ",{}]],"12":[["@@ -338,17 +338,6 @@",{"fg":6}],[" static void jl_update_all_fptrs()                                                                                                                               ",{}]],"13":[["     delayed_fptrs = NULL;                                                                                                                                                           ",{}]],"14":[[" }                                                                                                                                                                                   ",{}]],"15":[["                                                                                                                                                                                     ",{}]],"16":[["-static int is_submodule(jl_module_t *parent, jl_module_t *child)",{"fg":1}],["                                                                                                                    ",{}]],"17":[["-{",{"fg":1}],["                                                                                                                                                                                   ",{}]],"18":[["-    while (1) {",{"fg":1}],["                                                                                                                                                                     ",{}]],"19":[["-        if (parent == child)",{"fg":1}],["                                                                                                                                                        ",{}]],"20":[["-            return 1;",{"fg":1}],["                                                                                                                                                               ",{}]],"21":[["-        if (child == NULL || child == child->parent)",{"fg":1}],["                                                                                                                                ",{}]],"22":[["-            return 0;",{"fg":1}],["                                                                                                                                                               ",{}]],"23":[["-        child = child->parent;",{"fg":1}],["                                                                                                                                                      ",{}]],"24":[["-    }",{"fg":1}],["                                                                                                                                                                               ",{}]],"25":[["-}",{"fg":1}],["                                                                                                                                                                                   ",{}]],"26":[["-",{"fg":1}],["                                                                                                                                                                                    ",{}]],"27":[[" // --- serialize ---                                                                                                                                                                ",{}]],"28":[["                                                                                                                                                                                     ",{}]],"29":[[" static void jl_serialize_fptr(ios_t *s, void *fptr)                                                                                                                                 ",{}]],"30":[["@@ -367,7 +356,7 @@",{"fg":6}],[" static void jl_serialize_datatype(ios_t *s, jl_datatype_t *dt)                                                                                                   ",{}]],"31":[["             tag = 6; // must use apply_type                                                                                                                                         ",{}]],"32":[["     }                                                                                                                                                                               ",{}]],"33":[["     else if (mode == MODE_MODULE) {                                                                                                                                                 ",{}]],"34":[["-        int internal = is_submodule(jl_current_module, dt->name->module);",{"fg":1}],["                                                                                                           ",{}]],"35":[["+        int internal = jl_is_submodule(dt->name->module, jl_current_module);",{"fg":2}],["                                                                                                        ",{}]],"36":[["         if (!internal && dt->name->primary == (jl_value_t*)dt) {                                                                                                                    ",{}]],"37":[["             tag = 6; // external primary type                                                                                                                                       ",{}]],"38":[["         }                                                                                                                                                                           ",{}]],"39":[["@@ -440,11 +429,11 @@",{"fg":6}],[" static void jl_serialize_module(ios_t *s, jl_module_t *m)                                                                                                      ",{}]],"40":[["     jl_serialize_value(s, m->name);                                                                                                                                                 ",{}]],"41":[["     int ref_only = 0;                                                                                                                                                               ",{}]],"42":[["     if (mode == MODE_MODULE_LAMBDAS) {                                                                                                                                              ",{}]],"43":[["-        assert(!is_submodule(jl_current_module, m));",{"fg":1}],["                                                                                                                                ",{}]],"44":[["+        assert(!jl_is_submodule(m, jl_current_module));",{"fg":2}],["                                                                                                                             ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[1.119349,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0008619999999999999,{"lines":{"0":[["         ref_only = 1;                                                                                                                                                               ",{}]],"1":[["     }                                                                                                                                                                               ",{}]],"2":[["     if (mode == MODE_MODULE) {                                                                                                                                                      ",{}]],"3":[["-        if (!is_submodule(jl_current_module, m))",{"fg":1}],["                                                                                                                                    ",{}]],"4":[["+        if (!jl_is_submodule(m, jl_current_module))",{"fg":2}],["                                                                                                                                 ",{}]],"5":[["             ref_only = 1;                                                                                                                                                           ",{}]],"6":[["         write_int8(s, ref_only);                                                                                                                                                    ",{}]],"7":[["     }                                                                                                                                                                               ",{}]],"8":[["@@ -695,7 +684,7 @@",{"fg":6}],[" static void jl_serialize_value_(ios_t *s, jl_value_t *v)                                                                                                         ",{}]],"9":[["                 writetag(s, (jl_value_t*)jl_datatype_type);                                                                                                                         ",{}]],"10":[["             jl_serialize_value(s, t);                                                                                                                                               ",{}]],"11":[["             if ((mode == MODE_MODULE || mode == MODE_MODULE_LAMBDAS) && t == jl_typename_type) {                                                                                    ",{}]],"12":[["-                if (is_submodule(jl_current_module, ((jl_typename_t*)v)->module)) {",{"fg":1}],["                                                                                                 ",{}]],"13":[["+                if (jl_is_submodule(((jl_typename_t*)v)->module, jl_current_module)) {",{"fg":2}],["                                                                                              ",{}]],"14":[["                     write_uint8(s, 0);                                                                                                                                              ",{}]],"15":[["                 }                                                                                                                                                                   ",{}]],"16":[["                 else {                                                                                                                                                              ",{}]],"17":[["@@ -759,7 +748,7 @@",{"fg":6}],[" void jl_serialize_methtable_from_mod(ios_t *s, jl_module_t *m, jl_sym_t *name, j                                                                                 ",{}]],"18":[["     } *chain = NULL;                                                                                                                                                                ",{}]],"19":[["     jl_methlist_t *ml = mt->defs;                                                                                                                                                   ",{}]],"20":[["     while (ml != JL_NULL) {                                                                                                                                                         ",{}]],"21":[["-        if (is_submodule(jl_current_module, ml->func->linfo->module)) {",{"fg":1}],["                                                                                                             ",{}]],"22":[["+        if (jl_is_submodule(ml->func->linfo->module, jl_current_module)) {",{"fg":2}],["                                                                                                          ",{}]],"23":[["             struct _chain *link = (struct _chain*)alloca(sizeof(struct _chain));                                                                                                    ",{}]],"24":[["             link->ml = ml;                                                                                                                                                          ",{}]],"25":[["             link->next = chain;                                                                                                                                                     ",{}]],"26":[["diff --git a/src/gf.c b/src/gf.c",{"bold":true}],["                                                                                                                                                     ",{}]],"27":[["index 5dc3ced..bac10b1 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"28":[["--- a/src/gf.c",{"bold":true}],["                                                                                                                                                                       ",{}]],"29":[["+++ b/src/gf.c",{"bold":true}],["                                                                                                                                                                       ",{}]],"30":[["@@ -1645,24 +1645,12 @@",{"fg":6}],[" JL_CALLABLE(jl_apply_generic)                                                                                                                                ",{}]],"31":[["     return res;                                                                                                                                                                     ",{}]],"32":[[" }                                                                                                                                                                                   ",{}]],"33":[["                                                                                                                                                                                     ",{}]],"34":[["-// invoke()",{"fg":1}],["                                                                                                                                                                         ",{}]],"35":[["-// this does method dispatch with a set of types to match other than the",{"fg":1}],["                                                                                                            ",{}]],"36":[["-// types of the actual arguments. this means it sometimes does NOT call the",{"fg":1}],["                                                                                                         ",{}]],"37":[["-// most specific method for the argument types, so we need different logic.",{"fg":1}],["                                                                                                         ",{}]],"38":[["-// first we use the given types to look up a definition, then we perform",{"fg":1}],["                                                                                                            ",{}]],"39":[["-// caching and specialization within just that definition.",{"fg":1}],["                                                                                                                          ",{}]],"40":[["-// every definition has its own private method table for this purpose.",{"fg":1}],["                                                                                                              ",{}]],"41":[["-//",{"fg":1}],["                                                                                                                                                                                  ",{}]],"42":[["-// NOTE: assumes argument type is a subtype of the lookup type.",{"fg":1}],["                                                                                                                     ",{}]],"43":[["-jl_value_t *jl_gf_invoke(jl_function_t *gf, jl_tuple_t *types,",{"fg":1}],["                                                                                                                      ",{}]],"44":[["-                         jl_value_t **args, size_t nargs)",{"fg":1}],["                                                                                                                           ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.65493,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0006990000000000001,{"lines":{"0":[["+DLLEXPORT jl_value_t *jl_gf_invoke_lookup(jl_function_t *gf, jl_tuple_t *types)",{"fg":2}],["                                                                                                     ",{}]],"1":[[" {                                                                                                                                                                                   ",{}]],"2":[["     assert(jl_is_gf(gf));                                                                                                                                                           ",{}]],"3":[["     jl_methtable_t *mt = jl_gf_mtable(gf);                                                                                                                                          ",{}]],"4":[["-",{"fg":1}],["                                                                                                                                                                                    ",{}]],"5":[["     jl_methlist_t *m = mt->defs;                                                                                                                                                    ",{}]],"6":[["     size_t typelen = jl_tuple_len(types);                                                                                                                                           ",{}]],"7":[["-    size_t i;",{"fg":1}],["                                                                                                                                                                       ",{}]],"8":[["     jl_value_t *env = (jl_value_t*)jl_false;                                                                                                                                        ",{}]],"9":[["                                                                                                                                                                                     ",{}]],"10":[["     while (m != JL_NULL) {                                                                                                                                                          ",{}]],"11":[["@@ -1678,7 +1666,29 @@",{"fg":6}],[" jl_value_t *jl_gf_invoke(jl_function_t *gf, jl_tuple_t *types,                                                                                                ",{}]],"12":[["         m = m->next;                                                                                                                                                                ",{}]],"13":[["     }                                                                                                                                                                               ",{}]],"14":[["                                                                                                                                                                                     ",{}]],"15":[["-    if (m == JL_NULL) {",{"fg":1}],["                                                                                                                                                             ",{}]],"16":[["+    if (m == JL_NULL)",{"fg":2}],["                                                                                                                                                               ",{}]],"17":[["+        return jl_nothing;",{"fg":2}],["                                                                                                                                                          ",{}]],"18":[["+    return (jl_value_t*)m;",{"fg":2}],["                                                                                                                                                          ",{}]],"19":[["+}",{"fg":2}],["                                                                                                                                                                                   ",{}]],"20":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"21":[["+// invoke()",{"fg":2}],["                                                                                                                                                                         ",{}]],"22":[["+// this does method dispatch with a set of types to match other than the",{"fg":2}],["                                                                                                            ",{}]],"23":[["+// types of the actual arguments. this means it sometimes does NOT call the",{"fg":2}],["                                                                                                         ",{}]],"24":[["+// most specific method for the argument types, so we need different logic.",{"fg":2}],["                                                                                                         ",{}]],"25":[["+// first we use the given types to look up a definition, then we perform",{"fg":2}],["                                                                                                            ",{}]],"26":[["+// caching and specialization within just that definition.",{"fg":2}],["                                                                                                                          ",{}]],"27":[["+// every definition has its own private method table for this purpose.",{"fg":2}],["                                                                                                              ",{}]],"28":[["+//",{"fg":2}],["                                                                                                                                                                                  ",{}]],"29":[["+// NOTE: assumes argument type is a subtype of the lookup type.",{"fg":2}],["                                                                                                                     ",{}]],"30":[["+jl_value_t *jl_gf_invoke(jl_function_t *gf, jl_tuple_t *types,",{"fg":2}],["                                                                                                                      ",{}]],"31":[["+                         jl_value_t **args, size_t nargs)",{"fg":2}],["                                                                                                                           ",{}]],"32":[["+{",{"fg":2}],["                                                                                                                                                                                   ",{}]],"33":[["+    assert(jl_is_gf(gf));",{"fg":2}],["                                                                                                                                                           ",{}]],"34":[["+    jl_methtable_t *mt = jl_gf_mtable(gf);",{"fg":2}],["                                                                                                                                          ",{}]],"35":[["+    jl_methlist_t *m = (jl_methlist_t*)jl_gf_invoke_lookup(gf, types);",{"fg":2}],["                                                                                                              ",{}]],"36":[["+    size_t i;",{"fg":2}],["                                                                                                                                                                       ",{}]],"37":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"38":[["+    if ((jl_value_t*)m == jl_nothing) {",{"fg":2}],["                                                                                                                                             ",{}]],"39":[["         jl_no_method_error(gf, args, nargs);                                                                                                                                        ",{}]],"40":[["         // unreachable                                                                                                                                                              ",{}]],"41":[["     }                                                                                                                                                                               ",{}]],"42":[["@@ -1707,7 +1717,7 @@",{"fg":6}],[" jl_value_t *jl_gf_invoke(jl_function_t *gf, jl_tuple_t *types,                                                                                                 ",{}]],"43":[["         jl_tuple_t *tpenv=jl_null;                                                                                                                                                  ",{}]],"44":[["         jl_tuple_t *newsig=NULL;                                                                                                                                                    ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.31939,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.000833,{"lines":{"0":[["         jl_tuple_t *tt=NULL;                                                                                                                                                        ",{}]],"1":[["-        JL_GC_PUSH3(&env, &newsig, &tt);",{"fg":1}],["                                                                                                                                            ",{}]],"2":[["+        JL_GC_PUSH3(&tpenv, &newsig, &tt);",{"fg":2}],["                                                                                                                                          ",{}]],"3":[["                                                                                                                                                                                     ",{}]],"4":[["         if (m->invokes == JL_NULL) {                                                                                                                                                ",{}]],"5":[["             m->invokes = new_method_table(mt->name);                                                                                                                                ",{}]],"6":[["@@ -1719,7 +1729,7 @@",{"fg":6}],[" jl_value_t *jl_gf_invoke(jl_function_t *gf, jl_tuple_t *types,                                                                                                 ",{}]],"7":[["                                                                                                                                                                                     ",{}]],"8":[["         newsig = (jl_tuple_t*)m->sig;                                                                                                                                               ",{}]],"10":[["-        if (env != (jl_value_t*)jl_false) {",{"fg":1}],["                                                                                                                                         ",{}]],"11":[["+        if (m->tvars != jl_null) {",{"fg":2}],["                                                                                                                                                  ",{}]],"12":[["             jl_value_t *ti =                                                                                                                                                        ",{}]],"13":[["                 lookup_match((jl_value_t*)tt, (jl_value_t*)m->sig, &tpenv, m->tvars);                                                                                               ",{}]],"14":[["             assert(ti != (jl_value_t*)jl_bottom_type);                                                                                                                              ",{}]],"15":[["diff --git a/src/jltypes.c b/src/jltypes.c",{"bold":true}],["                                                                                                                                           ",{}]],"16":[["index 7f82bac..f58a723 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"17":[["--- a/src/jltypes.c",{"bold":true}],["                                                                                                                                                                  ",{}]],"18":[["+++ b/src/jltypes.c",{"bold":true}],["                                                                                                                                                                  ",{}]],"19":[["@@ -1978,7 +1978,8 @@",{"fg":6}],[" static jl_value_t *inst_type_w_(jl_value_t *t, jl_value_t **env, size_t n,                                                                                     ",{}]],"20":[["             ndt->types = (jl_tuple_t*)inst_type_w_((jl_value_t*)ftypes, env, n, stack, 1);                                                                                          ",{}]],"21":[["             if (!isabstract) {                                                                                                                                                      ",{}]],"22":[["                 if (jl_tuple_len(ftypes) == 0) {                                                                                                                                    ",{}]],"23":[["-                    ndt->alignment = ndt->size = dt->size;",{"fg":1}],["                                                                                                                          ",{}]],"24":[["+                    ndt->size = dt->size;",{"fg":2}],["                                                                                                                                           ",{}]],"25":[["+                    ndt->alignment = dt->alignment;",{"fg":2}],["                                                                                                                                 ",{}]],"26":[["                     ndt->pointerfree = dt->pointerfree;                                                                                                                             ",{}]],"27":[["                 }                                                                                                                                                                   ",{}]],"28":[["                 else {                                                                                                                                                              ",{}]],"29":[["diff --git a/src/julia-parser.scm b/src/julia-parser.scm",{"bold":true}],["                                                                                                                             ",{}]],"30":[["index 006da63..afd7dc9 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"31":[["--- a/src/julia-parser.scm",{"bold":true}],["                                                                                                                                                           ",{}]],"32":[["+++ b/src/julia-parser.scm",{"bold":true}],["                                                                                                                                                           ",{}]],"33":[["@@ -171,16 +171,19 @@",{"fg":6}],["                                                                                                                                                                ",{}]],"34":[["       (error \"use \\\"^\\\" instead of \\\"**\\\"\"))                                                                                                                                        ",{}]],"35":[["   (if (or (eof-object? (peek-char port)) (not (opchar? (peek-char port))))                                                                                                          ",{}]],"36":[["       (symbol (string c)) ; 1-char operator                                                                                                                                         ",{}]],"37":[["-      (let loop ((str (string c))",{"fg":1}],["                                                                                                                                                   ",{}]],"38":[["-                (c   (peek-char port)))",{"fg":1}],["                                                                                                                                             ",{}]],"39":[["-       (if (and (not (eof-object? c)) (opchar? c))",{"fg":1}],["                                                                                                                                  ",{}]],"40":[["-           (let* ((newop (string str c))",{"fg":1}],["                                                                                                                                            ",{}]],"41":[["-                  (opsym (string->symbol newop)))",{"fg":1}],["                                                                                                                                   ",{}]],"42":[["-             (if (operator? opsym)",{"fg":1}],["                                                                                                                                                  ",{}]],"43":[["-                 (begin (read-char port)",{"fg":1}],["                                                                                                                                            ",{}]],"44":[["-                        (loop newop (peek-char port)))",{"fg":1}],["                                                                                                                              ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[1.111206,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0008240000000000001,{"lines":{"0":[["-                 (string->symbol str)))",{"fg":1}],["                                                                                                                                             ",{}]],"1":[["-           (string->symbol str)))))",{"fg":1}],["                                                                                                                                                 ",{}]],"2":[["+      (let ((str (let loop ((str (string c))",{"fg":2}],["                                                                                                                                        ",{}]],"3":[["+",{"fg":2}],["                       ",{}],["    (c   (peek-char port)))",{"fg":2}],["                                                                                                                                  ",{}]],"4":[["+",{"fg":2}],["               ",{}],["   (if (and (not (eof-object? c)) (opchar? c))",{"fg":2}],["                                                                                                                       ",{}]],"5":[["+",{"fg":2}],["               ",{}],["       (let* ((newop (string str c))",{"fg":2}],["                                                                                                                                 ",{}]],"6":[["+",{"fg":2}],["                       ",{}],["      (opsym (string->symbol newop)))",{"fg":2}],["                                                                                                                        ",{}]],"7":[["+",{"fg":2}],["                       ",{}],[" (if (operator? opsym)",{"fg":2}],["                                                                                                                                       ",{}]],"8":[["+",{"fg":2}],["                       ",{}],["     (begin (read-char port)",{"fg":2}],["                                                                                                                                 ",{}]],"9":[["+",{"fg":2}],["                               ",{}],["    (loop newop (peek-char port)))",{"fg":2}],["                                                                                                                   ",{}]],"10":[["+",{"fg":2}],["                       ",{}],["     str))",{"fg":2}],["                                                                                                                                                   ",{}]],"11":[["+",{"fg":2}],["               ",{}],["       str))))",{"fg":2}],["                                                                                                                                                       ",{}]],"12":[["+",{"fg":2}],["       ",{}],["(if (equal? str \"--\")",{"fg":2}],["                                                                                                                                                        ",{}]],"13":[["+",{"fg":2}],["       ",{}],["    (syntax-deprecation-warning port str \"\"))",{"fg":2}],["                                                                                                                                ",{}]],"14":[["+",{"fg":2}],["       ",{}],["(string->symbol str))))",{"fg":2}],["                                                                                                                                                      ",{}]],"15":[["                                                                                                                                                                                     ",{}]],"16":[[" (define (accum-digits c pred port lz)                                                                                                                                               ",{}]],"17":[["   (if (and (not lz) (eqv? c #\\_))                                                                                                                                                   ",{}]],"18":[["@@ -508,11 +511,12 @@",{"fg":6}],["                                                                                                                                                                ",{}]],"19":[["       #\\newline \"WARNING: deprecated syntax \\\"\" what \"\\\"\"                                                                                                                           ",{}]],"20":[["       (if (eq? current-filename 'none)                                                                                                                                              ",{}]],"21":[["          \"\"                                                                                                                                                                         ",{}]],"22":[["-         (string \" at \" current-filename \":\" (input-port-line (ts:port s))))",{"fg":1}],["                                                                                                        ",{}]],"23":[["+",{"fg":2}],["       ",{}],["  (string \" at \" current-filename \":\" (input-port-line (if (port? s) s (ts:port s)))))",{"fg":2}],["                                                                                       ",{}]],"24":[["       \".\"                                                                                                                                                                           ",{}]],"25":[["       (if (equal? instead \"\")                                                                                                                                                       ",{}]],"26":[["          \"\"                                                                                                                                                                         ",{}]],"27":[["-         (string #\\newline \"Use \\\"\" instead \"\\\" instead.\" #\\newline))))))",{"fg":1}],["                                                                                                           ",{}]],"28":[["+",{"fg":2}],["       ",{}],["  (string #\\newline \"Use \\\"\" instead \"\\\" instead.\"))",{"fg":2}],["                                                                                                                         ",{}]],"29":[["+      #\\newline))))",{"fg":2}],["                                                                                                                                                                 ",{}]],"30":[["                                                                                                                                                                                     ",{}]],"31":[[" ;; --- parser ---                                                                                                                                                                   ",{}]],"32":[["                                                                                                                                                                                     ",{}]],"33":[["diff --git a/src/julia.h b/src/julia.h",{"bold":true}],["                                                                                                                                               ",{}]],"34":[["index 9c68085..c3879f7 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"35":[["--- a/src/julia.h",{"bold":true}],["                                                                                                                                                                    ",{}]],"36":[["+++ b/src/julia.h",{"bold":true}],["                                                                                                                                                                    ",{}]],"37":[["@@ -806,6 +806,7 @@",{"fg":6}],[" STATIC_INLINE jl_function_t *jl_get_function(jl_module_t *m, const char *name)                                                                                   ",{}]],"38":[[" }                                                                                                                                                                                   ",{}]],"39":[[" DLLEXPORT void jl_module_run_initializer(jl_module_t *m);                                                                                                                           ",{}]],"40":[[" jl_function_t *jl_module_call_func(jl_module_t *m);                                                                                                                                 ",{}]],"41":[["+int jl_is_submodule(jl_module_t *child, jl_module_t *parent);",{"fg":2}],["                                                                                                                       ",{}]],"42":[["                                                                                                                                                                                     ",{}]],"43":[[" // eq hash tables                                                                                                                                                                   ",{}]],"44":[[" DLLEXPORT jl_array_t *jl_eqtable_put(jl_array_t *h, void *key, void *val);                                                                                                          ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.423289,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0005290000000000001,{"lines":{"0":[["diff --git a/src/module.c b/src/module.c",{"bold":true}],["                                                                                                                                             ",{}]],"1":[["index ade9972..28c7ba4 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"2":[["--- a/src/module.c",{"bold":true}],["                                                                                                                                                                   ",{}]],"3":[["+++ b/src/module.c",{"bold":true}],["                                                                                                                                                                   ",{}]],"4":[["@@ -452,6 +452,17 @@",{"fg":6}],[" jl_function_t *jl_module_call_func(jl_module_t *m)                                                                                                              ",{}]],"5":[["     return m->call_func;                                                                                                                                                            ",{}]],"6":[[" }                                                                                                                                                                                   ",{}]],"7":[["                                                                                                                                                                                     ",{}]],"8":[["+int jl_is_submodule(jl_module_t *child, jl_module_t *parent)",{"fg":2}],["                                                                                                                        ",{}]],"9":[["+{",{"fg":2}],["                                                                                                                                                                                   ",{}]],"10":[["+    while (1) {",{"fg":2}],["                                                                                                                                                                     ",{}]],"11":[["+        if (parent == child)",{"fg":2}],["                                                                                                                                                        ",{}]],"12":[["+            return 1;",{"fg":2}],["                                                                                                                                                               ",{}]],"13":[["+        if (child == NULL || child == child->parent)",{"fg":2}],["                                                                                                                                ",{}]],"14":[["+            return 0;",{"fg":2}],["                                                                                                                                                               ",{}]],"15":[["+        child = child->parent;",{"fg":2}],["                                                                                                                                                      ",{}]],"16":[["+    }",{"fg":2}],["                                                                                                                                                                               ",{}]],"17":[["+}",{"fg":2}],["                                                                                                                                                                                   ",{}]],"18":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"19":[[" #ifdef __cplusplus                                                                                                                                                                  ",{}]],"20":[[" }                                                                                                                                                                                   ",{}]],"21":[[" #endif                                                                                                                                                                              ",{}]],"22":[["diff --git a/test/base64.jl b/test/base64.jl",{"bold":true}],["                                                                                                                                         ",{}]],"23":[["index 5c360b6..0ec6ac9 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"24":[["--- a/test/base64.jl",{"bold":true}],["                                                                                                                                                                 ",{}]],"25":[["+++ b/test/base64.jl",{"bold":true}],["                                                                                                                                                                 ",{}]],"26":[["@@ -9,16 +9,17 @@",{"fg":6}],[" ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=\"\"\"                                                                                                        ",{}]],"27":[["                                                                                                                                                                                     ",{}]],"28":[[" # Encode and decode                                                                                                                                                                 ",{}]],"29":[[" fname = tempname()                                                                                                                                                                  ",{}]],"30":[["-f = open(fname, \"w\")",{"fg":1}],["                                                                                                                                                                ",{}]],"31":[["-opipe = Base64EncodePipe(f)",{"fg":1}],["                                                                                                                                                         ",{}]],"32":[["-write(opipe,inputText)",{"fg":1}],["                                                                                                                                                              ",{}]],"33":[["-close(opipe)",{"fg":1}],["                                                                                                                                                                        ",{}]],"34":[["-close(f)",{"fg":1}],["                                                                                                                                                                            ",{}]],"35":[["-f = open(fname, \"r\")",{"fg":1}],["                                                                                                                                                                ",{}]],"36":[["-ipipe = Base64DecodePipe(f)",{"fg":1}],["                                                                                                                                                         ",{}]],"37":[["-@test  readall(ipipe) == inputText",{"fg":1}],["                                                                                                                                                  ",{}]],"38":[["-close(ipipe)",{"fg":1}],["                                                                                                                                                                        ",{}]],"39":[["-close(f)",{"fg":1}],["                                                                                                                                                                            ",{}]],"40":[["+open(fname, \"w\") do f",{"fg":2}],["                                                                                                                                                               ",{}]],"41":[["+    opipe = Base64EncodePipe(f)",{"fg":2}],["                                                                                                                                                     ",{}]],"42":[["+    write(opipe,inputText)",{"fg":2}],["                                                                                                                                                          ",{}]],"43":[["+    close(opipe)",{"fg":2}],["                                                                                                                                                                    ",{}]],"44":[["+end",{"fg":2}],["                                                                                                                                                                                 ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.199422,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0006820000000000001,{"lines":{"0":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"1":[["+open(fname, \"r\") do f",{"fg":2}],["                                                                                                                                                               ",{}]],"2":[["+    ipipe = Base64DecodePipe(f)",{"fg":2}],["                                                                                                                                                     ",{}]],"3":[["+    @test readall(ipipe) == inputText",{"fg":2}],["                                                                                                                                               ",{}]],"4":[["+    close(ipipe)",{"fg":2}],["                                                                                                                                                                    ",{}]],"5":[["+end",{"fg":2}],["                                                                                                                                                                                 ",{}]],"6":[[" rm(fname)                                                                                                                                                                           ",{}]],"8":[[" # Encode to string and decode                                                                                                                                                       ",{}]],"9":[["diff --git a/test/bigint.jl b/test/bigint.jl",{"bold":true}],["                                                                                                                                         ",{}]],"10":[["index 8463edf..3393d0a 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"11":[["--- a/test/bigint.jl",{"bold":true}],["                                                                                                                                                                 ",{}]],"12":[["+++ b/test/bigint.jl",{"bold":true}],["                                                                                                                                                                 ",{}]],"13":[["@@ -164,6 +164,8 @@",{"fg":6}],[" end                                                                                                                                                              ",{}]],"14":[[" @test lcm(BigInt(48), BigInt(180)) == 720                                                                                                                                           ",{}]],"15":[["                                                                                                                                                                                     ",{}]],"16":[[" @test factorial(BigInt(40)) == BigInt(\"815915283247897734345611269596115894272000000000\")                                                                                           ",{}]],"17":[["+@test binomial(BigInt(1), -1) == BigInt(0)",{"fg":2}],["                                                                                                                                          ",{}]],"18":[["+@test binomial(BigInt(1), 2)  == BigInt(0)",{"fg":2}],["                                                                                                                                          ",{}]],"19":[[" @test binomial(BigInt(-53), 42) == BigInt(\"959509335087854414441273718\")                                                                                                            ",{}]],"20":[[" @test binomial(BigInt(113), BigInt(42)) == BigInt(\"18672199984318438125634054194360\")                                                                                               ",{}]],"21":[["                                                                                                                                                                                     ",{}]],"22":[["@@ -252,7 +254,7 @@",{"fg":6}],[" n = bigfib(1000001)                                                                                                                                              ",{}]],"23":[[" s = string(n)                                                                                                                                                                       ",{}]],"24":[[" @test length(s) == 208988                                                                                                                                                           ",{}]],"25":[[" @test endswith(s, \"359244926937501\")                                                                                                                                                ",{}]],"26":[["-@test beginswith(s, \"316047687386689\")",{"fg":1}],["                                                                                                                                              ",{}]],"27":[["+@test startswith(s, \"316047687386689\")",{"fg":2}],["                                                                                                                                              ",{}]],"28":[["                                                                                                                                                                                     ",{}]],"29":[[" # serialization (#5133)                                                                                                                                                             ",{}]],"30":[[" let                                                                                                                                                                                 ",{}]],"31":[["diff --git a/test/combinatorics.jl b/test/combinatorics.jl",{"bold":true}],["                                                                                                                           ",{}]],"32":[["index dec8887..c6d3c8c 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"33":[["--- a/test/combinatorics.jl",{"bold":true}],["                                                                                                                                                          ",{}]],"34":[["+++ b/test/combinatorics.jl",{"bold":true}],["                                                                                                                                                          ",{}]],"35":[["@@ -1,18 +1,37 @@",{"fg":6}],["                                                                                                                                                                    ",{}]],"36":[["-@test factorial(7) == 5040",{"fg":1}],["                                                                                                                                                          ",{}]],"37":[["-@test factorial(7,3) == 7*6*5*4",{"fg":1}],["                                                                                                                                                     ",{}]],"38":[["+@test binomial(5,-1) == 0",{"fg":2}],["                                                                                                                                                           ",{}]],"39":[["+@test binomial(5,10) == 0",{"fg":2}],["                                                                                                                                                           ",{}]],"40":[[" @test binomial(5,3) == 10                                                                                                                                                           ",{}]],"41":[["+@test binomial(2,1) == 2",{"fg":2}],["                                                                                                                                                            ",{}]],"42":[["+@test binomial(1,2) == 0",{"fg":2}],["                                                                                                                                                            ",{}]],"43":[["+@test binomial(-2,1) == -2 # let's agree",{"fg":2}],["                                                                                                                                            ",{}]],"44":[["+@test binomial(2,-1) == 0",{"fg":2}],["                                                                                                                                                           ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.57506,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0009050000000000001,{"lines":{"1":[["+#Issue 6154",{"fg":2}],["                                                                                                                                                                         ",{}]],"2":[["+@test binomial(int32(34), int32(15)) == binomial(BigInt(34), BigInt(15)) == 1855967520",{"fg":2}],["                                                                                              ",{}]],"3":[["+@test binomial(int64(67), int64(29)) == binomial(BigInt(67), BigInt(29)) == 7886597962249166160",{"fg":2}],["                                                                                     ",{}]],"4":[["+@test binomial(int128(131), int128(62)) == binomial(BigInt(131), BigInt(62)) == 157311720980559117816198361912717812000",{"fg":2}],["                                                             ",{}]],"5":[["+@test_throws InexactError binomial(int64(67), int64(30))",{"fg":2}],["                                                                                                                            ",{}]],"6":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"7":[[" p = shuffle([1:1000])                                                                                                                                                               ",{}]],"8":[[" @test isperm(p)                                                                                                                                                                     ",{}]],"9":[[" @test all(invperm(invperm(p)) .== p)                                                                                                                                                ",{}]],"10":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"11":[[" push!(p, 1)                                                                                                                                                                         ",{}]],"12":[[" @test !isperm(p)                                                                                                                                                                    ",{}]],"13":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"14":[[" a = randcycle(10)                                                                                                                                                                   ",{}]],"15":[[" @test ipermute!(permute!([1:10], a),a) == [1:10]                                                                                                                                    ",{}]],"16":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"17":[["+@test collect(combinations(\"abc\",3)) == [\"abc\"]",{"fg":2}],["                                                                                                                                     ",{}]],"18":[[" @test collect(combinations(\"abc\",2)) == [\"ab\",\"ac\",\"bc\"]                                                                                                                            ",{}]],"19":[["+@test collect(combinations(\"abc\",1)) == [\"a\",\"b\",\"c\"]",{"fg":2}],["                                                                                                                               ",{}]],"20":[["+@test collect(combinations(\"abc\",0)) == [\"\"]",{"fg":2}],["                                                                                                                                        ",{}]],"21":[[" @test collect(permutations(\"abc\")) == [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]                                                                                                         ",{}]],"22":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"23":[[" @test collect(filter(x->(iseven(x[1])),permutations([1,2,3]))) == Any[[2,1,3],[2,3,1]]                                                                                              ",{}]],"24":[[" @test collect(filter(x->(iseven(x[3])),permutations([1,2,3]))) == Any[[1,3,2],[3,1,2]]                                                                                              ",{}]],"25":[[" @test collect(filter(x->(iseven(x[1])),combinations([1,2,3],2))) == Any[[2,3]]                                                                                                      ",{}]],"26":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"27":[[" @test collect(partitions(4)) ==  Any[[4], [3,1], [2,2], [2,1,1], [1,1,1,1]]                                                                                                         ",{}]],"28":[[" @test collect(partitions(8,3)) == Any[[6,1,1], [5,2,1], [4,3,1], [4,2,2], [3,3,2]]                                                                                                  ",{}]],"29":[[" @test collect(partitions(8, 1)) == Any[[8]]                                                                                                                                         ",{}]],"30":[["@@ -34,18 +53,16 @@",{"fg":6}],[" for n = 0:7, k = 1:factorial(n)                                                                                                                                  ",{}]],"31":[["     @test nthperm(p) == k                                                                                                                                                           ",{}]],"32":[[" end                                                                                                                                                                                 ",{}]],"33":[["                                                                                                                                                                                     ",{}]],"34":[["-#Issue 6154",{"fg":1}],["                                                                                                                                                                         ",{}]],"35":[["-@test binomial(int32(34), int32(15)) == binomial(BigInt(34), BigInt(15)) == 1855967520",{"fg":1}],["                                                                                              ",{}]],"36":[["-@test binomial(int64(67), int64(29)) == binomial(BigInt(67), BigInt(29)) == 7886597962249166160",{"fg":1}],["                                                                                     ",{}]],"37":[["-@test binomial(int128(131), int128(62)) == binomial(BigInt(131), BigInt(62)) == 157311720980559117816198361912717812000",{"fg":1}],["                                                             ",{}]],"38":[["-",{"fg":1}],["                                                                                                                                                                                    ",{}]],"39":[["-# issue #6579",{"fg":1}],["                                                                                                                                                                       ",{}]],"40":[["+@test factorial(7) == 5040",{"fg":2}],["                                                                                                                                                          ",{}]],"41":[["+@test factorial(7,3) == 7*6*5*4",{"fg":2}],["                                                                                                                                                     ",{}]],"42":[[" @test factorial(0) == 1                                                                                                                                                             ",{}]],"43":[["+@test_throws DomainError factorial(-1)",{"fg":2}],["                                                                                                                                              ",{}]],"44":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.5192329999999999,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0008619999999999999,{"lines":{"0":[[" @test factorial(int64(20)) == 2432902008176640000                                                                                                                                   ",{}]],"1":[["+# issue #6579",{"fg":2}],["                                                                                                                                                                       ",{}]],"2":[[" @test_throws OverflowError factorial(int64(21))                                                                                                                                     ",{}]],"3":[["-@test_throws DomainError factorial(-1)",{"fg":1}],["                                                                                                                                              ",{}]],"4":[[" @test typeof(factorial(int8(2))) == typeof(factorial(int8(1)))                                                                                                                      ",{}]],"5":[[" if Int === Int32                                                                                                                                                                    ",{}]],"6":[["-@test factorial(int32(12)) === int32(479001600)",{"fg":1}],["                                                                                                                                     ",{}]],"7":[["-@test_throws OverflowError factorial(int32(13))",{"fg":1}],["                                                                                                                                     ",{}]],"8":[["+    @test factorial(int32(12)) === int32(479001600)",{"fg":2}],["                                                                                                                                 ",{}]],"9":[["+    @test_throws OverflowError factorial(int32(13))",{"fg":2}],["                                                                                                                                 ",{}]],"10":[[" end                                                                                                                                                                                 ",{}]],"11":[["diff --git a/test/complex.jl b/test/complex.jl",{"bold":true}],["                                                                                                                                       ",{}]],"12":[["index 1fcd6e0..42a6117 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"13":[["--- a/test/complex.jl",{"bold":true}],["                                                                                                                                                                ",{}]],"14":[["+++ b/test/complex.jl",{"bold":true}],["                                                                                                                                                                ",{}]],"15":[["@@ -197,6 +197,9 @@",{"fg":6}],[" end                                                                                                                                                              ",{}]],"16":[[" @test isequal(complex(-0.0,-0.0)^complex(-0.0, 0.0), complex(1.0, 0.0))                                                                                                             ",{}]],"17":[[" @test isequal(complex(-0.0,-0.0)^complex(-0.0,-0.0), complex(1.0, 0.0))                                                                                                             ",{}]],"18":[["                                                                                                                                                                                     ",{}]],"19":[["+@test_approx_eq complex(0.0,1.0)^complex(2.0,0) complex(-1.0, 0.0)",{"fg":2}],["                                                                                                                  ",{}]],"20":[["+@test_approx_eq complex(1.0,2.0)^complex(3.0,0) complex(-11.0, -2.0)",{"fg":2}],["                                                                                                                ",{}]],"21":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"22":[[" # sinh: has properties                                                                                                                                                              ",{}]],"23":[[" #  sinh(conj(z)) = conj(sinh(z))                                                                                                                                                    ",{}]],"24":[[" #  sinh(-z) = -sinh(z)                                                                                                                                                              ",{}]],"25":[["@@ -720,7 +723,26 @@",{"fg":6}],[" end                                                                                                                                                             ",{}]],"26":[["                                                                                                                                                                                     ",{}]],"27":[[" # inv                                                                                                                                                                               ",{}]],"28":[[" @test inv(1e300+0im) == 1e-300 - 0.0im                                                                                                                                              ",{}]],"29":[["+@test inv(0+1e300im) == 0.0 - 1e-300im",{"fg":2}],["                                                                                                                                              ",{}]],"30":[["                                                                                                                                                                                     ",{}]],"31":[[" # issue #7904                                                                                                                                                                       ",{}]],"32":[[" @test log10(10+0im) === 1.0 + 0.0im                                                                                                                                                 ",{}]],"33":[[" @test log2(2+0im) === 1.0 + 0.0im                                                                                                                                                   ",{}]],"34":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"35":[["+# cis",{"fg":2}],["                                                                                                                                                                               ",{}]],"36":[["+@test_approx_eq cis(0.0+1.0im) 0.367879441171442321595523770161460867445811131031767834507836+0.0im",{"fg":2}],["                                                                                 ",{}]],"37":[["+@test_approx_eq cis(1.0+0.0im) 0.54030230586813971740093660744297660373231042061+0.84147098480789650665250232163029899962256306079im",{"fg":2}],["                                                ",{}]],"38":[["+@test_approx_eq cis(pi) -1.0+0.0im",{"fg":2}],["                                                                                                                                                  ",{}]],"39":[["+@test_approx_eq cis(pi/2) 0.0+1.0im",{"fg":2}],["                                                                                                                                                 ",{}]],"40":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"41":[["+# exp2",{"fg":2}],["                                                                                                                                                                              ",{}]],"42":[["+@test exp2(0.0+0.0im) == 1.0+0.0im",{"fg":2}],["                                                                                                                                                  ",{}]],"43":[["+@test exp2(1.0+0.0im) == 2.0+0.0im",{"fg":2}],["                                                                                                                                                  ",{}]],"44":[["+#wolframalpha",{"fg":2}],["                                                                                                                                                                       ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.630893,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0005319999999999999,{"lines":{"0":[["+@test_approx_eq exp2(1.0+3.0im) -0.9739888359315627962096198412+1.74681016354974281701922im",{"fg":2}],["                                                                                         ",{}]],"1":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"2":[["+# exp10",{"fg":2}],["                                                                                                                                                                             ",{}]],"3":[["+@test exp10(0.0+0.0im) == 1.0+0.0im",{"fg":2}],["                                                                                                                                                 ",{}]],"4":[["+@test exp10(1.0+0.0im) == 10.0+0.0im",{"fg":2}],["                                                                                                                                                ",{}]],"5":[["+#wolframalpha",{"fg":2}],["                                                                                                                                                                       ",{}]],"6":[["+@test_approx_eq exp10(1.0+2.0im) -1.0701348355877020772086517528518239460495529361-9.9425756941378968736161937190915602112878340717im",{"fg":2}],["                                               ",{}]],"7":[["diff --git a/test/core.jl b/test/core.jl",{"bold":true}],["                                                                                                                                             ",{}]],"8":[["index 4fc849e..bf8689a 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"9":[["--- a/test/core.jl",{"bold":true}],["                                                                                                                                                                   ",{}]],"10":[["+++ b/test/core.jl",{"bold":true}],["                                                                                                                                                                   ",{}]],"11":[["@@ -502,6 +502,16 @@",{"fg":6}],[" begin                                                                                                                                                           ",{}]],"12":[["     @test is(g(a),a)                                                                                                                                                                ",{}]],"13":[[" end                                                                                                                                                                                 ",{}]],"14":[["                                                                                                                                                                                     ",{}]],"15":[["+# dispatch using Val{T}. See discussion in #9452 for instances vs types",{"fg":2}],["                                                                                                             ",{}]],"16":[["+begin",{"fg":2}],["                                                                                                                                                                               ",{}]],"17":[["+    local firstlast",{"fg":2}],["                                                                                                                                                                 ",{}]],"18":[["+    firstlast(::Type{Val{true}}) = \"First\"",{"fg":2}],["                                                                                                                                          ",{}]],"19":[["+    firstlast(::Type{Val{false}}) = \"Last\"",{"fg":2}],["                                                                                                                                          ",{}]],"20":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"21":[["+    @test firstlast(Val{true}) == \"First\"",{"fg":2}],["                                                                                                                                           ",{}]],"22":[["+    @test firstlast(Val{false}) == \"Last\"",{"fg":2}],["                                                                                                                                           ",{}]],"23":[["+end",{"fg":2}],["                                                                                                                                                                                 ",{}]],"24":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"25":[[" # try/finally                                                                                                                                                                       ",{}]],"26":[[" begin                                                                                                                                                                               ",{}]],"27":[["     after = 0                                                                                                                                                                       ",{}]],"28":[["@@ -2022,9 +2032,11 @@",{"fg":6}],[" let x = [1,2,3]                                                                                                                                               ",{}]],"29":[[" end                                                                                                                                                                                 ",{}]],"31":[[" # sig 2 is SIGINT per the POSIX.1-1990 standard                                                                                                                                     ",{}]],"32":[["-ccall(:jl_exit_on_sigint, Void, (Cint,), 0)",{"fg":1}],["                                                                                                                                         ",{}]],"33":[["-@test_throws InterruptException ccall(:raise, Void, (Cint,), 2)",{"fg":1}],["                                                                                                                     ",{}]],"34":[["-ccall(:jl_exit_on_sigint, Void, (Cint,), 1)",{"fg":1}],["                                                                                                                                         ",{}]],"35":[["+if Base.is_unix(OS_NAME)",{"fg":2}],["                                                                                                                                                            ",{}]],"36":[["+    ccall(:jl_exit_on_sigint, Void, (Cint,), 0)",{"fg":2}],["                                                                                                                                     ",{}]],"37":[["+    @test_throws InterruptException ccall(:raise, Void, (Cint,), 2)",{"fg":2}],["                                                                                                                 ",{}]],"38":[["+    ccall(:jl_exit_on_sigint, Void, (Cint,), 1)",{"fg":2}],["                                                                                                                                     ",{}]],"39":[["+end",{"fg":2}],["                                                                                                                                                                                 ",{}]],"40":[["                                                                                                                                                                                     ",{}]],"41":[[" # pull request #9534                                                                                                                                                                ",{}]],"42":[[" @test try; a,b,c = 1,2; catch ex; (ex::BoundsError).a === (1,2) && ex.i == 3; end                                                                                                   ",{}]],"43":[["diff --git a/test/file.jl b/test/file.jl",{"bold":true}],["                                                                                                                                             ",{}]],"44":[["index 8585821..313fa51 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.17592,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.0005510000000000001,{"lines":{"0":[["--- a/test/file.jl",{"bold":true}],["                                                                                                                                                                   ",{}]],"1":[["+++ b/test/file.jl",{"bold":true}],["                                                                                                                                                                   ",{}]],"2":[["@@ -199,7 +199,7 @@",{"fg":6}],[" close(s)                                                                                                                                                         ",{}]],"3":[[" s = open(file, \"r\")                                                                                                                                                                 ",{}]],"4":[[" str = readline(s)                                                                                                                                                                   ",{}]],"5":[[" close(s)                                                                                                                                                                            ",{}]],"6":[["-@test beginswith(str, \"Hellx World\")",{"fg":1}],["                                                                                                                                                ",{}]],"7":[["+@test startswith(str, \"Hellx World\")",{"fg":2}],["                                                                                                                                                ",{}]],"8":[[" c=nothing; gc(); gc(); # cause munmap finalizer to run & free resources                                                                                                             ",{}]],"9":[["                                                                                                                                                                                     ",{}]],"10":[[" s = open(file, \"w\")                                                                                                                                                                 ",{}]],"11":[["@@ -261,12 +261,12 @@",{"fg":6}],[" close(s)                                                                                                                                                       ",{}]],"12":[[" s = open(file)                                                                                                                                                                      ",{}]],"13":[[" mark(s)                                                                                                                                                                             ",{}]],"14":[[" str = readline(s)                                                                                                                                                                   ",{}]],"15":[["-@test beginswith(str, \"Marked!\")",{"fg":1}],["                                                                                                                                                    ",{}]],"16":[["+@test startswith(str, \"Marked!\")",{"fg":2}],["                                                                                                                                                    ",{}]],"17":[[" @test ismarked(s)                                                                                                                                                                   ",{}]],"18":[[" reset(s)                                                                                                                                                                            ",{}]],"19":[[" @test !ismarked(s)                                                                                                                                                                  ",{}]],"20":[[" str = readline(s)                                                                                                                                                                   ",{}]],"21":[["-@test beginswith(str, \"Marked!\")",{"fg":1}],["                                                                                                                                                    ",{}]],"22":[["+@test startswith(str, \"Marked!\")",{"fg":2}],["                                                                                                                                                    ",{}]],"23":[[" mark(s)                                                                                                                                                                             ",{}]],"24":[[" @test readline(s) == \"Hello world!\\n\"                                                                                                                                               ",{}]],"25":[[" @test ismarked(s)                                                                                                                                                                   ",{}]],"26":[["diff --git a/test/intfuncs.jl b/test/intfuncs.jl",{"bold":true}],["                                                                                                                                     ",{}]],"27":[["index 8700b60..8d1fce1 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"28":[["--- a/test/intfuncs.jl",{"bold":true}],["                                                                                                                                                               ",{}]],"29":[["+++ b/test/intfuncs.jl",{"bold":true}],["                                                                                                                                                               ",{}]],"30":[["@@ -1,5 +1,52 @@",{"fg":6}],["                                                                                                                                                                     ",{}]],"31":[["-# issue #8266",{"fg":1}],["                                                                                                                                                                       ",{}]],"32":[["+@test gcd(3, 5) == 1",{"fg":2}],["                                                                                                                                                                ",{}]],"33":[["+@test gcd(3, 15) == 3",{"fg":2}],["                                                                                                                                                               ",{}]],"34":[["+@test gcd(0, 15) == 15",{"fg":2}],["                                                                                                                                                              ",{}]],"35":[["+@test gcd(3, -15) == 3",{"fg":2}],["                                                                                                                                                              ",{}]],"36":[["+@test gcd(-3, -15) == 3",{"fg":2}],["                                                                                                                                                             ",{}]],"37":[["+@test gcd(0, 0) == 0",{"fg":2}],["                                                                                                                                                                ",{}]],"38":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"39":[["+@test gcd(2, 4, 6) == 2",{"fg":2}],["                                                                                                                                                             ",{}]],"40":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"41":[["+@test typeof(gcd(int32(3), int32(15))) == Int32",{"fg":2}],["                                                                                                                                     ",{}]],"42":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"43":[["+@test lcm(2, 3) == 6",{"fg":2}],["                                                                                                                                                                ",{}]],"44":[["+@test lcm(4, 6) == 12",{"fg":2}],["                                                                                                                                                               ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.367395,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.000576,{"lines":{"0":[["+@test lcm(3, 0) == 0",{"fg":2}],["                                                                                                                                                                ",{}]],"1":[["+@test lcm(0, 0) == 0",{"fg":2}],["                                                                                                                                                                ",{}]],"2":[["+@test lcm(4, -6) == 12",{"fg":2}],["                                                                                                                                                              ",{}]],"3":[["+@test lcm(-4, -6) == 12",{"fg":2}],["                                                                                                                                                             ",{}]],"4":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"5":[["+@test lcm(2, 4, 6) == 12",{"fg":2}],["                                                                                                                                                            ",{}]],"6":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"7":[["+@test typeof(lcm(int32(2), int32(3))) == Int32",{"fg":2}],["                                                                                                                                      ",{}]],"8":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"9":[["+@test gcdx(5, 12) == (1, 5, -2)",{"fg":2}],["                                                                                                                                                     ",{}]],"10":[["+@test gcdx(5, -12) == (1, 5, 2)",{"fg":2}],["                                                                                                                                                     ",{}]],"11":[["+@test gcdx(-25, -4) == (1, -1, 6)",{"fg":2}],["                                                                                                                                                   ",{}]],"12":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"13":[["+@test invmod(6, 31) == 26",{"fg":2}],["                                                                                                                                                           ",{}]],"14":[["+@test invmod(-1, 3) == 2",{"fg":2}],["                                                                                                                                                            ",{}]],"15":[["+@test invmod(-1, -3) == 2",{"fg":2}],["                                                                                                                                                           ",{}]],"16":[["+@test_throws ErrorException invmod(0, 3)",{"fg":2}],["                                                                                                                                            ",{}]],"17":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"18":[["+@test powermod(2, 3, 5) == 3",{"fg":2}],["                                                                                                                                                        ",{}]],"19":[["+@test powermod(2, 3, -5) == -2",{"fg":2}],["                                                                                                                                                      ",{}]],"20":[["+@test_throws DomainError powermod(2, -3, 5)",{"fg":2}],["                                                                                                                                         ",{}]],"21":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"22":[["+@test nextpow2(3) == 4",{"fg":2}],["                                                                                                                                                              ",{}]],"23":[["+@test nextpow(2, 3) == 4",{"fg":2}],["                                                                                                                                                            ",{}]],"24":[["+@test nextpow(2, 4) == 4",{"fg":2}],["                                                                                                                                                            ",{}]],"25":[["+@test nextpow(2, 7) == 8",{"fg":2}],["                                                                                                                                                            ",{}]],"26":[["+@test_throws DomainError nextpow(0, 3)",{"fg":2}],["                                                                                                                                              ",{}]],"27":[["+@test_throws DomainError nextpow(3, 0)",{"fg":2}],["                                                                                                                                              ",{}]],"28":[["                                                                                                                                                                                     ",{}]],"29":[["+@test prevpow2(3) == 2",{"fg":2}],["                                                                                                                                                              ",{}]],"30":[["+@test prevpow(2, 4) == 4",{"fg":2}],["                                                                                                                                                            ",{}]],"31":[["+@test prevpow(2, 5) == 4",{"fg":2}],["                                                                                                                                                            ",{}]],"32":[["+@test_throws DomainError prevpow(0, 3)",{"fg":2}],["                                                                                                                                              ",{}]],"33":[["+@test_throws DomainError prevpow(0, 3)",{"fg":2}],["                                                                                                                                              ",{}]],"34":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"35":[["+# issue #8266",{"fg":2}],["                                                                                                                                                                       ",{}]],"36":[[" @test ndigits(-15, 10) == 2                                                                                                                                                         ",{}]],"37":[[" @test ndigits(-15, -10) == 2                                                                                                                                                        ",{}]],"38":[[" @test ndigits(-1, 10) == 1                                                                                                                                                          ",{}]],"39":[["@@ -14,3 +61,28 @@",{"fg":6}],["                                                                                                                                                                   ",{}]],"40":[["                                                                                                                                                                                     ",{}]],"41":[[" @test ndigits(146, -3) == 5                                                                                                                                                         ",{}]],"42":[["                                                                                                                                                                                     ",{}]],"43":[["+@test bin(3) == \"11\"",{"fg":2}],["                                                                                                                                                                ",{}]],"44":[["+@test bin(3, 2) == \"11\"",{"fg":2}],["                                                                                                                                                             ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.5913119999999999,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.000656,{"lines":{"0":[["+@test bin(3, 3) == \"011\"",{"fg":2}],["                                                                                                                                                            ",{}]],"1":[["+@test bin(-3) == \"-11\"",{"fg":2}],["                                                                                                                                                              ",{}]],"2":[["+@test bin(-3, 3) == \"-011\"",{"fg":2}],["                                                                                                                                                          ",{}]],"3":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"4":[["+@test oct(9) == \"11\"",{"fg":2}],["                                                                                                                                                                ",{}]],"5":[["+@test oct(-9) == \"-11\"",{"fg":2}],["                                                                                                                                                              ",{}]],"7":[["+@test dec(121) == \"121\"",{"fg":2}],["                                                                                                                                                             ",{}]],"9":[["+@test hex(12) == \"c\"",{"fg":2}],["                                                                                                                                                                ",{}]],"10":[["+@test hex(-12, 3) == \"-00c\"",{"fg":2}],["                                                                                                                                                         ",{}]],"11":[["+@test num2hex(1243) == (Int == Int32 ? \"000004db\" : \"00000000000004db\")",{"fg":2}],["                                                                                                             ",{}]],"13":[["+@test base(2, 5, 7) == \"0000101\"",{"fg":2}],["                                                                                                                                                    ",{}]],"14":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"15":[["+@test bits(1035) == (Int == Int32 ? \"00000000000000000000010000001011\" :",{"fg":2}],["                                                                                                            ",{}]],"16":[["+    \"0000000000000000000000000000000000000000000000000000010000001011\")",{"fg":2}],["                                                                                                             ",{}]],"18":[["+@test digits(4, 2) == [0, 0, 1]",{"fg":2}],["                                                                                                                                                     ",{}]],"19":[["+@test digits(5, 3) == [2, 1]",{"fg":2}],["                                                                                                                                                        ",{}]],"20":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"21":[["+@test isqrt(4) == 2",{"fg":2}],["                                                                                                                                                                 ",{}]],"22":[["+@test isqrt(5) == 2",{"fg":2}],["                                                                                                                                                                 ",{}]],"23":[["diff --git a/test/parallel.jl b/test/parallel.jl",{"bold":true}],["                                                                                                                                     ",{}]],"24":[["index 7b0b939..6f57c79 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"25":[["--- a/test/parallel.jl",{"bold":true}],["                                                                                                                                                               ",{}]],"26":[["+++ b/test/parallel.jl",{"bold":true}],["                                                                                                                                                               ",{}]],"27":[["@@ -33,11 +33,11 @@",{"fg":6}],[" dims = (20,20,20)                                                                                                                                                ",{}]],"29":[[" @linux_only begin                                                                                                                                                                   ",{}]],"30":[["     S = SharedArray(Int64, dims)                                                                                                                                                    ",{}]],"31":[["-    @test beginswith(S.segname, \"/jl\")",{"fg":1}],["                                                                                                                                              ",{}]],"32":[["+    @test startswith(S.segname, \"/jl\")",{"fg":2}],["                                                                                                                                              ",{}]],"33":[["     @test !ispath(\"/dev/shm\" * S.segname)                                                                                                                                           ",{}]],"34":[["                                                                                                                                                                                     ",{}]],"35":[["     S = SharedArray(Int64, dims; pids=[id_other])                                                                                                                                   ",{}]],"36":[["-    @test beginswith(S.segname, \"/jl\")",{"fg":1}],["                                                                                                                                              ",{}]],"37":[["+    @test startswith(S.segname, \"/jl\")",{"fg":2}],["                                                                                                                                              ",{}]],"38":[["     @test !ispath(\"/dev/shm\" * S.segname)                                                                                                                                           ",{}]],"39":[[" end                                                                                                                                                                                 ",{}]],"41":[["@@ -107,7 +107,7 @@",{"fg":6}],[" d[5,1:2:4,8] = 19                                                                                                                                                ",{}]],"42":[[" AA = rand(4,2)                                                                                                                                                                      ",{}]],"43":[[" A = convert(SharedArray, AA)                                                                                                                                                        ",{}]],"44":[[" B = convert(SharedArray, AA')                                                                                                                                                       ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.37553,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.000696,{"lines":{"0":[["-@test B*A == AA'*AA",{"fg":1}],["                                                                                                                                                                 ",{}]],"1":[["+@test B*A == ctranspose(AA)*AA",{"fg":2}],["                                                                                                                                                      ",{}]],"2":[["                                                                                                                                                                                     ",{}]],"3":[[" d=SharedArray(Int64, (10,10); init = D->fill!(D.loc_subarr_1d, myid()), pids=[id_me, id_other])                                                                                     ",{}]],"4":[[" d2 = map(x->1, d)                                                                                                                                                                   ",{}]],"5":[["diff --git a/test/sparse.jl b/test/sparse.jl",{"bold":true}],["                                                                                                                                         ",{}]],"6":[["index 009d764..c18fd95 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"7":[["--- a/test/sparse.jl",{"bold":true}],["                                                                                                                                                                 ",{}]],"8":[["+++ b/test/sparse.jl",{"bold":true}],["                                                                                                                                                                 ",{}]],"9":[["@@ -480,3 +480,22 @@",{"fg":6}],[" end                                                                                                                                                             ",{}]],"10":[[" b = findn( speye(4) )                                                                                                                                                               ",{}]],"11":[[" @test (length(b[1]) == 4)                                                                                                                                                           ",{}]],"12":[[" @test (length(b[2]) == 4)                                                                                                                                                           ",{}]],"13":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"14":[["+#rotations",{"fg":2}],["                                                                                                                                                                          ",{}]],"15":[["+a = sparse( [1,1,2,3], [1,3,4,1], [1,2,3,4] )",{"fg":2}],["                                                                                                                                       ",{}]],"16":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"17":[["+@test rot180(a,2) == a",{"fg":2}],["                                                                                                                                                              ",{}]],"18":[["+@test rot180(a,1) == sparse( [3,3,2,1], [4,2,1,4], [1,2,3,4] )",{"fg":2}],["                                                                                                                      ",{}]],"19":[["+@test rotr90(a,1) == sparse( [1,3,4,1], [3,3,2,1], [1,2,3,4] )",{"fg":2}],["                                                                                                                      ",{}]],"20":[["+@test rotl90(a,1) == sparse( [4,2,1,4], [1,1,2,3], [1,2,3,4] )",{"fg":2}],["                                                                                                                      ",{}]],"21":[["+@test rotl90(a,2) == rot180(a)",{"fg":2}],["                                                                                                                                                      ",{}]],"22":[["+@test rotr90(a,2) == rot180(a)",{"fg":2}],["                                                                                                                                                      ",{}]],"23":[["+@test rotl90(a,3) == rotr90(a)",{"fg":2}],["                                                                                                                                                      ",{}]],"24":[["+@test rotr90(a,3) == rotl90(a)",{"fg":2}],["                                                                                                                                                      ",{}]],"25":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"26":[["+#ensure we have preserved the correct dimensions!",{"fg":2}],["                                                                                                                                   ",{}]],"27":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"28":[["+a = speye(3,5)",{"fg":2}],["                                                                                                                                                                      ",{}]],"29":[["+@test size(rot180(a)) == (3,5)",{"fg":2}],["                                                                                                                                                      ",{}]],"30":[["+@test size(rotr90(a)) == (5,3)",{"fg":2}],["                                                                                                                                                      ",{}]],"31":[["+@test size(rotl90(a)) == (5,3)",{"fg":2}],["                                                                                                                                                      ",{}]],"32":[["diff --git a/test/strings.jl b/test/strings.jl",{"bold":true}],["                                                                                                                                       ",{}]],"33":[["index c33b1e1..17e87fa 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"34":[["--- a/test/strings.jl",{"bold":true}],["                                                                                                                                                                ",{}]],"35":[["+++ b/test/strings.jl",{"bold":true}],["                                                                                                                                                                ",{}]],"36":[["@@ -658,12 +658,12 @@",{"fg":6}],[" end                                                                                                                                                            ",{}]],"37":[[" @test replace(\"ḟøøƀäṙḟøø\", r\"(ḟøø|ƀä)\", \"ƀäṙ\") == \"ƀäṙƀäṙṙƀäṙ\"                                                                                                                      ",{}]],"38":[["                                                                                                                                                                                     ",{}]],"39":[["                                                                                                                                                                                     ",{}]],"40":[["-# {begins,ends}with",{"fg":1}],["                                                                                                                                                                 ",{}]],"41":[["-@test beginswith(\"abcd\", 'a')",{"fg":1}],["                                                                                                                                                       ",{}]],"42":[["-@test beginswith(\"abcd\", \"a\")",{"fg":1}],["                                                                                                                                                       ",{}]],"43":[["-@test beginswith(\"abcd\", \"ab\")",{"fg":1}],["                                                                                                                                                      ",{}]],"44":[["-@test !beginswith(\"ab\", \"abcd\")",{"fg":1}],["                                                                                                                                                     ",{}]],"45":[[":                                                                                                                                                                                    ",{}]]},"cursor":{"x":1}}],[0.222962,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.000286,{"lines":{"0":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"1":[["+#ensure we have preserved the correct dimensions!",{"fg":2}],["                                                                                                                                   ",{}]],"2":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"3":[["+a = speye(3,5)",{"fg":2}],["                                                                                                                                                                      ",{}]],"4":[["+@test size(rot180(a)) == (3,5)",{"fg":2}],["                                                                                                                                                      ",{}]],"5":[["+@test size(rotr90(a)) == (5,3)",{"fg":2}],["                                                                                                                                                      ",{}]],"6":[["+@test size(rotl90(a)) == (5,3)",{"fg":2}],["                                                                                                                                                      ",{}]],"7":[["diff --git a/test/strings.jl b/test/strings.jl",{"bold":true}],["                                                                                                                                       ",{}]],"8":[["index c33b1e1..17e87fa 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"9":[["--- a/test/strings.jl",{"bold":true}],["                                                                                                                                                                ",{}]],"10":[["+++ b/test/strings.jl",{"bold":true}],["                                                                                                                                                                ",{}]],"11":[["@@ -658,12 +658,12 @@",{"fg":6}],[" end                                                                                                                                                            ",{}]],"12":[[" @test replace(\"ḟøøƀäṙḟøø\", r\"(ḟøø|ƀä)\", \"ƀäṙ\") == \"ƀäṙƀäṙṙƀäṙ\"                                                                                                                      ",{}]],"13":[["                                                                                                                                                                                     ",{}]],"14":[["                                                                                                                                                                                     ",{}]],"15":[["-# {begins,ends}with",{"fg":1}],["                                                                                                                                                                 ",{}]],"16":[["-@test beginswith(\"abcd\", 'a')",{"fg":1}],["                                                                                                                                                       ",{}]],"17":[["-@test beginswith(\"abcd\", \"a\")",{"fg":1}],["                                                                                                                                                       ",{}]],"18":[["-@test beginswith(\"abcd\", \"ab\")",{"fg":1}],["                                                                                                                                                      ",{}]],"19":[["-@test !beginswith(\"ab\", \"abcd\")",{"fg":1}],["                                                                                                                                                     ",{}]],"20":[["-@test !beginswith(\"abcd\", \"bc\")",{"fg":1}],["                                                                                                                                                     ",{}]],"21":[["+# {starts,ends}with",{"fg":2}],["                                                                                                                                                                 ",{}]],"22":[["+@test startswith(\"abcd\", 'a')",{"fg":2}],["                                                                                                                                                       ",{}]],"23":[["+@test startswith(\"abcd\", \"a\")",{"fg":2}],["                                                                                                                                                       ",{}]],"24":[["+@test startswith(\"abcd\", \"ab\")",{"fg":2}],["                                                                                                                                                      ",{}]],"25":[["+@test !startswith(\"ab\", \"abcd\")",{"fg":2}],["                                                                                                                                                     ",{}]],"26":[["+@test !startswith(\"abcd\", \"bc\")",{"fg":2}],["                                                                                                                                                     ",{}]],"27":[[" @test endswith(\"abcd\", 'd')                                                                                                                                                         ",{}]],"28":[[" @test endswith(\"abcd\", \"d\")                                                                                                                                                         ",{}]],"29":[[" @test endswith(\"abcd\", \"cd\")                                                                                                                                                        ",{}]],"30":[["@@ -1015,6 +1015,14 @@",{"fg":6}],[" let                                                                                                                                                           ",{}]],"31":[["     @test parse(\"\\udcdb = 1\",1,raise=false)[1] == Expr(:error, \"invalid character \\\"\\udcdb\\\"\")                                                                                      ",{}]],"32":[[" end                                                                                                                                                                                 ",{}]],"33":[["                                                                                                                                                                                     ",{}]],"34":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"35":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"36":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"37":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"38":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"39":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"40":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"41":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"42":[[" # issue #6949                                                                                                                                                                       ",{}]],"43":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"44":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"45":[["(END) ",{"inverse":true}],["                                                                                                                                                                               ",{}]]},"cursor":{"x":6}}],[0.27192,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[3.5e-05,{"lines":{"45":[["(END) ",{"inverse":true}],["                                                                                                                                                                               ",{}]]},"cursor":{"x":6}}],[0.312014,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[9e-06,{"lines":{"45":[["(END) ",{"inverse":true}],["                                                                                                                                                                               ",{}]]},"cursor":{"x":6}}],[0.168351,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[1.2e-05,{"lines":{"45":[["(END) ",{"inverse":true}],["                                                                                                                                                                               ",{}]]},"cursor":{"x":6}}],[0.768047,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[3.2e-05,{"lines":{"45":[["(END) ",{"inverse":true}],["                                                                                                                                                                               ",{}]]},"cursor":{"x":6}}],[0.535595,{"lines":{"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.046334,{"lines":{"45":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$                                                                                                                                                          ",{}]]},"cursor":{"x":28}}],[1.553796,{}],[0.688083,{"lines":{"45":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ git diff HEAD~29                                                                                                                                         ",{}]]},"cursor":{"x":44}}],[0.93597,{"lines":{"45":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$                                                                                                                                                          ",{}]]},"cursor":{"x":28}}],[0.431975,{"lines":{"45":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ j                                                                                                                                                        ",{}]]},"cursor":{"x":29}}],[0.175955,{"lines":{"45":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ ju                                                                                                                                                       ",{}]]},"cursor":{"x":30}}],[0.129698,{"lines":{"45":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]]},"cursor":{"x":34}}],[0.150557,{"lines":{"0":[["+#ensure we have preserved the correct dimensions!",{"fg":2}],["                                                                                                                                   ",{}]],"1":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"2":[["+a = speye(3,5)",{"fg":2}],["                                                                                                                                                                      ",{}]],"3":[["+@test size(rot180(a)) == (3,5)",{"fg":2}],["                                                                                                                                                      ",{}]],"4":[["+@test size(rotr90(a)) == (5,3)",{"fg":2}],["                                                                                                                                                      ",{}]],"5":[["+@test size(rotl90(a)) == (5,3)",{"fg":2}],["                                                                                                                                                      ",{}]],"6":[["diff --git a/test/strings.jl b/test/strings.jl",{"bold":true}],["                                                                                                                                       ",{}]],"7":[["index c33b1e1..17e87fa 100644",{"bold":true}],["                                                                                                                                                        ",{}]],"8":[["--- a/test/strings.jl",{"bold":true}],["                                                                                                                                                                ",{}]],"9":[["+++ b/test/strings.jl",{"bold":true}],["                                                                                                                                                                ",{}]],"10":[["@@ -658,12 +658,12 @@",{"fg":6}],[" end                                                                                                                                                            ",{}]],"11":[[" @test replace(\"ḟøøƀäṙḟøø\", r\"(ḟøø|ƀä)\", \"ƀäṙ\") == \"ƀäṙƀäṙṙƀäṙ\"                                                                                                                      ",{}]],"12":[["                                                                                                                                                                                     ",{}]],"14":[["-# {begins,ends}with",{"fg":1}],["                                                                                                                                                                 ",{}]],"15":[["-@test beginswith(\"abcd\", 'a')",{"fg":1}],["                                                                                                                                                       ",{}]],"16":[["-@test beginswith(\"abcd\", \"a\")",{"fg":1}],["                                                                                                                                                       ",{}]],"17":[["-@test beginswith(\"abcd\", \"ab\")",{"fg":1}],["                                                                                                                                                      ",{}]],"18":[["-@test !beginswith(\"ab\", \"abcd\")",{"fg":1}],["                                                                                                                                                     ",{}]],"19":[["-@test !beginswith(\"abcd\", \"bc\")",{"fg":1}],["                                                                                                                                                     ",{}]],"20":[["+# {starts,ends}with",{"fg":2}],["                                                                                                                                                                 ",{}]],"21":[["+@test startswith(\"abcd\", 'a')",{"fg":2}],["                                                                                                                                                       ",{}]],"22":[["+@test startswith(\"abcd\", \"a\")",{"fg":2}],["                                                                                                                                                       ",{}]],"23":[["+@test startswith(\"abcd\", \"ab\")",{"fg":2}],["                                                                                                                                                      ",{}]],"24":[["+@test !startswith(\"ab\", \"abcd\")",{"fg":2}],["                                                                                                                                                     ",{}]],"25":[["+@test !startswith(\"abcd\", \"bc\")",{"fg":2}],["                                                                                                                                                     ",{}]],"26":[[" @test endswith(\"abcd\", 'd')                                                                                                                                                         ",{}]],"27":[[" @test endswith(\"abcd\", \"d\")                                                                                                                                                         ",{}]],"28":[[" @test endswith(\"abcd\", \"cd\")                                                                                                                                                        ",{}]],"29":[["@@ -1015,6 +1015,14 @@",{"fg":6}],[" let                                                                                                                                                           ",{}]],"30":[["     @test parse(\"\\udcdb = 1\",1,raise=false)[1] == Expr(:error, \"invalid character \\\"\\udcdb\\\"\")                                                                                      ",{}]],"31":[[" end                                                                                                                                                                                 ",{}]],"32":[["                                                                                                                                                                                     ",{}]],"33":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"34":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"35":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"36":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"37":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"38":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"39":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"40":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"41":[[" # issue #6949                                                                                                                                                                       ",{}]],"42":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"43":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"44":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}],[0.242751,{"lines":{"0":[["+++ b/test/strings.jl",{"bold":true}],["                                                                                                                                                                ",{}]],"1":[["@@ -658,12 +658,12 @@",{"fg":6}],[" end                                                                                                                                                            ",{}]],"2":[[" @test replace(\"ḟøøƀäṙḟøø\", r\"(ḟøø|ƀä)\", \"ƀäṙ\") == \"ƀäṙƀäṙṙƀäṙ\"                                                                                                                      ",{}]],"3":[["                                                                                                                                                                                     ",{}]],"4":[["                                                                                                                                                                                     ",{}]],"5":[["-# {begins,ends}with",{"fg":1}],["                                                                                                                                                                 ",{}]],"6":[["-@test beginswith(\"abcd\", 'a')",{"fg":1}],["                                                                                                                                                       ",{}]],"7":[["-@test beginswith(\"abcd\", \"a\")",{"fg":1}],["                                                                                                                                                       ",{}]],"8":[["-@test beginswith(\"abcd\", \"ab\")",{"fg":1}],["                                                                                                                                                      ",{}]],"9":[["-@test !beginswith(\"ab\", \"abcd\")",{"fg":1}],["                                                                                                                                                     ",{}]],"10":[["-@test !beginswith(\"abcd\", \"bc\")",{"fg":1}],["                                                                                                                                                     ",{}]],"11":[["+# {starts,ends}with",{"fg":2}],["                                                                                                                                                                 ",{}]],"12":[["+@test startswith(\"abcd\", 'a')",{"fg":2}],["                                                                                                                                                       ",{}]],"13":[["+@test startswith(\"abcd\", \"a\")",{"fg":2}],["                                                                                                                                                       ",{}]],"14":[["+@test startswith(\"abcd\", \"ab\")",{"fg":2}],["                                                                                                                                                      ",{}]],"15":[["+@test !startswith(\"ab\", \"abcd\")",{"fg":2}],["                                                                                                                                                     ",{}]],"16":[["+@test !startswith(\"abcd\", \"bc\")",{"fg":2}],["                                                                                                                                                     ",{}]],"17":[[" @test endswith(\"abcd\", 'd')                                                                                                                                                         ",{}]],"18":[[" @test endswith(\"abcd\", \"d\")                                                                                                                                                         ",{}]],"19":[[" @test endswith(\"abcd\", \"cd\")                                                                                                                                                        ",{}]],"20":[["@@ -1015,6 +1015,14 @@",{"fg":6}],[" let                                                                                                                                                           ",{}]],"21":[["     @test parse(\"\\udcdb = 1\",1,raise=false)[1] == Expr(:error, \"invalid character \\\"\\udcdb\\\"\")                                                                                      ",{}]],"22":[[" end                                                                                                                                                                                 ",{}]],"23":[["                                                                                                                                                                                     ",{}]],"24":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"25":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"26":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"27":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"28":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"29":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"30":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"31":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"32":[[" # issue #6949                                                                                                                                                                       ",{}]],"33":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"34":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"35":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"36":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"37":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"38":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"39":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"40":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"41":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"42":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"43":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{"bold":true}]],"45":[["                                                                                                                                                                                     ",{"bold":true}]]}}],[0.647686,{}],[0.117811,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{}]]},"cursor":{"x":7}}],[1.731707,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["V",{"bold":true}],["                                                                                                                                                                             ",{}]]},"cursor":{"x":8}}],[0.148003,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["Va",{"bold":true}],["                                                                                                                                                                            ",{}]]},"cursor":{"x":9}}],[0.144001,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["Val",{"bold":true}],["                                                                                                                                                                           ",{}]]},"cursor":{"x":10}}],[0.274446,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]]}}],[0.000764,{"lines":{"0":[["@@ -658,12 +658,12 @@",{"fg":6}],[" end                                                                                                                                                            ",{}]],"1":[[" @test replace(\"ḟøøƀäṙḟøø\", r\"(ḟøø|ƀä)\", \"ƀäṙ\") == \"ƀäṙƀäṙṙƀäṙ\"                                                                                                                      ",{}]],"2":[["                                                                                                                                                                                     ",{}]],"4":[["-# {begins,ends}with",{"fg":1}],["                                                                                                                                                                 ",{}]],"5":[["-@test beginswith(\"abcd\", 'a')",{"fg":1}],["                                                                                                                                                       ",{}]],"6":[["-@test beginswith(\"abcd\", \"a\")",{"fg":1}],["                                                                                                                                                       ",{}]],"7":[["-@test beginswith(\"abcd\", \"ab\")",{"fg":1}],["                                                                                                                                                      ",{}]],"8":[["-@test !beginswith(\"ab\", \"abcd\")",{"fg":1}],["                                                                                                                                                     ",{}]],"9":[["-@test !beginswith(\"abcd\", \"bc\")",{"fg":1}],["                                                                                                                                                     ",{}]],"10":[["+# {starts,ends}with",{"fg":2}],["                                                                                                                                                                 ",{}]],"11":[["+@test startswith(\"abcd\", 'a')",{"fg":2}],["                                                                                                                                                       ",{}]],"12":[["+@test startswith(\"abcd\", \"a\")",{"fg":2}],["                                                                                                                                                       ",{}]],"13":[["+@test startswith(\"abcd\", \"ab\")",{"fg":2}],["                                                                                                                                                      ",{}]],"14":[["+@test !startswith(\"ab\", \"abcd\")",{"fg":2}],["                                                                                                                                                     ",{}]],"15":[["+@test !startswith(\"abcd\", \"bc\")",{"fg":2}],["                                                                                                                                                     ",{}]],"16":[[" @test endswith(\"abcd\", 'd')                                                                                                                                                         ",{}]],"17":[[" @test endswith(\"abcd\", \"d\")                                                                                                                                                         ",{}]],"18":[[" @test endswith(\"abcd\", \"cd\")                                                                                                                                                        ",{}]],"19":[["@@ -1015,6 +1015,14 @@",{"fg":6}],[" let                                                                                                                                                           ",{}]],"20":[["     @test parse(\"\\udcdb = 1\",1,raise=false)[1] == Expr(:error, \"invalid character \\\"\\udcdb\\\"\")                                                                                      ",{}]],"21":[[" end                                                                                                                                                                                 ",{}]],"22":[["                                                                                                                                                                                     ",{}]],"23":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"24":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"25":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"26":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"27":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"28":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"29":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"30":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"31":[[" # issue #6949                                                                                                                                                                       ",{}]],"32":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"33":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"34":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"35":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"36":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"37":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"38":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"39":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"40":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"41":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"42":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"43":[["                                                                                                                                                                                     ",{"bold":true}]],"44":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"45":[["                                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":0}}],[0.026562,{}],[0.180424,{}],[0.067887,{"lines":{"45":[["Val                                                                                                                                                                                  ",{"bold":true}]]},"cursor":{"x":3}}],[0.035597,{"lines":{"45":[["Val{                                                                                                                                                                                 ",{"bold":true}]]},"cursor":{"x":4}}],[0.007995,{"lines":{"0":[["                                                                                                                                                                                     ",{}]],"1":[["                                                                                                                                                                                     ",{}]],"2":[["-# {begins,ends}with",{"fg":1}],["                                                                                                                                                                 ",{}]],"3":[["-@test beginswith(\"abcd\", 'a')",{"fg":1}],["                                                                                                                                                       ",{}]],"4":[["-@test beginswith(\"abcd\", \"a\")",{"fg":1}],["                                                                                                                                                       ",{}]],"5":[["-@test beginswith(\"abcd\", \"ab\")",{"fg":1}],["                                                                                                                                                      ",{}]],"6":[["-@test !beginswith(\"ab\", \"abcd\")",{"fg":1}],["                                                                                                                                                     ",{}]],"7":[["-@test !beginswith(\"abcd\", \"bc\")",{"fg":1}],["                                                                                                                                                     ",{}]],"8":[["+# {starts,ends}with",{"fg":2}],["                                                                                                                                                                 ",{}]],"9":[["+@test startswith(\"abcd\", 'a')",{"fg":2}],["                                                                                                                                                       ",{}]],"10":[["+@test startswith(\"abcd\", \"a\")",{"fg":2}],["                                                                                                                                                       ",{}]],"11":[["+@test startswith(\"abcd\", \"ab\")",{"fg":2}],["                                                                                                                                                      ",{}]],"12":[["+@test !startswith(\"ab\", \"abcd\")",{"fg":2}],["                                                                                                                                                     ",{}]],"13":[["+@test !startswith(\"abcd\", \"bc\")",{"fg":2}],["                                                                                                                                                     ",{}]],"14":[[" @test endswith(\"abcd\", 'd')                                                                                                                                                         ",{}]],"15":[[" @test endswith(\"abcd\", \"d\")                                                                                                                                                         ",{}]],"16":[[" @test endswith(\"abcd\", \"cd\")                                                                                                                                                        ",{}]],"17":[["@@ -1015,6 +1015,14 @@",{"fg":6}],[" let                                                                                                                                                           ",{}]],"18":[["     @test parse(\"\\udcdb = 1\",1,raise=false)[1] == Expr(:error, \"invalid character \\\"\\udcdb\\\"\")                                                                                      ",{}]],"19":[[" end                                                                                                                                                                                 ",{}]],"20":[["                                                                                                                                                                                     ",{}]],"21":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"22":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"23":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"24":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"25":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"26":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"27":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"28":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"29":[[" # issue #6949                                                                                                                                                                       ",{}]],"30":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"31":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"32":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"33":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"34":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"35":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"36":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"37":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"38":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"39":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"40":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{"bold":true}]],"42":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"43":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[0.778146,{}],[0.156825,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]]},"cursor":{"x":10}}],[0.030032,{}],[0.02305,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["Val{                                                                                                                                                                          ",{"bold":true}]]},"cursor":{"x":11}}],[0.362585,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["Val{2                                                                                                                                                                         ",{"bold":true}]]},"cursor":{"x":12}}],[0.27181,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]]},"cursor":{"x":13}}],[0.232258,{}],[0.001283,{"lines":{"1":[["-# {begins,ends}with",{"fg":1}],["                                                                                                                                                                 ",{}]],"2":[["-@test beginswith(\"abcd\", 'a')",{"fg":1}],["                                                                                                                                                       ",{}]],"3":[["-@test beginswith(\"abcd\", \"a\")",{"fg":1}],["                                                                                                                                                       ",{}]],"4":[["-@test beginswith(\"abcd\", \"ab\")",{"fg":1}],["                                                                                                                                                      ",{}]],"5":[["-@test !beginswith(\"ab\", \"abcd\")",{"fg":1}],["                                                                                                                                                     ",{}]],"6":[["-@test !beginswith(\"abcd\", \"bc\")",{"fg":1}],["                                                                                                                                                     ",{}]],"7":[["+# {starts,ends}with",{"fg":2}],["                                                                                                                                                                 ",{}]],"8":[["+@test startswith(\"abcd\", 'a')",{"fg":2}],["                                                                                                                                                       ",{}]],"9":[["+@test startswith(\"abcd\", \"a\")",{"fg":2}],["                                                                                                                                                       ",{}]],"10":[["+@test startswith(\"abcd\", \"ab\")",{"fg":2}],["                                                                                                                                                      ",{}]],"11":[["+@test !startswith(\"ab\", \"abcd\")",{"fg":2}],["                                                                                                                                                     ",{}]],"12":[["+@test !startswith(\"abcd\", \"bc\")",{"fg":2}],["                                                                                                                                                     ",{}]],"13":[[" @test endswith(\"abcd\", 'd')                                                                                                                                                         ",{}]],"14":[[" @test endswith(\"abcd\", \"d\")                                                                                                                                                         ",{}]],"15":[[" @test endswith(\"abcd\", \"cd\")                                                                                                                                                        ",{}]],"16":[["@@ -1015,6 +1015,14 @@",{"fg":6}],[" let                                                                                                                                                           ",{}]],"17":[["     @test parse(\"\\udcdb = 1\",1,raise=false)[1] == Expr(:error, \"invalid character \\\"\\udcdb\\\"\")                                                                                      ",{}]],"18":[[" end                                                                                                                                                                                 ",{}]],"19":[["                                                                                                                                                                                     ",{}]],"20":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"21":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"22":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"23":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"24":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"25":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"26":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"27":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"28":[[" # issue #6949                                                                                                                                                                       ",{}]],"29":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"30":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"31":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"32":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"33":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"34":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"35":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"36":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"37":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"38":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"39":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"40":[["                                                                                                                                                                                     ",{"bold":true}]],"41":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"42":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"43":[["                                                                                                                                                                                     ",{"bold":true}]],"44":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"45":[["Val                                                                                                                                                                                  ",{"bold":true}]]},"cursor":{"x":3}}],[0.016357,{"lines":{"0":[["-@test beginswith(\"abcd\", 'a')",{"fg":1}],["                                                                                                                                                       ",{}]],"1":[["-@test beginswith(\"abcd\", \"a\")",{"fg":1}],["                                                                                                                                                       ",{}]],"2":[["-@test beginswith(\"abcd\", \"ab\")",{"fg":1}],["                                                                                                                                                      ",{}]],"3":[["-@test !beginswith(\"ab\", \"abcd\")",{"fg":1}],["                                                                                                                                                     ",{}]],"4":[["-@test !beginswith(\"abcd\", \"bc\")",{"fg":1}],["                                                                                                                                                     ",{}]],"5":[["+# {starts,ends}with",{"fg":2}],["                                                                                                                                                                 ",{}]],"6":[["+@test startswith(\"abcd\", 'a')",{"fg":2}],["                                                                                                                                                       ",{}]],"7":[["+@test startswith(\"abcd\", \"a\")",{"fg":2}],["                                                                                                                                                       ",{}]],"8":[["+@test startswith(\"abcd\", \"ab\")",{"fg":2}],["                                                                                                                                                      ",{}]],"9":[["+@test !startswith(\"ab\", \"abcd\")",{"fg":2}],["                                                                                                                                                     ",{}]],"10":[["+@test !startswith(\"abcd\", \"bc\")",{"fg":2}],["                                                                                                                                                     ",{}]],"11":[[" @test endswith(\"abcd\", 'd')                                                                                                                                                         ",{}]],"12":[[" @test endswith(\"abcd\", \"d\")                                                                                                                                                         ",{}]],"13":[[" @test endswith(\"abcd\", \"cd\")                                                                                                                                                        ",{}]],"14":[["@@ -1015,6 +1015,14 @@",{"fg":6}],[" let                                                                                                                                                           ",{}]],"15":[["     @test parse(\"\\udcdb = 1\",1,raise=false)[1] == Expr(:error, \"invalid character \\\"\\udcdb\\\"\")                                                                                      ",{}]],"16":[[" end                                                                                                                                                                                 ",{}]],"17":[["                                                                                                                                                                                     ",{}]],"18":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"19":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"20":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"21":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"22":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"23":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"24":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"25":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"26":[[" # issue #6949                                                                                                                                                                       ",{}]],"27":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"28":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"29":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"30":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"31":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"32":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"33":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"34":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"35":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"36":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"37":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{"bold":true}]],"39":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"40":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{"bold":true}]],"42":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"43":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[1.414929,{}],[0.000176,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]]},"cursor":{"x":13}}],[0.167612,{}],[0.004584,{"cursor":{"x":12}}],[0.743431,{"cursor":{"x":13}}],[0.517384,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["Val{2                                                                                                                                                                         ",{"bold":true}]]},"cursor":{"x":12}}],[0.24147,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["Val{                                                                                                                                                                          ",{"bold":true}]]},"cursor":{"x":11}}],[0.033534,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]]},"cursor":{"x":10}}],[0.033773,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["Va                                                                                                                                                                            ",{"bold":true}]]},"cursor":{"x":9}}],[0.033726,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["V                                                                                                                                                                             ",{"bold":true}]]},"cursor":{"x":8}}],[0.033742,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[1.214571,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],[":                                                                                                                                                                             ",{"bold":true}]]},"cursor":{"x":8}}],[0.119317,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["::                                                                                                                                                                            ",{"bold":true}]]},"cursor":{"x":9}}],[0.312107,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["::T                                                                                                                                                                           ",{"bold":true}]]},"cursor":{"x":10}}],[0.136577,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["::Ty                                                                                                                                                                          ",{"bold":true}]]},"cursor":{"x":11}}],[0.039307,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["::Typ                                                                                                                                                                         ",{"bold":true}]]},"cursor":{"x":12}}],[0.087968,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["::Type                                                                                                                                                                        ",{"bold":true}]]},"cursor":{"x":13}}],[0.200175,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["::Type{                                                                                                                                                                       ",{"bold":true}]]},"cursor":{"x":14}}],[1.15187,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["::Type{V                                                                                                                                                                      ",{"bold":true}]]},"cursor":{"x":15}}],[0.168165,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["::Type{Va                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":16}}],[0.087867,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["::Type{Val                                                                                                                                                                    ",{"bold":true}]]},"cursor":{"x":17}}],[0.335985,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{                                                                                                                                                                   ",{"bold":true}]]},"cursor":{"x":18}}],[0.256231,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}                                                                                                                                                                  ",{"bold":true}]]},"cursor":{"x":19}}],[0.39999,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]]},"cursor":{"x":20}}],[0.504282,{}],[0.000171,{"lines":{"0":[["-@test beginswith(\"abcd\", \"a\")",{"fg":1}],["                                                                                                                                                       ",{}]],"1":[["-@test beginswith(\"abcd\", \"ab\")",{"fg":1}],["                                                                                                                                                      ",{}]],"2":[["-@test !beginswith(\"ab\", \"abcd\")",{"fg":1}],["                                                                                                                                                     ",{}]],"3":[["-@test !beginswith(\"abcd\", \"bc\")",{"fg":1}],["                                                                                                                                                     ",{}]],"4":[["+# {starts,ends}with",{"fg":2}],["                                                                                                                                                                 ",{}]],"5":[["+@test startswith(\"abcd\", 'a')",{"fg":2}],["                                                                                                                                                       ",{}]],"6":[["+@test startswith(\"abcd\", \"a\")",{"fg":2}],["                                                                                                                                                       ",{}]],"7":[["+@test startswith(\"abcd\", \"ab\")",{"fg":2}],["                                                                                                                                                      ",{}]],"8":[["+@test !startswith(\"ab\", \"abcd\")",{"fg":2}],["                                                                                                                                                     ",{}]],"9":[["+@test !startswith(\"abcd\", \"bc\")",{"fg":2}],["                                                                                                                                                     ",{}]],"10":[[" @test endswith(\"abcd\", 'd')                                                                                                                                                         ",{}]],"11":[[" @test endswith(\"abcd\", \"d\")                                                                                                                                                         ",{}]],"12":[[" @test endswith(\"abcd\", \"cd\")                                                                                                                                                        ",{}]],"13":[["@@ -1015,6 +1015,14 @@",{"fg":6}],[" let                                                                                                                                                           ",{}]],"14":[["     @test parse(\"\\udcdb = 1\",1,raise=false)[1] == Expr(:error, \"invalid character \\\"\\udcdb\\\"\")                                                                                      ",{}]],"15":[[" end                                                                                                                                                                                 ",{}]],"16":[["                                                                                                                                                                                     ",{}]],"17":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"18":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"19":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"20":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"21":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"22":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"23":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"24":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"25":[[" # issue #6949                                                                                                                                                                       ",{}]],"26":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"27":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"28":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"29":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"30":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"31":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"32":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"33":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"34":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"35":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"36":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"37":[["                                                                                                                                                                                     ",{"bold":true}]],"38":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"39":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"40":[["                                                                                                                                                                                     ",{"bold":true}]],"41":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"42":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"43":[["                                                                                                                                                                                     ",{"bold":true}]],"44":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"45":[["                                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":0}}],[0.12612,{"lines":{"45":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]]},"cursor":{"x":34}}],[0.000146,{"lines":{"0":[["-@test !beginswith(\"ab\", \"abcd\")",{"fg":1}],["                                                                                                                                                     ",{}]],"1":[["-@test !beginswith(\"abcd\", \"bc\")",{"fg":1}],["                                                                                                                                                     ",{}]],"2":[["+# {starts,ends}with",{"fg":2}],["                                                                                                                                                                 ",{}]],"3":[["+@test startswith(\"abcd\", 'a')",{"fg":2}],["                                                                                                                                                       ",{}]],"4":[["+@test startswith(\"abcd\", \"a\")",{"fg":2}],["                                                                                                                                                       ",{}]],"5":[["+@test startswith(\"abcd\", \"ab\")",{"fg":2}],["                                                                                                                                                      ",{}]],"6":[["+@test !startswith(\"ab\", \"abcd\")",{"fg":2}],["                                                                                                                                                     ",{}]],"7":[["+@test !startswith(\"abcd\", \"bc\")",{"fg":2}],["                                                                                                                                                     ",{}]],"8":[[" @test endswith(\"abcd\", 'd')                                                                                                                                                         ",{}]],"9":[[" @test endswith(\"abcd\", \"d\")                                                                                                                                                         ",{}]],"10":[[" @test endswith(\"abcd\", \"cd\")                                                                                                                                                        ",{}]],"11":[["@@ -1015,6 +1015,14 @@",{"fg":6}],[" let                                                                                                                                                           ",{}]],"12":[["     @test parse(\"\\udcdb = 1\",1,raise=false)[1] == Expr(:error, \"invalid character \\\"\\udcdb\\\"\")                                                                                      ",{}]],"13":[[" end                                                                                                                                                                                 ",{}]],"14":[["                                                                                                                                                                                     ",{}]],"15":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"16":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"17":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"18":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"19":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"20":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"21":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"22":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"23":[[" # issue #6949                                                                                                                                                                       ",{}]],"24":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"25":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"26":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"27":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"28":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"29":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"30":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"31":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"32":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"33":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"34":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"35":[["                                                                                                                                                                                     ",{"bold":true}]],"36":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"37":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{"bold":true}]],"39":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"40":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{"bold":true}]],"42":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"43":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[1.497362,{}],[5.3e-05,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]]},"cursor":{"x":20}}],[0.183996,{}],[4.9e-05,{"cursor":{"x":19}}],[0.251082,{"cursor":{"x":18}}],[0.03477,{"cursor":{"x":17}}],[0.03416,{"cursor":{"x":16}}],[0.367306,{"cursor":{"x":15}}],[0.251654,{"cursor":{"x":14}}],[0.035503,{"cursor":{"x":13}}],[0.033705,{"cursor":{"x":12}}],[0.034506,{"cursor":{"x":11}}],[0.032998,{"cursor":{"x":10}}],[0.380322,{"cursor":{"x":9}}],[0.352368,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],[":Type{Val{}}                                                                                                                                                                  ",{"bold":true}]]},"cursor":{"x":8}}],[0.143527,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]]},"cursor":{"x":7}}],[0.17628,{"cursor":{"x":18}}],[0.001418,{"lines":{"0":[["-@test !beginswith(\"abcd\", \"bc\")",{"fg":1}],["                                                                                                                                                     ",{}]],"1":[["+# {starts,ends}with",{"fg":2}],["                                                                                                                                                                 ",{}]],"2":[["+@test startswith(\"abcd\", 'a')",{"fg":2}],["                                                                                                                                                       ",{}]],"3":[["+@test startswith(\"abcd\", \"a\")",{"fg":2}],["                                                                                                                                                       ",{}]],"4":[["+@test startswith(\"abcd\", \"ab\")",{"fg":2}],["                                                                                                                                                      ",{}]],"5":[["+@test !startswith(\"ab\", \"abcd\")",{"fg":2}],["                                                                                                                                                     ",{}]],"6":[["+@test !startswith(\"abcd\", \"bc\")",{"fg":2}],["                                                                                                                                                     ",{}]],"7":[[" @test endswith(\"abcd\", 'd')                                                                                                                                                         ",{}]],"8":[[" @test endswith(\"abcd\", \"d\")                                                                                                                                                         ",{}]],"9":[[" @test endswith(\"abcd\", \"cd\")                                                                                                                                                        ",{}]],"10":[["@@ -1015,6 +1015,14 @@",{"fg":6}],[" let                                                                                                                                                           ",{}]],"11":[["     @test parse(\"\\udcdb = 1\",1,raise=false)[1] == Expr(:error, \"invalid character \\\"\\udcdb\\\"\")                                                                                      ",{}]],"12":[[" end                                                                                                                                                                                 ",{}]],"13":[["                                                                                                                                                                                     ",{}]],"14":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"15":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"16":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"17":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"18":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"19":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"20":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"21":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"22":[[" # issue #6949                                                                                                                                                                       ",{}]],"23":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"24":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"25":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"26":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"27":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"28":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"29":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"30":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"31":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"32":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"33":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"34":[["                                                                                                                                                                                     ",{"bold":true}]],"35":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"36":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"37":[["                                                                                                                                                                                     ",{"bold":true}]],"38":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"39":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"40":[["                                                                                                                                                                                     ",{"bold":true}]],"41":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"42":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"43":[["                                                                                                                                                                                     ",{}]],"44":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"45":[["Type                                                                                                                                                                                 ",{"bold":true}]]},"cursor":{"x":4}}],[0.017661,{"lines":{"45":[["Type{                                                                                                                                                                                ",{"bold":true}]]},"cursor":{"x":5}}],[0.0009750000000000002,{"lines":{"0":[["+@test startswith(\"abcd\", 'a')",{"fg":2}],["                                                                                                                                                       ",{}]],"1":[["+@test startswith(\"abcd\", \"a\")",{"fg":2}],["                                                                                                                                                       ",{}]],"2":[["+@test startswith(\"abcd\", \"ab\")",{"fg":2}],["                                                                                                                                                      ",{}]],"3":[["+@test !startswith(\"ab\", \"abcd\")",{"fg":2}],["                                                                                                                                                     ",{}]],"4":[["+@test !startswith(\"abcd\", \"bc\")",{"fg":2}],["                                                                                                                                                     ",{}]],"5":[[" @test endswith(\"abcd\", 'd')                                                                                                                                                         ",{}]],"6":[[" @test endswith(\"abcd\", \"d\")                                                                                                                                                         ",{}]],"7":[[" @test endswith(\"abcd\", \"cd\")                                                                                                                                                        ",{}]],"8":[["@@ -1015,6 +1015,14 @@",{"fg":6}],[" let                                                                                                                                                           ",{}]],"9":[["     @test parse(\"\\udcdb = 1\",1,raise=false)[1] == Expr(:error, \"invalid character \\\"\\udcdb\\\"\")                                                                                      ",{}]],"10":[[" end                                                                                                                                                                                 ",{}]],"11":[["                                                                                                                                                                                     ",{}]],"12":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"13":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"14":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"15":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"16":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"17":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"18":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"19":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"20":[[" # issue #6949                                                                                                                                                                       ",{}]],"21":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"22":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"23":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"24":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"25":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"26":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"27":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"28":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"29":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"30":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"31":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{"bold":true}]],"33":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"34":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"35":[["                                                                                                                                                                                     ",{"bold":true}]],"36":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"37":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{"bold":true}]],"39":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"40":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{}]],"42":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"43":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[4.419701,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]]},"cursor":{"x":8}}],[0.279937,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(                                                                                                                                                                            ",{"bold":true}]]},"cursor":{"x":9}}],[0.664096,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(V                                                                                                                                                                           ",{"bold":true}]]},"cursor":{"x":10}}],[0.175973,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Va                                                                                                                                                                          ",{"bold":true}]]},"cursor":{"x":11}}],[0.096008,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val                                                                                                                                                                         ",{"bold":true}]]},"cursor":{"x":12}}],[0.744066,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val}                                                                                                                                                                        ",{"bold":true}]]},"cursor":{"x":13}}],[0.832599,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val                                                                                                                                                                         ",{"bold":true}]]},"cursor":{"x":12}}],[0.535459,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{                                                                                                                                                                        ",{"bold":true}]]},"cursor":{"x":13}}],[0.039986,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{}                                                                                                                                                                       ",{"bold":true}]]},"cursor":{"x":14}}],[0.288108,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]]},"cursor":{"x":15}}],[0.423978,{}],[0.000112,{"lines":{"0":[["+@test startswith(\"abcd\", \"a\")",{"fg":2}],["                                                                                                                                                       ",{}]],"1":[["+@test startswith(\"abcd\", \"ab\")",{"fg":2}],["                                                                                                                                                      ",{}]],"2":[["+@test !startswith(\"ab\", \"abcd\")",{"fg":2}],["                                                                                                                                                     ",{}]],"3":[["+@test !startswith(\"abcd\", \"bc\")",{"fg":2}],["                                                                                                                                                     ",{}]],"4":[[" @test endswith(\"abcd\", 'd')                                                                                                                                                         ",{}]],"5":[[" @test endswith(\"abcd\", \"d\")                                                                                                                                                         ",{}]],"6":[[" @test endswith(\"abcd\", \"cd\")                                                                                                                                                        ",{}]],"7":[["@@ -1015,6 +1015,14 @@",{"fg":6}],[" let                                                                                                                                                           ",{}]],"8":[["     @test parse(\"\\udcdb = 1\",1,raise=false)[1] == Expr(:error, \"invalid character \\\"\\udcdb\\\"\")                                                                                      ",{}]],"9":[[" end                                                                                                                                                                                 ",{}]],"10":[["                                                                                                                                                                                     ",{}]],"11":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"12":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"13":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"14":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"15":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"16":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"17":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"18":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"19":[[" # issue #6949                                                                                                                                                                       ",{}]],"20":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"21":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"22":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"23":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"24":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"25":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"26":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"27":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"28":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"29":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"30":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"31":[["                                                                                                                                                                                     ",{"bold":true}]],"32":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"33":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"34":[["                                                                                                                                                                                     ",{"bold":true}]],"35":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"36":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"37":[["                                                                                                                                                                                     ",{"bold":true}]],"38":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"39":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"40":[["                                                                                                                                                                                     ",{}]],"41":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"42":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"43":[["                                                                                                                                                                                     ",{"bold":true}]],"44":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"45":[["                                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":0}}],[0.028317,{"lines":{"45":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]]},"cursor":{"x":20}}],[0.000172,{"lines":{"0":[["+@test !startswith(\"ab\", \"abcd\")",{"fg":2}],["                                                                                                                                                     ",{}]],"1":[["+@test !startswith(\"abcd\", \"bc\")",{"fg":2}],["                                                                                                                                                     ",{}]],"2":[[" @test endswith(\"abcd\", 'd')                                                                                                                                                         ",{}]],"3":[[" @test endswith(\"abcd\", \"d\")                                                                                                                                                         ",{}]],"4":[[" @test endswith(\"abcd\", \"cd\")                                                                                                                                                        ",{}]],"5":[["@@ -1015,6 +1015,14 @@",{"fg":6}],[" let                                                                                                                                                           ",{}]],"6":[["     @test parse(\"\\udcdb = 1\",1,raise=false)[1] == Expr(:error, \"invalid character \\\"\\udcdb\\\"\")                                                                                      ",{}]],"7":[[" end                                                                                                                                                                                 ",{}]],"8":[["                                                                                                                                                                                     ",{}]],"9":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"10":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"11":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"12":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"13":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"14":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"15":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"16":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"17":[[" # issue #6949                                                                                                                                                                       ",{}]],"18":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"19":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"20":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"21":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"22":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"23":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"24":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"25":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"26":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"27":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"28":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"29":[["                                                                                                                                                                                     ",{"bold":true}]],"30":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"31":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{"bold":true}]],"33":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"34":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"35":[["                                                                                                                                                                                     ",{"bold":true}]],"36":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"37":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{}]],"39":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"40":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{"bold":true}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"43":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[1.308086,{}],[5.4e-05,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]]},"cursor":{"x":15}}],[0.175806,{}],[7.8e-05,{"cursor":{"x":16}}],[0.159311,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) =                                                                                                                                                                    ",{"bold":true}]]},"cursor":{"x":17}}],[0.09607,{"cursor":{"x":18}}],[1.807993,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]]},"cursor":{"x":19}}],[0.136369,{}],[0.001891,{"lines":{"0":[[" @test endswith(\"abcd\", \"d\")                                                                                                                                                         ",{}]],"1":[[" @test endswith(\"abcd\", \"cd\")                                                                                                                                                        ",{}]],"2":[["@@ -1015,6 +1015,14 @@",{"fg":6}],[" let                                                                                                                                                           ",{}]],"3":[["     @test parse(\"\\udcdb = 1\",1,raise=false)[1] == Expr(:error, \"invalid character \\\"\\udcdb\\\"\")                                                                                      ",{}]],"4":[[" end                                                                                                                                                                                 ",{}]],"5":[["                                                                                                                                                                                     ",{}]],"6":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"7":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"8":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"9":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"10":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"11":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"12":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"13":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"14":[[" # issue #6949                                                                                                                                                                       ",{}]],"15":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"16":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"17":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"18":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"19":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"20":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"21":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"22":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"23":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"24":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"25":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"26":[["                                                                                                                                                                                     ",{"bold":true}]],"27":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"28":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"30":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"31":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"33":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"34":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"35":[["                                                                                                                                                                                     ",{}]],"36":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"37":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{"bold":true}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"40":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"43":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[1.261999,{}],[5.3e-05,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]]},"cursor":{"x":19}}],[0.247884,{}],[8.8e-05,{"cursor":{"x":18}}],[0.26382,{"cursor":{"x":17}}],[0.36818,{"cursor":{"x":16}}],[0.143721,{"cursor":{"x":15}}],[0.14396,{"cursor":{"x":14}}],[0.14413,{"cursor":{"x":13}}],[0.136162,{"cursor":{"x":12}}],[0.135952,{"cursor":{"x":11}}],[0.152178,{"cursor":{"x":10}}],[0.207706,{"cursor":{"x":9}}],[0.376276,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(:Val{}) = 2                                                                                                                                                                 ",{"bold":true}]]},"cursor":{"x":10}}],[0.239579,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(::Val{}) = 2                                                                                                                                                                ",{"bold":true}]]},"cursor":{"x":11}}],[0.47222,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(::TVal{}) = 2                                                                                                                                                               ",{"bold":true}]]},"cursor":{"x":12}}],[0.167957,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(::TyVal{}) = 2                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":13}}],[0.032028,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(::TypVal{}) = 2                                                                                                                                                             ",{"bold":true}]]},"cursor":{"x":14}}],[0.07184,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(::TypeVal{}) = 2                                                                                                                                                            ",{"bold":true}]]},"cursor":{"x":15}}],[0.183999,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}) = 2                                                                                                                                                           ",{"bold":true}]]},"cursor":{"x":16}}],[0.247967,{"cursor":{"x":17}}],[0.152029,{"cursor":{"x":18}}],[0.144201,{"cursor":{"x":19}}],[0.151991,{"cursor":{"x":20}}],[0.13577,{"cursor":{"x":21}}],[0.360059,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]]},"cursor":{"x":22}}],[0.256649,{"cursor":{"x":27}}],[0.000173,{"lines":{"0":[[" @test endswith(\"abcd\", \"cd\")                                                                                                                                                        ",{}]],"1":[["@@ -1015,6 +1015,14 @@",{"fg":6}],[" let                                                                                                                                                           ",{}]],"2":[["     @test parse(\"\\udcdb = 1\",1,raise=false)[1] == Expr(:error, \"invalid character \\\"\\udcdb\\\"\")                                                                                      ",{}]],"3":[[" end                                                                                                                                                                                 ",{}]],"4":[["                                                                                                                                                                                     ",{}]],"5":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"6":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"7":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"8":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"9":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"10":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"11":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"12":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"13":[[" # issue #6949                                                                                                                                                                       ",{}]],"14":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"15":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"16":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"17":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"18":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"19":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"20":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"21":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"22":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"23":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"24":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"25":[["                                                                                                                                                                                     ",{"bold":true}]],"26":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"27":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"28":[["                                                                                                                                                                                     ",{"bold":true}]],"29":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"30":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"31":[["                                                                                                                                                                                     ",{"bold":true}]],"32":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"33":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"34":[["                                                                                                                                                                                     ",{}]],"35":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"36":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"37":[["                                                                                                                                                                                     ",{"bold":true}]],"38":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"39":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"40":[["                                                                                                                                                                                     ",{}]],"41":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"42":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"43":[["                                                                                                                                                                                     ",{}]],"44":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"45":[["                                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":0}}],[0.053636,{}],[0.035502,{"lines":{"45":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]]},"cursor":{"x":34}}],[0.000264,{"lines":{"0":[["     @test parse(\"\\udcdb = 1\",1,raise=false)[1] == Expr(:error, \"invalid character \\\"\\udcdb\\\"\")                                                                                      ",{}]],"1":[[" end                                                                                                                                                                                 ",{}]],"2":[["                                                                                                                                                                                     ",{}]],"3":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"4":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"5":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"6":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"7":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"8":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"9":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"10":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"11":[[" # issue #6949                                                                                                                                                                       ",{}]],"12":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"13":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"14":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"15":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"16":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"17":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"18":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"19":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"20":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"21":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"22":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"23":[["                                                                                                                                                                                     ",{"bold":true}]],"24":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"25":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"26":[["                                                                                                                                                                                     ",{"bold":true}]],"27":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"28":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"29":[["                                                                                                                                                                                     ",{"bold":true}]],"30":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"31":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{}]],"33":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"34":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"35":[["                                                                                                                                                                                     ",{"bold":true}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"37":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"40":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"43":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[2.006023,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]]},"cursor":{"x":8}}],[0.247675,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(                                                                                                                                                                            ",{"bold":true}]]},"cursor":{"x":9}}],[0.16796,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(2                                                                                                                                                                           ",{"bold":true}]]},"cursor":{"x":10}}],[0.592089,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(                                                                                                                                                                            ",{"bold":true}]]},"cursor":{"x":9}}],[0.136294,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(2                                                                                                                                                                           ",{"bold":true}]]},"cursor":{"x":10}}],[0.455882,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(                                                                                                                                                                            ",{"bold":true}]]},"cursor":{"x":9}}],[1.799923,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(t                                                                                                                                                                           ",{"bold":true}]]},"cursor":{"x":10}}],[0.175835,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(tr                                                                                                                                                                          ",{"bold":true}]]},"cursor":{"x":11}}],[0.080147,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(tru                                                                                                                                                                         ",{"bold":true}]]},"cursor":{"x":12}}],[0.08787300000000001,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(true                                                                                                                                                                        ",{"bold":true}]]},"cursor":{"x":13}}],[0.168127,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]]},"cursor":{"x":14}}],[0.192363,{}],[0.000169,{"lines":{"0":[[" end                                                                                                                                                                                 ",{}]],"1":[["                                                                                                                                                                                     ",{}]],"2":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"3":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"4":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"5":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"6":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"7":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"8":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"9":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"10":[[" # issue #6949                                                                                                                                                                       ",{}]],"11":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"12":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"13":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"14":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"15":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"16":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"17":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"18":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"19":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"20":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"21":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"22":[["                                                                                                                                                                                     ",{"bold":true}]],"23":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"24":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"25":[["                                                                                                                                                                                     ",{"bold":true}]],"26":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"27":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"28":[["                                                                                                                                                                                     ",{"bold":true}]],"29":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"30":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"31":[["                                                                                                                                                                                     ",{}]],"32":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"33":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"34":[["                                                                                                                                                                                     ",{"bold":true}]],"35":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"36":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"37":[["                                                                                                                                                                                     ",{}]],"38":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"39":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"40":[["                                                                                                                                                                                     ",{}]],"41":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"42":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"43":[["                                                                                                                                                                                     ",{"bold":true}]],"44":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"45":[["                                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":0}}],[0.347344,{"lines":{"45":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]]},"cursor":{"x":43}}],[0.000133,{"lines":{"0":[["+@test symbol(\"asdf\") === :asdf",{"fg":2}],["                                                                                                                                                      ",{}]],"1":[["+@test startswith(string(gensym(\"asdf\")),\"##asdf#\")",{"fg":2}],["                                                                                                                                  ",{}]],"2":[["+@test gensym(\"asdf\") != gensym(\"asdf\")",{"fg":2}],["                                                                                                                                              ",{}]],"3":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"4":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"5":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"6":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"7":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"8":[[" # issue #6949                                                                                                                                                                       ",{}]],"9":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"10":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"11":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"12":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"13":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"14":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"15":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"16":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"17":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"18":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"19":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"20":[["                                                                                                                                                                                     ",{"bold":true}]],"21":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"22":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"23":[["                                                                                                                                                                                     ",{"bold":true}]],"24":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"25":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"26":[["                                                                                                                                                                                     ",{"bold":true}]],"27":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"28":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"29":[["                                                                                                                                                                                     ",{}]],"30":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"31":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{"bold":true}]],"33":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"34":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"35":[["                                                                                                                                                                                     ",{}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"37":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"40":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{"bold":true}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"43":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[1.02014,{}],[5.3e-05,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]]},"cursor":{"x":14}}],[0.255822,{}],[5e-05,{"cursor":{"x":13}}],[1.60003,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(tru)                                                                                                                                                                        ",{"bold":true}]]},"cursor":{"x":12}}],[0.135805,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(tr)                                                                                                                                                                         ",{"bold":true}]]},"cursor":{"x":11}}],[0.15214,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(t)                                                                                                                                                                          ",{"bold":true}]]},"cursor":{"x":10}}],[0.127891,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f()                                                                                                                                                                           ",{"bold":true}]]},"cursor":{"x":9}}],[0.13612,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(V)                                                                                                                                                                          ",{"bold":true}]]},"cursor":{"x":10}}],[0.159932,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Va)                                                                                                                                                                         ",{"bold":true}]]},"cursor":{"x":11}}],[0.071924,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]]},"cursor":{"x":12}}],[0.207764,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val')                                                                                                                                                                       ",{"bold":true}]]},"cursor":{"x":13}}],[0.519845,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]]},"cursor":{"x":12}}],[0.160788,{"cursor":{"x":13}}],[0.010991,{"lines":{"0":[["+@test gensym() != gensym()",{"fg":2}],["                                                                                                                                                          ",{}]],"1":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"2":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"3":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"4":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"5":[[" # issue #6949                                                                                                                                                                       ",{}]],"6":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"7":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"8":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"9":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"10":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"11":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"12":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"13":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"14":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"15":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"16":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"17":[["                                                                                                                                                                                     ",{"bold":true}]],"18":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"19":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"21":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"22":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"24":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"25":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"26":[["                                                                                                                                                                                     ",{}]],"27":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"28":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"29":[["                                                                                                                                                                                     ",{"bold":true}]],"30":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"31":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{}]],"33":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"34":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"37":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{"bold":true}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"40":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"43":[["2                                                                                                                                                                                    ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[0.372831,{}],[0.000105,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]]},"cursor":{"x":13}}],[0.919615,{}],[7.032262,{"cursor":{"x":12}}],[0.383986,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{)                                                                                                                                                                       ",{"bold":true}]]},"cursor":{"x":13}}],[0.575952,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{1)                                                                                                                                                                      ",{"bold":true}]]},"cursor":{"x":14}}],[0.327911,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":15}}],[0.336492,{"cursor":{"x":16}}],[0.000168,{"lines":{"0":[["+@test startswith(string(gensym()),\"##\")",{"fg":2}],["                                                                                                                                             ",{}]],"1":[["+@test_throws ErrorException symbol(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"2":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"3":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"4":[[" # issue #6949                                                                                                                                                                       ",{}]],"5":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"6":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"7":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"8":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"9":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"10":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"11":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"12":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"13":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"14":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"15":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"16":[["                                                                                                                                                                                     ",{"bold":true}]],"17":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"18":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"19":[["                                                                                                                                                                                     ",{"bold":true}]],"20":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"21":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"22":[["                                                                                                                                                                                     ",{"bold":true}]],"23":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"24":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"25":[["                                                                                                                                                                                     ",{}]],"26":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"27":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"28":[["                                                                                                                                                                                     ",{"bold":true}]],"29":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"30":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"31":[["                                                                                                                                                                                     ",{}]],"32":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"33":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"34":[["                                                                                                                                                                                     ",{}]],"35":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"36":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"37":[["                                                                                                                                                                                     ",{"bold":true}]],"38":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"39":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"40":[["                                                                                                                                                                                     ",{}]],"41":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"42":[["2                                                                                                                                                                                    ",{"bold":true}]],"43":[["                                                                                                                                                                                     ",{"bold":true}]],"44":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"45":[["                                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":0}}],[0.042028,{"lines":{"45":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]]},"cursor":{"x":51}}],[0.000219,{"lines":{"0":[["+@test_throws ErrorException gensym(\"ab\\0\")",{"fg":2}],["                                                                                                                                          ",{}]],"1":[["+",{"fg":2}],["                                                                                                                                                                                    ",{}]],"2":[[" # issue #6949                                                                                                                                                                       ",{}]],"3":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"4":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"5":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"6":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"7":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"8":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"9":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"10":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"11":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"12":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"13":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"14":[["                                                                                                                                                                                     ",{"bold":true}]],"15":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"16":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"17":[["                                                                                                                                                                                     ",{"bold":true}]],"18":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"19":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"20":[["                                                                                                                                                                                     ",{"bold":true}]],"21":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"22":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"23":[["                                                                                                                                                                                     ",{}]],"24":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"25":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"26":[["                                                                                                                                                                                     ",{"bold":true}]],"27":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"28":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"29":[["                                                                                                                                                                                     ",{}]],"30":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"31":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{}]],"33":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"34":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"35":[["                                                                                                                                                                                     ",{"bold":true}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"37":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"40":[["2                                                                                                                                                                                    ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{"bold":true}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"43":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[3.98902,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]]},"cursor":{"x":8}}],[0.120227,{}],[0.001328,{"lines":{"0":[[" let f =IOBuffer(),                                                                                                                                                                  ",{}]],"1":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"2":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"3":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"4":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"5":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"6":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"7":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"8":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"9":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"10":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"11":[["                                                                                                                                                                                     ",{"bold":true}]],"12":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"13":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"15":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"16":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"18":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"19":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"20":[["                                                                                                                                                                                     ",{}]],"21":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"22":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"23":[["                                                                                                                                                                                     ",{"bold":true}]],"24":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"25":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"26":[["                                                                                                                                                                                     ",{}]],"27":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"28":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"30":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"31":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{"bold":true}]],"33":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"34":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"35":[["                                                                                                                                                                                     ",{}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"37":[["2                                                                                                                                                                                    ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{"bold":true}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"40":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{}]],"42":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"43":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[1.342352,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["h                                                                                                                                                                             ",{"bold":true}]]},"cursor":{"x":8}}],[0.10414,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["he                                                                                                                                                                            ",{"bold":true}]]},"cursor":{"x":9}}],[0.088129,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["hel                                                                                                                                                                           ",{"bold":true}]]},"cursor":{"x":10}}],[0.119782,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["help                                                                                                                                                                          ",{"bold":true}]]},"cursor":{"x":11}}],[0.57609,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["help(                                                                                                                                                                         ",{"bold":true}]]},"cursor":{"x":12}}],[0.112434,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["help(f                                                                                                                                                                        ",{"bold":true}]]},"cursor":{"x":13}}],[0.199655,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]]},"cursor":{"x":14}}],[0.144104,{}],[0.000159,{"lines":{"0":[["     x = split(\"1 2 3\")                                                                                                                                                              ",{}]],"1":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ julia                                                                                                                                                    ",{}]],"2":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"3":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"4":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"5":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"6":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"7":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"8":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"9":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"10":[["                                                                                                                                                                                     ",{"bold":true}]],"11":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"12":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"13":[["                                                                                                                                                                                     ",{"bold":true}]],"14":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"15":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"16":[["                                                                                                                                                                                     ",{"bold":true}]],"17":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"18":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"19":[["                                                                                                                                                                                     ",{}]],"20":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"21":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"22":[["                                                                                                                                                                                     ",{"bold":true}]],"23":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"24":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"25":[["                                                                                                                                                                                     ",{}]],"26":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"27":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"28":[["                                                                                                                                                                                     ",{}]],"29":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"30":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"31":[["                                                                                                                                                                                     ",{"bold":true}]],"32":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"33":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"34":[["                                                                                                                                                                                     ",{}]],"35":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"36":[["2                                                                                                                                                                                    ",{"bold":true}]],"37":[["                                                                                                                                                                                     ",{"bold":true}]],"38":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"39":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"40":[["                                                                                                                                                                                     ",{}]],"41":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"42":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"43":[["                                                                                                                                                                                     ",{"bold":true}]],"44":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"45":[["                                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":0}}],[1.24689,{"lines":{"45":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]]},"cursor":{"x":34}}],[0.000209,{"lines":{"0":[["               ",{"bold":true}],["_",{"fg":2,"bold":true}],["                                                                                                                                                                     ",{}]],"1":[["   ",{"bold":true}],["_",{"fg":4,"bold":true}],["       _ ",{"bold":true}],["_",{"fg":1,"bold":true}],["(_)",{"fg":2,"bold":true}],["_",{"fg":5,"bold":true}],["     |  A fresh approach to technical computing                                                                                                                    ",{"bold":true}]],"2":[["  ",{"bold":true}],["(_)",{"fg":4,"bold":true}],["     | ",{"bold":true}],["(_)",{"fg":1,"bold":true}],[" ",{"bold":true}],["(_)",{"fg":5,"bold":true}],["    |  Documentation: http://docs.julialang.org                                                                                                                   ",{"bold":true}]],"3":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"4":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"5":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"6":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"7":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"8":[["                                                                                                                                                                                     ",{"bold":true}]],"9":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"10":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"11":[["                                                                                                                                                                                     ",{"bold":true}]],"12":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"13":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"14":[["                                                                                                                                                                                     ",{"bold":true}]],"15":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"16":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"17":[["                                                                                                                                                                                     ",{}]],"18":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"19":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"20":[["                                                                                                                                                                                     ",{"bold":true}]],"21":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"22":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"23":[["                                                                                                                                                                                     ",{}]],"24":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"25":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"26":[["                                                                                                                                                                                     ",{}]],"27":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"28":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"29":[["                                                                                                                                                                                     ",{"bold":true}]],"30":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"31":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{}]],"33":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"34":[["2                                                                                                                                                                                    ",{"bold":true}]],"35":[["                                                                                                                                                                                     ",{"bold":true}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"37":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{}]],"39":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"40":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{"bold":true}]],"42":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"43":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[5.392713,{}],[4.8e-05,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]]},"cursor":{"x":14}}],[0.197877,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]]},"cursor":{"x":8}}],[0.521979,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":16}}],[1.856138,{}],[0.000145,{"cursor":{"x":15}}],[0.49565,{"cursor":{"x":14}}],[0.888199,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]]},"cursor":{"x":13}}],[0.207888,{"cursor":{"x":15}}],[0.00104,{"lines":{"0":[["   _ _   _| |_  __ _   |  Type \"help()\" for help.                                                                                                                                    ",{"bold":true}]],"1":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"2":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"3":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"4":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"5":[["                                                                                                                                                                                     ",{"bold":true}]],"6":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"7":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"9":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"10":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"12":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"13":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"14":[["                                                                                                                                                                                     ",{}]],"15":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"16":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"17":[["                                                                                                                                                                                     ",{"bold":true}]],"18":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"19":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"20":[["                                                                                                                                                                                     ",{}]],"21":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"22":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"24":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"25":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"26":[["                                                                                                                                                                                     ",{"bold":true}]],"27":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"28":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"29":[["                                                                                                                                                                                     ",{}]],"30":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"31":[["2                                                                                                                                                                                    ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{"bold":true}]],"33":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"34":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"35":[["                                                                                                                                                                                     ",{}]],"36":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"37":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{"bold":true}]],"39":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"40":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"43":[["2                                                                                                                                                                                    ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[0.823114,{}],[5e-05,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]]},"cursor":{"x":15}}],[0.288031,{}],[4.8e-05,{"cursor":{"x":14}}],[0.191603,{"cursor":{"x":13}}],[1.104194,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{I})                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":14}}],[0.215954,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{In})                                                                                                                                                                    ",{"bold":true}]]},"cursor":{"x":15}}],[0.07987900000000001,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]]},"cursor":{"x":16}}],[0.184281,{"cursor":{"x":18}}],[0.000161,{"lines":{"0":[["  | | | | | | |/ _` |  |                                                                                                                                                             ",{"bold":true}]],"1":[["  | | |_| | | | (_| |  |  Version 0.4.0-dev+2516 (2015-01-06 00:42 UTC)                                                                                                              ",{"bold":true}]],"2":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"3":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"4":[["                                                                                                                                                                                     ",{"bold":true}]],"5":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"6":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"7":[["                                                                                                                                                                                     ",{"bold":true}]],"8":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"9":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"10":[["                                                                                                                                                                                     ",{"bold":true}]],"11":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"12":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"13":[["                                                                                                                                                                                     ",{}]],"14":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"15":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"16":[["                                                                                                                                                                                     ",{"bold":true}]],"17":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"18":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"19":[["                                                                                                                                                                                     ",{}]],"20":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"21":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"22":[["                                                                                                                                                                                     ",{}]],"23":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"24":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"25":[["                                                                                                                                                                                     ",{"bold":true}]],"26":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"27":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"28":[["                                                                                                                                                                                     ",{}]],"29":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"30":[["2                                                                                                                                                                                    ",{"bold":true}]],"31":[["                                                                                                                                                                                     ",{"bold":true}]],"32":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"33":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"34":[["                                                                                                                                                                                     ",{}]],"35":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"36":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"37":[["                                                                                                                                                                                     ",{"bold":true}]],"38":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"39":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"40":[["                                                                                                                                                                                     ",{}]],"41":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"42":[["2                                                                                                                                                                                    ",{"bold":true}]],"43":[["                                                                                                                                                                                     ",{"bold":true}]],"44":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]],"45":[["                                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":0}}],[0.032544,{"lines":{"45":[["ERROR: `f` has no method matching f(::Type{Val{Int64}})",{"fg":1,"bold":true}],["                                                                                                                              ",{"bold":true}]]},"cursor":{"x":55}}],[0.000124,{"lines":{"0":[[" _/ |\\__'_|_|_|\\__'_|  |  Commit 7ab7071 (0 days old master)                                                                                                                         ",{"bold":true}]],"1":[["|__/                   |  x86_64-apple-darwin14.0.0                                                                                                                                  ",{"bold":true}]],"2":[["                                                                                                                                                                                     ",{"bold":true}]],"3":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"4":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"5":[["                                                                                                                                                                                     ",{"bold":true}]],"6":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"7":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"8":[["                                                                                                                                                                                     ",{"bold":true}]],"9":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"10":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"11":[["                                                                                                                                                                                     ",{}]],"12":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"13":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"14":[["                                                                                                                                                                                     ",{"bold":true}]],"15":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"16":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"17":[["                                                                                                                                                                                     ",{}]],"18":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"19":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"20":[["                                                                                                                                                                                     ",{}]],"21":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"22":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"23":[["                                                                                                                                                                                     ",{"bold":true}]],"24":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"25":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"26":[["                                                                                                                                                                                     ",{}]],"27":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"28":[["2                                                                                                                                                                                    ",{"bold":true}]],"29":[["                                                                                                                                                                                     ",{"bold":true}]],"30":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"31":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{}]],"33":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"34":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"35":[["                                                                                                                                                                                     ",{"bold":true}]],"36":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"37":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"40":[["2                                                                                                                                                                                    ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{"bold":true}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]],"43":[["ERROR: `f` has no method matching f(::Type{Val{Int64}})",{"fg":1,"bold":true}],["                                                                                                                              ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[0.6070950000000001,{}],[5.6e-05,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]]},"cursor":{"x":18}}],[0.415898,{}],[0.000105,{"cursor":{"x":17}}],[0.311758,{"cursor":{"x":16}}],[0.248002,{"cursor":{"x":15}}],[0.448064,{"cursor":{"x":16}}],[0.37577,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{In})                                                                                                                                                                    ",{"bold":true}]]},"cursor":{"x":15}}],[0.144286,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{I})                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":14}}],[0.151744,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]]},"cursor":{"x":13}}],[0.272139,{"cursor":{"x":15}}],[0.0009989999999999999,{"lines":{"0":[["julia> ",{"fg":2,"bold":true}],["Val                                                                                                                                                                           ",{"bold":true}]],"1":[["Val{T}                                                                                                                                                                               ",{"bold":true}]],"3":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"4":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"6":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"7":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"8":[["                                                                                                                                                                                     ",{}]],"9":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"10":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"11":[["                                                                                                                                                                                     ",{"bold":true}]],"12":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"13":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"14":[["                                                                                                                                                                                     ",{}]],"15":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"16":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"18":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"19":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"20":[["                                                                                                                                                                                     ",{"bold":true}]],"21":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"22":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"23":[["                                                                                                                                                                                     ",{}]],"24":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"25":[["2                                                                                                                                                                                    ",{"bold":true}]],"26":[["                                                                                                                                                                                     ",{"bold":true}]],"27":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"28":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"29":[["                                                                                                                                                                                     ",{}]],"30":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"31":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{"bold":true}]],"33":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"34":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"35":[["                                                                                                                                                                                     ",{}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"37":[["2                                                                                                                                                                                    ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{"bold":true}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]],"40":[["ERROR: `f` has no method matching f(::Type{Val{Int64}})",{"fg":1,"bold":true}],["                                                                                                                              ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"43":[["2                                                                                                                                                                                    ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[7.977045,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}})                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":23}}],[0.718916,{"cursor":{"x":22}}],[0.192207,{"cursor":{"x":21}}],[0.127925,{"cursor":{"x":20}}],[3.759917,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}})                                                                                                                                                             ",{"bold":true}]]},"cursor":{"x":21}}],[0.119984,{"cursor":{"x":22}}],[0.256115,{"cursor":{"x":23}}],[0.159481,{"cursor":{"x":24}}],[0.336342,{"cursor":{"x":25}}],[0.23204,{"cursor":{"x":26}}],[0.312426,{"cursor":{"x":25}}],[0.199999,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}}) =                                                                                                                                                           ",{"bold":true}]]},"cursor":{"x":26}}],[0.111706,{"cursor":{"x":27}}],[0.320076,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}}) = 5                                                                                                                                                         ",{"bold":true}]]},"cursor":{"x":28}}],[0.392325,{}],[0.002259,{"lines":{"0":[["julia> ",{"fg":2,"bold":true}],["Val{2}                                                                                                                                                                        ",{"bold":true}]],"1":[["Val{2}                                                                                                                                                                               ",{"bold":true}]],"3":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"4":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"5":[["                                                                                                                                                                                     ",{}]],"6":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"7":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"8":[["                                                                                                                                                                                     ",{"bold":true}]],"9":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"10":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"11":[["                                                                                                                                                                                     ",{}]],"12":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"13":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"15":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"16":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"17":[["                                                                                                                                                                                     ",{"bold":true}]],"18":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"19":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"20":[["                                                                                                                                                                                     ",{}]],"21":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"22":[["2                                                                                                                                                                                    ",{"bold":true}]],"23":[["                                                                                                                                                                                     ",{"bold":true}]],"24":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"25":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"26":[["                                                                                                                                                                                     ",{}]],"27":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"28":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"29":[["                                                                                                                                                                                     ",{"bold":true}]],"30":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"31":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{}]],"33":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"34":[["2                                                                                                                                                                                    ",{"bold":true}]],"35":[["                                                                                                                                                                                     ",{"bold":true}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]],"37":[["ERROR: `f` has no method matching f(::Type{Val{Int64}})",{"fg":1,"bold":true}],["                                                                                                                              ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"40":[["2                                                                                                                                                                                    ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{"bold":true}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}}) = 5                                                                                                                                                         ",{"bold":true}]],"43":[["f (generic function with 2 methods)                                                                                                                                                  ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[1.453369,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]]},"cursor":{"x":8}}],[0.271558,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(                                                                                                                                                                            ",{"bold":true}]]},"cursor":{"x":9}}],[1.856984,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(V                                                                                                                                                                           ",{"bold":true}]]},"cursor":{"x":10}}],[0.207517,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Va                                                                                                                                                                          ",{"bold":true}]]},"cursor":{"x":11}}],[0.127895,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val                                                                                                                                                                         ",{"bold":true}]]},"cursor":{"x":12}}],[0.688214,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val}                                                                                                                                                                        ",{"bold":true}]]},"cursor":{"x":13}}],[0.279873,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val                                                                                                                                                                         ",{"bold":true}]]},"cursor":{"x":12}}],[0.183935,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]]},"cursor":{"x":13}}],[0.256405,{}],[0.00157,{"lines":{"0":[["julia> ",{"fg":2,"bold":true}],["::Type{Val{}}                                                                                                                                                                 ",{"bold":true}]],"1":[["ERROR: syntax: invalid \"::\" syntax",{"fg":1,"bold":true}],["                                                                                                                                                   ",{"bold":true}]],"2":[["                                                                                                                                                                                     ",{}]],"3":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"4":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"5":[["                                                                                                                                                                                     ",{"bold":true}]],"6":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"7":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"8":[["                                                                                                                                                                                     ",{}]],"9":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"10":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"12":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"13":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"14":[["                                                                                                                                                                                     ",{"bold":true}]],"15":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"16":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"17":[["                                                                                                                                                                                     ",{}]],"18":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"19":[["2                                                                                                                                                                                    ",{"bold":true}]],"20":[["                                                                                                                                                                                     ",{"bold":true}]],"21":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"22":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"23":[["                                                                                                                                                                                     ",{}]],"24":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"25":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"26":[["                                                                                                                                                                                     ",{"bold":true}]],"27":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"28":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"29":[["                                                                                                                                                                                     ",{}]],"30":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"31":[["2                                                                                                                                                                                    ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{"bold":true}]],"33":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]],"34":[["ERROR: `f` has no method matching f(::Type{Val{Int64}})",{"fg":1,"bold":true}],["                                                                                                                              ",{"bold":true}]],"35":[["                                                                                                                                                                                     ",{}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"37":[["2                                                                                                                                                                                    ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{"bold":true}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}}) = 5                                                                                                                                                         ",{"bold":true}]],"40":[["f (generic function with 2 methods)                                                                                                                                                  ",{"bold":true}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"43":[["2                                                                                                                                                                                    ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[0.358194,{}],[4.6e-05,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]]},"cursor":{"x":13}}],[0.24008,{}],[5.3e-05,{"cursor":{"x":12}}],[0.672034,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{)                                                                                                                                                                       ",{"bold":true}]]},"cursor":{"x":13}}],[0.023858,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]]},"cursor":{"x":14}}],[0.295954,{"cursor":{"x":15}}],[0.001494,{"lines":{"0":[["julia> ",{"fg":2,"bold":true}],["Type{Val{}}                                                                                                                                                                   ",{"bold":true}]],"1":[["Type{Val{T}}                                                                                                                                                                         ",{"bold":true}]],"2":[["                                                                                                                                                                                     ",{"bold":true}]],"3":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"4":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"5":[["                                                                                                                                                                                     ",{}]],"6":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"7":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"9":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"10":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"11":[["                                                                                                                                                                                     ",{"bold":true}]],"12":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"13":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"14":[["                                                                                                                                                                                     ",{}]],"15":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"16":[["2                                                                                                                                                                                    ",{"bold":true}]],"17":[["                                                                                                                                                                                     ",{"bold":true}]],"18":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"19":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"20":[["                                                                                                                                                                                     ",{}]],"21":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"22":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"23":[["                                                                                                                                                                                     ",{"bold":true}]],"24":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"25":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"26":[["                                                                                                                                                                                     ",{}]],"27":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"28":[["2                                                                                                                                                                                    ",{"bold":true}]],"29":[["                                                                                                                                                                                     ",{"bold":true}]],"30":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]],"31":[["ERROR: `f` has no method matching f(::Type{Val{Int64}})",{"fg":1,"bold":true}],["                                                                                                                              ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{}]],"33":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"34":[["2                                                                                                                                                                                    ",{"bold":true}]],"35":[["                                                                                                                                                                                     ",{"bold":true}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}}) = 5                                                                                                                                                         ",{"bold":true}]],"37":[["f (generic function with 2 methods)                                                                                                                                                  ",{"bold":true}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"40":[["2                                                                                                                                                                                    ",{"bold":true}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[0.622651,{}],[5.3e-05,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]]},"cursor":{"x":15}}],[0.199826,{}],[0.000143,{"cursor":{"x":14}}],[0.247971,{"cursor":{"x":13}}],[1.791847,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":14}}],[0.112354,{"cursor":{"x":16}}],[0.006118999999999999,{"lines":{"0":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"1":[["ERROR: f not defined",{"fg":1,"bold":true}],["                                                                                                                                                                 ",{"bold":true}]],"2":[["                                                                                                                                                                                     ",{}]],"3":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"4":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"6":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"7":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"8":[["                                                                                                                                                                                     ",{"bold":true}]],"9":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"10":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"11":[["                                                                                                                                                                                     ",{}]],"12":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"13":[["2                                                                                                                                                                                    ",{"bold":true}]],"14":[["                                                                                                                                                                                     ",{"bold":true}]],"15":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"16":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"17":[["                                                                                                                                                                                     ",{}]],"18":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"19":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"20":[["                                                                                                                                                                                     ",{"bold":true}]],"21":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"22":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"23":[["                                                                                                                                                                                     ",{}]],"24":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"25":[["2                                                                                                                                                                                    ",{"bold":true}]],"26":[["                                                                                                                                                                                     ",{"bold":true}]],"27":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]],"28":[["ERROR: `f` has no method matching f(::Type{Val{Int64}})",{"fg":1,"bold":true}],["                                                                                                                              ",{"bold":true}]],"29":[["                                                                                                                                                                                     ",{}]],"30":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"31":[["2                                                                                                                                                                                    ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{"bold":true}]],"33":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}}) = 5                                                                                                                                                         ",{"bold":true}]],"34":[["f (generic function with 2 methods)                                                                                                                                                  ",{"bold":true}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"37":[["2                                                                                                                                                                                    ",{"bold":true}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]],"43":[["5                                                                                                                                                                                    ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[5.746857,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}}) = 5                                                                                                                                                         ",{"bold":true}]]},"cursor":{"x":28}}],[0.630955,{"cursor":{"x":27}}],[0.251252,{"cursor":{"x":26}}],[0.060753,{"cursor":{"x":25}}],[0.351985,{"cursor":{"x":24}}],[0.144204,{"cursor":{"x":23}}],[0.15992,{"cursor":{"x":22}}],[0.127798,{"cursor":{"x":21}}],[0.320224,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 5                                                                                                                                                          ",{"bold":true}]]},"cursor":{"x":20}}],[0.135834,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{5}}) = 5                                                                                                                                                         ",{"bold":true}]]},"cursor":{"x":21}}],[0.543982,{"cursor":{"x":22}}],[0.250935,{"cursor":{"x":23}}],[0.036888,{"cursor":{"x":24}}],[0.032327,{"cursor":{"x":25}}],[0.034524,{"cursor":{"x":26}}],[0.036855,{"cursor":{"x":27}}],[0.031655,{"cursor":{"x":28}}],[0.321042,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{5}}) =                                                                                                                                                           ",{"bold":true}]]},"cursor":{"x":27}}],[0.239832,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{5}}) = 7                                                                                                                                                         ",{"bold":true}]]},"cursor":{"x":28}}],[0.472005,{}],[0.001607,{"lines":{"0":[["julia> ",{"fg":2,"bold":true}],["f(Val{}) = 2                                                                                                                                                                  ",{"bold":true}]],"1":[["ERROR: syntax: \"Val{}\" is not a valid function argument name",{"fg":1,"bold":true}],["                                                                                                                         ",{"bold":true}]],"3":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"4":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"5":[["                                                                                                                                                                                     ",{"bold":true}]],"6":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"7":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"8":[["                                                                                                                                                                                     ",{}]],"9":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"10":[["2                                                                                                                                                                                    ",{"bold":true}]],"11":[["                                                                                                                                                                                     ",{"bold":true}]],"12":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"13":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"14":[["                                                                                                                                                                                     ",{}]],"15":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"16":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"17":[["                                                                                                                                                                                     ",{"bold":true}]],"18":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"19":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"20":[["                                                                                                                                                                                     ",{}]],"21":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"22":[["2                                                                                                                                                                                    ",{"bold":true}]],"23":[["                                                                                                                                                                                     ",{"bold":true}]],"24":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]],"25":[["ERROR: `f` has no method matching f(::Type{Val{Int64}})",{"fg":1,"bold":true}],["                                                                                                                              ",{"bold":true}]],"26":[["                                                                                                                                                                                     ",{}]],"27":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"28":[["2                                                                                                                                                                                    ",{"bold":true}]],"29":[["                                                                                                                                                                                     ",{"bold":true}]],"30":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}}) = 5                                                                                                                                                         ",{"bold":true}]],"31":[["f (generic function with 2 methods)                                                                                                                                                  ",{"bold":true}]],"33":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"34":[["2                                                                                                                                                                                    ",{"bold":true}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]],"40":[["5                                                                                                                                                                                    ",{"bold":true}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{5}}) = 7                                                                                                                                                         ",{"bold":true}]],"43":[["f (generic function with 3 methods)                                                                                                                                                  ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[1.918629,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]]},"cursor":{"x":8}}],[0.22417,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(                                                                                                                                                                            ",{"bold":true}]]},"cursor":{"x":9}}],[0.18414,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(2                                                                                                                                                                           ",{"bold":true}]]},"cursor":{"x":10}}],[0.239715,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(2)                                                                                                                                                                          ",{"bold":true}]]},"cursor":{"x":11}}],[0.144344,{}],[0.015002,{"lines":{"0":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{}}) = 2                                                                                                                                                          ",{"bold":true}]],"1":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"2":[["                                                                                                                                                                                     ",{"bold":true}]],"3":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"4":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"5":[["                                                                                                                                                                                     ",{}]],"6":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"7":[["2                                                                                                                                                                                    ",{"bold":true}]],"8":[["                                                                                                                                                                                     ",{"bold":true}]],"9":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"10":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"11":[["                                                                                                                                                                                     ",{}]],"12":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"13":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"14":[["                                                                                                                                                                                     ",{"bold":true}]],"15":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"16":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"17":[["                                                                                                                                                                                     ",{}]],"18":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"19":[["2                                                                                                                                                                                    ",{"bold":true}]],"20":[["                                                                                                                                                                                     ",{"bold":true}]],"21":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]],"22":[["ERROR: `f` has no method matching f(::Type{Val{Int64}})",{"fg":1,"bold":true}],["                                                                                                                              ",{"bold":true}]],"23":[["                                                                                                                                                                                     ",{}]],"24":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"25":[["2                                                                                                                                                                                    ",{"bold":true}]],"26":[["                                                                                                                                                                                     ",{"bold":true}]],"27":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}}) = 5                                                                                                                                                         ",{"bold":true}]],"28":[["f (generic function with 2 methods)                                                                                                                                                  ",{"bold":true}]],"30":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"31":[["2                                                                                                                                                                                    ",{"bold":true}]],"33":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]],"37":[["5                                                                                                                                                                                    ",{"bold":true}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{5}}) = 7                                                                                                                                                         ",{"bold":true}]],"40":[["f (generic function with 3 methods)                                                                                                                                                  ",{"bold":true}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(2)                                                                                                                                                                          ",{"bold":true}]],"43":[["ERROR: `f` has no method matching f(::Int64)",{"fg":1,"bold":true}],["                                                                                                                                         ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[0.520482,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]]},"cursor":{"x":8}}],[0.312075,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(                                                                                                                                                                            ",{"bold":true}]]},"cursor":{"x":9}}],[2.807725,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(V                                                                                                                                                                           ",{"bold":true}]]},"cursor":{"x":10}}],[0.224525,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Va                                                                                                                                                                          ",{"bold":true}]]},"cursor":{"x":11}}],[0.127874,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val                                                                                                                                                                         ",{"bold":true}]]},"cursor":{"x":12}}],[1.199985,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]]},"cursor":{"x":13}}],[0.296343,{}],[0.001732,{"lines":{"0":[["julia> ",{"fg":2,"bold":true}],["f(true)                                                                                                                                                                       ",{"bold":true}]],"1":[["ERROR: `f` has no method matching f(::Bool)",{"fg":1,"bold":true}],["                                                                                                                                          ",{"bold":true}]],"2":[["                                                                                                                                                                                     ",{}]],"3":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"4":[["2                                                                                                                                                                                    ",{"bold":true}]],"5":[["                                                                                                                                                                                     ",{"bold":true}]],"6":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"7":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"8":[["                                                                                                                                                                                     ",{}]],"9":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"10":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"11":[["                                                                                                                                                                                     ",{"bold":true}]],"12":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"13":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"14":[["                                                                                                                                                                                     ",{}]],"15":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"16":[["2                                                                                                                                                                                    ",{"bold":true}]],"17":[["                                                                                                                                                                                     ",{"bold":true}]],"18":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]],"19":[["ERROR: `f` has no method matching f(::Type{Val{Int64}})",{"fg":1,"bold":true}],["                                                                                                                              ",{"bold":true}]],"20":[["                                                                                                                                                                                     ",{}]],"21":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"22":[["2                                                                                                                                                                                    ",{"bold":true}]],"23":[["                                                                                                                                                                                     ",{"bold":true}]],"24":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}}) = 5                                                                                                                                                         ",{"bold":true}]],"25":[["f (generic function with 2 methods)                                                                                                                                                  ",{"bold":true}]],"27":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"28":[["2                                                                                                                                                                                    ",{"bold":true}]],"30":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"33":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]],"34":[["5                                                                                                                                                                                    ",{"bold":true}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{5}}) = 7                                                                                                                                                         ",{"bold":true}]],"37":[["f (generic function with 3 methods)                                                                                                                                                  ",{"bold":true}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(2)                                                                                                                                                                          ",{"bold":true}]],"40":[["ERROR: `f` has no method matching f(::Int64)",{"fg":1,"bold":true}],["                                                                                                                                         ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"43":[["2                                                                                                                                                                                    ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[0.606243,{}],[0.000113,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]]},"cursor":{"x":13}}],[0.319912,{}],[4.9e-05,{"cursor":{"x":12}}],[1.255949,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{)                                                                                                                                                                       ",{"bold":true}]]},"cursor":{"x":13}}],[0.400206,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]]},"cursor":{"x":14}}],[0.184041,{"cursor":{"x":15}}],[0.001619,{"lines":{"0":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"1":[["2                                                                                                                                                                                    ",{"bold":true}]],"2":[["                                                                                                                                                                                     ",{"bold":true}]],"3":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"4":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"5":[["                                                                                                                                                                                     ",{}]],"6":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"7":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"8":[["                                                                                                                                                                                     ",{"bold":true}]],"9":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"10":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"11":[["                                                                                                                                                                                     ",{}]],"12":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"13":[["2                                                                                                                                                                                    ",{"bold":true}]],"14":[["                                                                                                                                                                                     ",{"bold":true}]],"15":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]],"16":[["ERROR: `f` has no method matching f(::Type{Val{Int64}})",{"fg":1,"bold":true}],["                                                                                                                              ",{"bold":true}]],"17":[["                                                                                                                                                                                     ",{}]],"18":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"19":[["2                                                                                                                                                                                    ",{"bold":true}]],"20":[["                                                                                                                                                                                     ",{"bold":true}]],"21":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}}) = 5                                                                                                                                                         ",{"bold":true}]],"22":[["f (generic function with 2 methods)                                                                                                                                                  ",{"bold":true}]],"24":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"25":[["2                                                                                                                                                                                    ",{"bold":true}]],"27":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"30":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]],"31":[["5                                                                                                                                                                                    ",{"bold":true}]],"33":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{5}}) = 7                                                                                                                                                         ",{"bold":true}]],"34":[["f (generic function with 3 methods)                                                                                                                                                  ",{"bold":true}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(2)                                                                                                                                                                          ",{"bold":true}]],"37":[["ERROR: `f` has no method matching f(::Int64)",{"fg":1,"bold":true}],["                                                                                                                                         ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"40":[["2                                                                                                                                                                                    ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{"bold":true}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[0.381873,{}],[5.2e-05,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]]},"cursor":{"x":15}}],[0.264046,{}],[4.7e-05,{"cursor":{"x":14}}],[0.415979,{"cursor":{"x":13}}],[0.464148,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{2})                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":14}}],[0.1441,{"cursor":{"x":16}}],[0.000169,{"lines":{"0":[["2                                                                                                                                                                                    ",{"bold":true}]],"1":[["                                                                                                                                                                                     ",{"bold":true}]],"2":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"3":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"4":[["                                                                                                                                                                                     ",{}]],"5":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"6":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"7":[["                                                                                                                                                                                     ",{"bold":true}]],"8":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"9":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"10":[["                                                                                                                                                                                     ",{}]],"11":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"12":[["2                                                                                                                                                                                    ",{"bold":true}]],"13":[["                                                                                                                                                                                     ",{"bold":true}]],"14":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]],"15":[["ERROR: `f` has no method matching f(::Type{Val{Int64}})",{"fg":1,"bold":true}],["                                                                                                                              ",{"bold":true}]],"16":[["                                                                                                                                                                                     ",{}]],"17":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"18":[["2                                                                                                                                                                                    ",{"bold":true}]],"19":[["                                                                                                                                                                                     ",{"bold":true}]],"20":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}}) = 5                                                                                                                                                         ",{"bold":true}]],"21":[["f (generic function with 2 methods)                                                                                                                                                  ",{"bold":true}]],"22":[["                                                                                                                                                                                     ",{"bold":true}]],"23":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"24":[["2                                                                                                                                                                                    ",{"bold":true}]],"25":[["                                                                                                                                                                                     ",{"bold":true}]],"26":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"27":[["2                                                                                                                                                                                    ",{"bold":true}]],"28":[["                                                                                                                                                                                     ",{"bold":true}]],"29":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]],"30":[["5                                                                                                                                                                                    ",{"bold":true}]],"31":[["                                                                                                                                                                                     ",{"bold":true}]],"32":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{5}}) = 7                                                                                                                                                         ",{"bold":true}]],"33":[["f (generic function with 3 methods)                                                                                                                                                  ",{"bold":true}]],"34":[["                                                                                                                                                                                     ",{"bold":true}]],"35":[["julia> ",{"fg":2,"bold":true}],["f(2)                                                                                                                                                                          ",{"bold":true}]],"36":[["ERROR: `f` has no method matching f(::Int64)",{"fg":1,"bold":true}],["                                                                                                                                         ",{"bold":true}]],"37":[["                                                                                                                                                                                     ",{}]],"38":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"39":[["2                                                                                                                                                                                    ",{"bold":true}]],"40":[["                                                                                                                                                                                     ",{"bold":true}]],"41":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"42":[["2                                                                                                                                                                                    ",{"bold":true}]],"43":[["                                                                                                                                                                                     ",{"bold":true}]],"44":[["julia> ",{"fg":2,"bold":true}],["f(Val{2})                                                                                                                                                                     ",{"bold":true}]],"45":[["                                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":0}}],[0.034438,{"lines":{"45":[["ERROR: `f` has no method matching f(::Type{Val{2}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]]},"cursor":{"x":51}}],[0.000277,{"lines":{"0":[["julia> ",{"fg":2,"bold":true}],["f(Val{1})                                                                                                                                                                     ",{"bold":true}]],"1":[["ERROR: `f` has no method matching f(::Type{Val{1}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"2":[["                                                                                                                                                                                     ",{}]],"3":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"4":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"5":[["                                                                                                                                                                                     ",{"bold":true}]],"6":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"7":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"8":[["                                                                                                                                                                                     ",{}]],"9":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"10":[["2                                                                                                                                                                                    ",{"bold":true}]],"11":[["                                                                                                                                                                                     ",{"bold":true}]],"12":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]],"13":[["ERROR: `f` has no method matching f(::Type{Val{Int64}})",{"fg":1,"bold":true}],["                                                                                                                              ",{"bold":true}]],"14":[["                                                                                                                                                                                     ",{}]],"15":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"16":[["2                                                                                                                                                                                    ",{"bold":true}]],"17":[["                                                                                                                                                                                     ",{"bold":true}]],"18":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}}) = 5                                                                                                                                                         ",{"bold":true}]],"19":[["f (generic function with 2 methods)                                                                                                                                                  ",{"bold":true}]],"20":[["                                                                                                                                                                                     ",{"bold":true}]],"21":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"22":[["2                                                                                                                                                                                    ",{"bold":true}]],"23":[["                                                                                                                                                                                     ",{"bold":true}]],"24":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"25":[["2                                                                                                                                                                                    ",{"bold":true}]],"26":[["                                                                                                                                                                                     ",{"bold":true}]],"27":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]],"28":[["5                                                                                                                                                                                    ",{"bold":true}]],"29":[["                                                                                                                                                                                     ",{"bold":true}]],"30":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{5}}) = 7                                                                                                                                                         ",{"bold":true}]],"31":[["f (generic function with 3 methods)                                                                                                                                                  ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{"bold":true}]],"33":[["julia> ",{"fg":2,"bold":true}],["f(2)                                                                                                                                                                          ",{"bold":true}]],"34":[["ERROR: `f` has no method matching f(::Int64)",{"fg":1,"bold":true}],["                                                                                                                                         ",{"bold":true}]],"35":[["                                                                                                                                                                                     ",{}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"37":[["2                                                                                                                                                                                    ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{"bold":true}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"40":[["2                                                                                                                                                                                    ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{"bold":true}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(Val{2})                                                                                                                                                                     ",{"bold":true}]],"43":[["ERROR: `f` has no method matching f(::Type{Val{2}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[1.173139,{}],[9.3e-05,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{2})                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":16}}],[0.279934,{}],[4.9e-05,{"cursor":{"x":15}}],[0.207782,{"cursor":{"x":14}}],[0.408055,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]]},"cursor":{"x":13}}],[0.136055,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":14}}],[0.09626800000000001,{"cursor":{"x":16}}],[0.001752,{"lines":{"0":[["julia> ",{"fg":2,"bold":true}],["f                                                                                                                                                                             ",{"bold":true}]],"1":[["f (generic function with 1 method)                                                                                                                                                   ",{"bold":true}]],"2":[["                                                                                                                                                                                     ",{"bold":true}]],"3":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"4":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"5":[["                                                                                                                                                                                     ",{}]],"6":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"7":[["2                                                                                                                                                                                    ",{"bold":true}]],"8":[["                                                                                                                                                                                     ",{"bold":true}]],"9":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]],"10":[["ERROR: `f` has no method matching f(::Type{Val{Int64}})",{"fg":1,"bold":true}],["                                                                                                                              ",{"bold":true}]],"11":[["                                                                                                                                                                                     ",{}]],"12":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"13":[["2                                                                                                                                                                                    ",{"bold":true}]],"14":[["                                                                                                                                                                                     ",{"bold":true}]],"15":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}}) = 5                                                                                                                                                         ",{"bold":true}]],"16":[["f (generic function with 2 methods)                                                                                                                                                  ",{"bold":true}]],"18":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"19":[["2                                                                                                                                                                                    ",{"bold":true}]],"21":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"24":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]],"25":[["5                                                                                                                                                                                    ",{"bold":true}]],"27":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{5}}) = 7                                                                                                                                                         ",{"bold":true}]],"28":[["f (generic function with 3 methods)                                                                                                                                                  ",{"bold":true}]],"30":[["julia> ",{"fg":2,"bold":true}],["f(2)                                                                                                                                                                          ",{"bold":true}]],"31":[["ERROR: `f` has no method matching f(::Int64)",{"fg":1,"bold":true}],["                                                                                                                                         ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{}]],"33":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"34":[["2                                                                                                                                                                                    ",{"bold":true}]],"35":[["                                                                                                                                                                                     ",{"bold":true}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(Val{2})                                                                                                                                                                     ",{"bold":true}]],"40":[["ERROR: `f` has no method matching f(::Type{Val{2}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]],"43":[["5                                                                                                                                                                                    ",{"bold":true}]],"44":[["                                                                                                                                                                                     ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[0.670293,{}],[0.000124,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":16}}],[0.359611,{}],[4.9e-05,{"cursor":{"x":15}}],[0.183952,{"cursor":{"x":14}}],[0.359864,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]]},"cursor":{"x":13}}],[0.336089,{"lines":{"45":[["julia> ",{"fg":2,"bold":true}],["f(Val{5})                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":14}}],[0.400169,{"cursor":{"x":16}}],[0.006013000000000001,{"lines":{"0":[["julia> ",{"fg":2,"bold":true}],["help(f)                                                                                                                                                                       ",{"bold":true}]],"1":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"2":[["                                                                                                                                                                                     ",{}]],"3":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"4":[["2                                                                                                                                                                                    ",{"bold":true}]],"5":[["                                                                                                                                                                                     ",{"bold":true}]],"6":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]],"7":[["ERROR: `f` has no method matching f(::Type{Val{Int64}})",{"fg":1,"bold":true}],["                                                                                                                              ",{"bold":true}]],"8":[["                                                                                                                                                                                     ",{}]],"9":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"10":[["2                                                                                                                                                                                    ",{"bold":true}]],"11":[["                                                                                                                                                                                     ",{"bold":true}]],"12":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}}) = 5                                                                                                                                                         ",{"bold":true}]],"13":[["f (generic function with 2 methods)                                                                                                                                                  ",{"bold":true}]],"15":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"16":[["2                                                                                                                                                                                    ",{"bold":true}]],"18":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"21":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]],"22":[["5                                                                                                                                                                                    ",{"bold":true}]],"24":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{5}}) = 7                                                                                                                                                         ",{"bold":true}]],"25":[["f (generic function with 3 methods)                                                                                                                                                  ",{"bold":true}]],"27":[["julia> ",{"fg":2,"bold":true}],["f(2)                                                                                                                                                                          ",{"bold":true}]],"28":[["ERROR: `f` has no method matching f(::Int64)",{"fg":1,"bold":true}],["                                                                                                                                         ",{"bold":true}]],"29":[["                                                                                                                                                                                     ",{}]],"30":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"31":[["2                                                                                                                                                                                    ",{"bold":true}]],"32":[["                                                                                                                                                                                     ",{"bold":true}]],"33":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"36":[["julia> ",{"fg":2,"bold":true}],["f(Val{2})                                                                                                                                                                     ",{"bold":true}]],"37":[["ERROR: `f` has no method matching f(::Type{Val{2}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"38":[["                                                                                                                                                                                     ",{}]],"39":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]],"40":[["5                                                                                                                                                                                    ",{"bold":true}]],"41":[["                                                                                                                                                                                     ",{"bold":true}]],"42":[["julia> ",{"fg":2,"bold":true}],["f(Val{5})                                                                                                                                                                     ",{"bold":true}]],"43":[["7                                                                                                                                                                                    ",{"bold":true}]],"45":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]]},"cursor":{"x":7}}],[1.793296,{"lines":{"0":[["f (generic function with 1 method)",{}],["                                                                                                                                                   ",{"bold":true}]],"1":[["                                                                                                                                                                                     ",{}]],"2":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"3":[["2                                                                                                                                                                                    ",{"bold":true}]],"4":[["                                                                                                                                                                                     ",{"bold":true}]],"5":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]],"6":[["ERROR: `f` has no method matching f(::Type{Val{Int64}})",{"fg":1,"bold":true}],["                                                                                                                              ",{"bold":true}]],"7":[["                                                                                                                                                                                     ",{}]],"8":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"9":[["2                                                                                                                                                                                    ",{"bold":true}]],"10":[["                                                                                                                                                                                     ",{"bold":true}]],"11":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}}) = 5                                                                                                                                                         ",{"bold":true}]],"12":[["f (generic function with 2 methods)                                                                                                                                                  ",{"bold":true}]],"13":[["                                                                                                                                                                                     ",{"bold":true}]],"14":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"15":[["2                                                                                                                                                                                    ",{"bold":true}]],"16":[["                                                                                                                                                                                     ",{"bold":true}]],"17":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"18":[["2                                                                                                                                                                                    ",{"bold":true}]],"19":[["                                                                                                                                                                                     ",{"bold":true}]],"20":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]],"21":[["5                                                                                                                                                                                    ",{"bold":true}]],"22":[["                                                                                                                                                                                     ",{"bold":true}]],"23":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{5}}) = 7                                                                                                                                                         ",{"bold":true}]],"24":[["f (generic function with 3 methods)                                                                                                                                                  ",{"bold":true}]],"25":[["                                                                                                                                                                                     ",{"bold":true}]],"26":[["julia> ",{"fg":2,"bold":true}],["f(2)                                                                                                                                                                          ",{"bold":true}]],"27":[["ERROR: `f` has no method matching f(::Int64)",{"fg":1,"bold":true}],["                                                                                                                                         ",{"bold":true}]],"28":[["                                                                                                                                                                                     ",{}]],"29":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"30":[["2                                                                                                                                                                                    ",{"bold":true}]],"31":[["                                                                                                                                                                                     ",{"bold":true}]],"32":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"33":[["2                                                                                                                                                                                    ",{"bold":true}]],"34":[["                                                                                                                                                                                     ",{"bold":true}]],"35":[["julia> ",{"fg":2,"bold":true}],["f(Val{2})                                                                                                                                                                     ",{"bold":true}]],"36":[["ERROR: `f` has no method matching f(::Type{Val{2}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"37":[["                                                                                                                                                                                     ",{}]],"38":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]],"39":[["5                                                                                                                                                                                    ",{"bold":true}]],"40":[["                                                                                                                                                                                     ",{"bold":true}]],"41":[["julia> ",{"fg":2,"bold":true}],["f(Val{5})                                                                                                                                                                     ",{"bold":true}]],"42":[["7                                                                                                                                                                                    ",{"bold":true}]],"43":[["                                                                                                                                                                                     ",{"bold":true}]],"44":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]],"45":[["                                                                                                                                                                                     ",{"bold":true}]]},"cursor":{"x":0}}],[3.9e-05,{}],[0.135566,{"lines":{"45":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ ",{}],["                                                                                                                                                         ",{"bold":true}]]},"cursor":{"x":28}}],[4.625164,{"lines":{"0":[["                                                                                                                                                                                     ",{}]],"1":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"2":[["2                                                                                                                                                                                    ",{"bold":true}]],"3":[["                                                                                                                                                                                     ",{"bold":true}]],"4":[["julia> ",{"fg":2,"bold":true}],["f(Val{Int})                                                                                                                                                                   ",{"bold":true}]],"5":[["ERROR: `f` has no method matching f(::Type{Val{Int64}})",{"fg":1,"bold":true}],["                                                                                                                              ",{"bold":true}]],"6":[["                                                                                                                                                                                     ",{}]],"7":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"8":[["2                                                                                                                                                                                    ",{"bold":true}]],"9":[["                                                                                                                                                                                     ",{"bold":true}]],"10":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{3}}) = 5                                                                                                                                                         ",{"bold":true}]],"11":[["f (generic function with 2 methods)                                                                                                                                                  ",{"bold":true}]],"12":[["                                                                                                                                                                                     ",{"bold":true}]],"13":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"14":[["2                                                                                                                                                                                    ",{"bold":true}]],"15":[["                                                                                                                                                                                     ",{"bold":true}]],"16":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"17":[["2                                                                                                                                                                                    ",{"bold":true}]],"18":[["                                                                                                                                                                                     ",{"bold":true}]],"19":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]],"20":[["5                                                                                                                                                                                    ",{"bold":true}]],"21":[["                                                                                                                                                                                     ",{"bold":true}]],"22":[["julia> ",{"fg":2,"bold":true}],["f(::Type{Val{5}}) = 7                                                                                                                                                         ",{"bold":true}]],"23":[["f (generic function with 3 methods)                                                                                                                                                  ",{"bold":true}]],"24":[["                                                                                                                                                                                     ",{"bold":true}]],"25":[["julia> ",{"fg":2,"bold":true}],["f(2)                                                                                                                                                                          ",{"bold":true}]],"26":[["ERROR: `f` has no method matching f(::Int64)",{"fg":1,"bold":true}],["                                                                                                                                         ",{"bold":true}]],"27":[["                                                                                                                                                                                     ",{}]],"28":[["julia> ",{"fg":2,"bold":true}],["f(Val)                                                                                                                                                                        ",{"bold":true}]],"29":[["2                                                                                                                                                                                    ",{"bold":true}]],"30":[["                                                                                                                                                                                     ",{"bold":true}]],"31":[["julia> ",{"fg":2,"bold":true}],["f(Val{})                                                                                                                                                                      ",{"bold":true}]],"32":[["2                                                                                                                                                                                    ",{"bold":true}]],"33":[["                                                                                                                                                                                     ",{"bold":true}]],"34":[["julia> ",{"fg":2,"bold":true}],["f(Val{2})                                                                                                                                                                     ",{"bold":true}]],"35":[["ERROR: `f` has no method matching f(::Type{Val{2}})",{"fg":1,"bold":true}],["                                                                                                                                  ",{"bold":true}]],"36":[["                                                                                                                                                                                     ",{}]],"37":[["julia> ",{"fg":2,"bold":true}],["f(Val{3})                                                                                                                                                                     ",{"bold":true}]],"38":[["5                                                                                                                                                                                    ",{"bold":true}]],"39":[["                                                                                                                                                                                     ",{"bold":true}]],"40":[["julia> ",{"fg":2,"bold":true}],["f(Val{5})                                                                                                                                                                     ",{"bold":true}]],"41":[["7                                                                                                                                                                                    ",{"bold":true}]],"42":[["                                                                                                                                                                                     ",{"bold":true}]],"43":[["julia> ",{"fg":2,"bold":true}],["                                                                                                                                                                              ",{"bold":true}]],"44":[["~/ipap/github/julia",{}],[" master",{"fg":3}],["$ exit",{}],["                                                                                                                                                     ",{"bold":true}]],"45":[["                                                                                                                                                                                     ",{}]]},"cursor":{"x":0}}]]