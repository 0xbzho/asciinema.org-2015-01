{"ID":15668,"Author":{"Name":"avagin","ID":0,"FullName":"","Gravatar":"7abfcccdc251a001dc1af015d152cc05"},"Title":"Adding a new test case","Description":"\u003cdiv class=\"content\"\u003e\u003cp\u003eWe have a simple test framework and about 200 test cases. Each test case can be divided into three stages: preparation, testing, checking the results. Each test is a binary file. When a test completes preparation, it is demonized. Then we can do a test action (e.g. dump and restore it). After that we send a signal to stop and check the results.\u003cbr/\u003e\nWe have shortcuts to execute and stop a test.\u003cbr/\u003e\nmake test.pid\u003cbr/\u003e\nmake test.out\u003cbr/\u003e\nThe framework only contains a few functions: test_init, test_daemon, test_go, test_waitsig, err, pass, fail, test_msg.\u003cbr/\u003e\nA test framework must help developers write tests.\u003cbr/\u003e\nAnother part of our test system is a bash script zdtm.sh. This script executes tests, does test actions and checks the results. CRUI allows to dump/restore, creates iterative snapshots, works with a page server, etc. All these are called test actions here.\u003cbr/\u003e\nzdtm.sh does preparation for a test if it\u0026#39;s required. For example, it constructs a minimal root to execute tests in another mount namespace.\u003cbr/\u003e\nzdtm.sh allows to execute tests concurrently. For that it executes each test in a new pid namespace.\u003cbr/\u003e\nzdtm.sh does basic checks. For example, it checks if Â processes are restored with the same set of file descriptors and memory mappings.\u003cbr/\u003e\nEach developer must execute the \u0026#34;make tests\u0026#34; command before sending patches. It executes dump/restore for all tests and other test actions within one test. It\u0026#39;s running less then three minutes.\u003c/p\u003e\n\u003c/div\u003e","Time":"2015-01-23T09:44:10Z","Tags":["Linux","bash","xterm-256color"]}